<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>线程，协程对比和 Python 爬虫使用</title>
    <link href="/2019/04/10/python-%E5%8D%8F%E7%A8%8B-%E5%BC%82%E6%AD%A5-%E7%88%AC%E8%99%AB%E5%AF%B9%E6%AF%94/"/>
    <url>/2019/04/10/python-%E5%8D%8F%E7%A8%8B-%E5%BC%82%E6%AD%A5-%E7%88%AC%E8%99%AB%E5%AF%B9%E6%AF%94/</url>
    
    <content type="html"><![CDATA[<p>重点为介绍 <code>asyncio</code>。</p><p><code>asyncio</code>  可以实现单线程并发 IO 操作。Asynchronous HTTP Client/Server for <a href="https://aiohttp.readthedocs.io/en/stable/glossary.html#term-asyncio" target="_blank" rel="noopener">asyncio</a> and Python。</p><p>aiohttp <code>则是基于</code> asyncio 实现的 HTTP 框架。</p><ul><li><a href="https://aiohttp.readthedocs.io/en/stable/" target="_blank" rel="noopener">AIOHTTP</a></li></ul><p>我们先安装 <code>aiohttp</code>：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">pip install aiohttp<br></code></pre></div></td></tr></table></figure><p>编写一个 Flask 服务器，模拟网络爬虫场景</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-keyword">import</span> time<br><br>app = Flask(__name__)<br><span class="hljs-meta">@app.route('/')</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span><span class="hljs-params">()</span>:</span><br>    time.sleep(<span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">'Hello ,world!'</span><br><br><br><br><span class="hljs-meta">@app.route('/go')</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">go</span><span class="hljs-params">()</span>:</span><br>    time.sleep(<span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">'Hello ,go!'</span><br><br><br><span class="hljs-meta">@app.route('/python')</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">python</span><span class="hljs-params">()</span>:</span><br>    time.sleep(<span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">'Hello ,python!'</span><br><br><br><span class="hljs-meta">@app.route('/c')</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">c</span><span class="hljs-params">()</span>:</span><br>    time.sleep(<span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">'Hello ,c!'</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    app.run(threaded=<span class="hljs-keyword">True</span>, port=<span class="hljs-number">5000</span>)<br></code></pre></div></td></tr></table></figure><h4 id="绑定回调"><a href="#绑定回调" class="headerlink" title="绑定回调"></a>绑定回调</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">import</span> requests<br> <br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">request</span><span class="hljs-params">()</span>:</span><br>    url = <span class="hljs-string">'https://www.baidu.com'</span><br>    status = requests.get(url)<br>    <span class="hljs-keyword">return</span> status<br> <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">callback</span><span class="hljs-params">(task)</span>:</span><br>    print(<span class="hljs-string">'Status:'</span>, task.result())<br> <br>coroutine = request()<br>task = asyncio.ensure_future(coroutine)<br>task.add_done_callback(callback)<br>print(<span class="hljs-string">'Task:'</span>, task)<br> <br>loop = asyncio.get_event_loop()<br>loop.run_until_complete(task)<br>print(<span class="hljs-string">'Task:'</span>, task)<br></code></pre></div></td></tr></table></figure><p>多线程协程爬虫，测试是并行</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">from</span> multiprocessing.dummy <span class="hljs-keyword">import</span> Pool <span class="hljs-keyword">as</span> ThreadPool<br><br>path = [<span class="hljs-string">"/go"</span>, <span class="hljs-string">"/c"</span>, <span class="hljs-string">"/python"</span>, <span class="hljs-string">"/"</span>] * <span class="hljs-number">100</span><br>host = <span class="hljs-string">"http://127.0.0.1:5000"</span><br>full_url = list(map(<span class="hljs-keyword">lambda</span> x: <span class="hljs-string">f"<span class="hljs-subst">&#123;host&#125;</span><span class="hljs-subst">&#123;x&#125;</span>"</span>, path))<br><br>thread = <span class="hljs-number">4</span><br><br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_page</span><span class="hljs-params">(url, loop)</span>:</span><br>    future = loop.run_in_executor(<br>        <span class="hljs-keyword">None</span>, requests.get, url<br>    )<br>    response = <span class="hljs-keyword">await</span> future<br>    print(response.text)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">divide</span><span class="hljs-params">(i)</span>:</span><br>    <span class="hljs-keyword">import</span> asyncio<br>    loop = asyncio.new_event_loop()<br>    asyncio.set_event_loop(loop)<br><br>    tasks = [asyncio.ensure_future(get_page(url, loop))<br>             <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> full_url]<br>    loop.run_until_complete(asyncio.wait(tasks))<br>    loop.close()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    start = time.time()<br>    pool = ThreadPool(thread)<br>    <span class="hljs-comment"># i = [j for j in range(0, thread)]</span><br>    pool.map(divide, )<br>    pool.close()<br>    pool.join()<br>    print(<span class="hljs-string">"爬取&#123;0&#125;个网页 ，总花费时间:&#123;1:.2f&#125;s"</span>.format(<br>        len(path), start - time.time()), end=<span class="hljs-string">""</span>)<br></code></pre></div></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">import</span> aiohttp<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> aiomultiprocess <span class="hljs-keyword">import</span> Pool<br> <br>start = time.time()<br> <br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span><span class="hljs-params">(url)</span>:</span><br>    session = aiohttp.ClientSession()<br>    response = <span class="hljs-keyword">await</span> session.get(url)<br>    result = <span class="hljs-keyword">await</span> response.text()<br>    session.close()<br>    <span class="hljs-keyword">return</span> result<br> <br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">request</span><span class="hljs-params">()</span>:</span><br>    url = <span class="hljs-string">'http://127.0.0.1:5000'</span><br>    urls = [url <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(<span class="hljs-number">100</span>)]<br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> Pool() <span class="hljs-keyword">as</span> pool:<br>        result = <span class="hljs-keyword">await</span> pool.map(get, urls)<br>        <span class="hljs-keyword">return</span> result<br> <br>coroutine = request()<br>task = asyncio.ensure_future(coroutine)<br>loop = asyncio.get_event_loop()<br>loop.run_until_complete(task)<br> <br>end = time.time()<br>print(<span class="hljs-string">'Cost time:'</span>, end - start)<br></code></pre></div></td></tr></table></figure><h4 id="异步协程协程-request-代码"><a href="#异步协程协程-request-代码" class="headerlink" title="异步协程协程 request 代码"></a>异步协程协程 request 代码</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> asyncio<br><br>path = [<span class="hljs-string">"/go"</span>, <span class="hljs-string">"/c"</span>, <span class="hljs-string">"/python"</span>, <span class="hljs-string">"/"</span>] * <span class="hljs-number">100</span><br>host = <span class="hljs-string">"http://127.0.0.1:5000"</span><br>full_url = list(map(<span class="hljs-keyword">lambda</span> x: <span class="hljs-string">f"<span class="hljs-subst">&#123;host&#125;</span><span class="hljs-subst">&#123;x&#125;</span>"</span>, path))<br><br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_page</span><span class="hljs-params">(url, loop)</span>:</span><br>    future = loop.run_in_executor(<br>        <span class="hljs-keyword">None</span>, requests.get, url<br>    )<br>    response = <span class="hljs-keyword">await</span> future<br>    <span class="hljs-comment"># print(response.text)</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    start = time.time()<br>    loop = asyncio.get_event_loop()<br>    tasks = [asyncio.ensure_future(get_page(url, loop)) <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> full_url]<br>    loop.run_until_complete(asyncio.wait(tasks))<br>    loop.close()<br>    print(<span class="hljs-string">"爬取&#123;0&#125;个网页 ，总花费时间:&#123;1:.2f&#125;s"</span>.format(<br>        len(path), start - time.time()), end=<span class="hljs-string">""</span>)<br></code></pre></div></td></tr></table></figure><p>输出结果: 爬取400个网页 ，总花费时间:-21.20s</p><h4 id="异步协程爬虫"><a href="#异步协程爬虫" class="headerlink" title="异步协程爬虫"></a>异步协程爬虫</h4><p>因 requests 不支持异步。换 <code>asyncio</code></p><p>代码代码如下：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> aiohttp<br><span class="hljs-keyword">import</span> asyncio<br><br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_page</span><span class="hljs-params">(url)</span>:</span><br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span>  aiohttp.ClientSession() <span class="hljs-keyword">as</span> session:<br>        <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> <span class="hljs-keyword">await</span> session.get(url=url) <span class="hljs-keyword">as</span> response:<br>            page_text = <span class="hljs-keyword">await</span> response.text()<br>            print(page_text)<br><br><br>path = [<span class="hljs-string">"/go"</span>, <span class="hljs-string">"/c"</span>, <span class="hljs-string">"/python"</span>, <span class="hljs-string">"/"</span>] * <span class="hljs-number">100</span><br>url = <span class="hljs-string">"http://127.0.0.1:5000"</span><br>full_url = list(map(<span class="hljs-keyword">lambda</span> x: url + x, path))<br><br><span class="hljs-comment">#</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    print(full_url)<br>    start = time.time()<br>    loop = asyncio.get_event_loop()<br>    tasks = [asyncio.ensure_future(get_page(url)) <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> full_url]<br><br>    loop.run_until_complete(asyncio.wait(tasks))<br>    print(<span class="hljs-string">"爬取&#123;0&#125;个网页 ，总花费时间:&#123;1:.2f&#125;s"</span>.format(<br>        len(path), start - time.time()), end=<span class="hljs-string">""</span>)<br></code></pre></div></td></tr></table></figure><p>输出结果: 爬取400个网页 ，总花费时间:-3.35s</p><h4 id="如何实现数据解析—任务的绑定回调机制"><a href="#如何实现数据解析—任务的绑定回调机制" class="headerlink" title="如何实现数据解析—任务的绑定回调机制"></a>如何实现数据解析—任务的绑定回调机制</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">### 如何实现数据解析---任务的绑定回调机制</span><br><span class="hljs-keyword">import</span> aiohttp<br><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-comment">#回调函数：解析响应数据</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">callback</span><span class="hljs-params">(task)</span>:</span><br>    print(<span class="hljs-string">'this is callback()'</span>)<br>    <span class="hljs-comment">#获取响应数据</span><br>    page_text = task.result()<br>    print(<span class="hljs-string">'在回调函数中，实现数据解析'</span>)<br>    <br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_page</span><span class="hljs-params">(url)</span>:</span><br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> aiohttp.ClientSession() <span class="hljs-keyword">as</span> session:<br>        <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> <span class="hljs-keyword">await</span> session.get(url=url) <span class="hljs-keyword">as</span> response:<br>            page_text = <span class="hljs-keyword">await</span> response.text() <span class="hljs-comment">#read()  json()</span><br><span class="hljs-comment">#             print(page_text)</span><br>            <span class="hljs-keyword">return</span> page_text<br>start = time.time()<br>path = [<span class="hljs-string">"/go"</span>, <span class="hljs-string">"/c"</span>, <span class="hljs-string">"/python"</span>, <span class="hljs-string">"/"</span>] * <span class="hljs-number">100</span><br>host = <span class="hljs-string">"http://127.0.0.1:5000"</span><br>full_url = list(map(<span class="hljs-keyword">lambda</span> x: <span class="hljs-string">f"<span class="hljs-subst">&#123;host&#125;</span><span class="hljs-subst">&#123;x&#125;</span>"</span>, path))<br><br><br>tasks = []<br>loop = asyncio.get_event_loop()<br><span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> urls:<br>    c = get_page(url)<br>    task = asyncio.ensure_future(c)<br>    <span class="hljs-comment">#给任务对象绑定回调函数用于解析响应数据</span><br>    task.add_done_callback(callback)<br>    tasks.append(task)<br>loop.run_until_complete(asyncio.wait(tasks))<br>print(<span class="hljs-string">'总耗时：'</span>,time.time()-start)<br></code></pre></div></td></tr></table></figure><p>结合代理池，爬虫速度能做到极致。</p><h4 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4><ul><li><a href="https://github.com/zhang0peter/python-coroutine" target="_blank" rel="noopener">线程，协程对比和Python爬虫实战说明</a></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MjM5MzgyODQxMQ==&amp;mid=2650368555&amp;idx=1&amp;sn=a449f107c9c16466c51ce8a6939fcb1b&amp;chksm=be9cd17f89eb5869c00e964e42e79400d4c9b993c4c5764ddbf9ef0e4b85741fc4ab05c77dbc&amp;mpshare=1&amp;scene=23&amp;srcid=07163jZEvRwfwwii9F8dKopl#rd" target="_blank" rel="noopener">asyncio：高性能异步模块使用介绍</a></p></li><li><p><a href="https://cuiqingcai.com/6160.html" target="_blank" rel="noopener">Python中异步协程的使用方法介绍</a></p></li><li><a href="https://www.ibm.com/developerworks/cn/analytics/library/ba-on-demand-data-python-3/index.html" target="_blank" rel="noopener">在 Python 中按需处理数据，第 3 部分 协程和 asyncio</a></li><li><a href="https://stackoverflow.com/questions/22190403/how-could-i-use-requests-in-asyncio" target="_blank" rel="noopener">How could I use requests in asyncio?</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>aiolib</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python GeventWebSocket</title>
    <link href="/2019/04/01/Python%20GeventWebSocket/"/>
    <url>/2019/04/01/Python%20GeventWebSocket/</url>
    
    <content type="html"><![CDATA[<h2 id="WebSocket-介绍"><a href="#WebSocket-介绍" class="headerlink" title="WebSocket 介绍"></a>WebSocket 介绍</h2><h2 id="什么是-WebSocket"><a href="#什么是-WebSocket" class="headerlink" title="什么是 WebSocket ?"></a>什么是 WebSocket ?</h2><p>WebSocket 是独立的、创建在 TCP 上的协议。</p><p>Websocket 通过 <a href="https://zh.wikipedia.org/wiki/HTTP" target="_blank" rel="noopener">HTTP</a>/1.1 协议的101<a href="https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81" target="_blank" rel="noopener">状态码</a>进行握手。</p><p>为了创建 <code>Websocket</code> 连接，需要通过浏览器发出请求，之后服务器进行回应，这个过程通常称为 “<a href="https://zh.wikipedia.org/wiki/%E6%8F%A1%E6%89%8B_(%E6%8A%80%E6%9C%AF" target="_blank" rel="noopener">握手</a>)”（<code>handshaking</code>）。</p><ul><li><code>HTTP</code> 是运行在 <code>TCP</code> 协议传输层的应用协议 ，<code>WebSocket</code> 是通过 HTTP 协议协商如何连接，然后独立运行在 <code>TCP</code> 协议传输层上的 应用协议。</li><li><code>WebSocket</code> 是一个持久化的协议，相对于 <code>HTTP</code> 这种非持久的协议来说。</li></ul><h2 id="使用-Python-scoket"><a href="#使用-Python-scoket" class="headerlink" title="使用 Python scoket"></a>使用 Python scoket</h2><ul><li><p>服务端暂时只是获取 <code>HTTP</code> 和 <code>Websocket</code> 请求头。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> hashlib<br><br>HOST = <span class="hljs-string">"127.0.0.1"</span><br>PORT = <span class="hljs-number">9999</span><br><br><span class="hljs-keyword">with</span> socket.socket(socket.AF_INET, socket.SOCK_STREAM) <span class="hljs-keyword">as</span> s:<br>    <span class="hljs-comment"># 端口重用</span><br>    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="hljs-number">1</span>)<br>    s.bind((HOST, PORT))<br>    s.listen()<br>    conn, addr = s.accept()<br>    <span class="hljs-comment"># 获取客户端的握手信息</span><br>    <span class="hljs-keyword">with</span> conn:<br>        <span class="hljs-comment"># print('Connected by', addr)</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">True</span>:<br>            data = conn.recv(<span class="hljs-number">1024</span>)<br>            frmat = data.decode()<br>            print(frmat)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> data: <span class="hljs-keyword">break</span><br>            conn.sendall(data)<br></code></pre></div></td></tr></table></figure></li><li><p>WebSocket 客户端代码，只做连接</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">"text/javascript"</span>&gt; <br><span class="hljs-keyword">var</span> ws = <span class="hljs-keyword">new</span> WebSocket(<span class="hljs-string">"ws://127.0.0.1:9999"</span>)<br><br>    ws.onmessage = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(event.data);<br>    &#125;;<br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure></li></ul><p>以下为获取<strong>请求头</strong>。</p><p>原始 <code>HTTP</code> 请求头（ 上图 ） 对比 <code>WebSocket</code> </p><p><img src="/images/python/python_socker1.png" srcset="/img/loading.gif" lazyload alt="image-20190322203358514"></p><p>+=</p><p><img src="/images/python/python_socker2.png" srcset="/img/loading.gif" lazyload alt="image-20190322203504577"></p><p>获取 <code>Sec-WebSocket-Key</code> 的值</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_headers</span><span class="hljs-params">(data)</span>:</span><br>    header_dict = &#123;&#125;<br>    header_str = data.decode(<span class="hljs-string">"utf8"</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> header_str.split(<span class="hljs-string">"\r\n"</span>):<br>        <span class="hljs-keyword">if</span> str(i).startswith(<span class="hljs-string">"Sec-WebSocket-Key"</span>):<br>            header_dict[<span class="hljs-string">"Sec-WebSocket-Key"</span>] = i.split(<span class="hljs-string">":"</span>)[<span class="hljs-number">1</span>].strip()<br><br>    <span class="hljs-keyword">return</span> header_dict<br></code></pre></div></td></tr></table></figure><p> 请求和响应的<strong>握手</strong>信息需要遵循规则：</p><ul><li>从请求<strong>握手</strong>信息中提取 <code>S·ec-WebSocket-Key</code> 的值</li><li>利用 <code>magic_string</code> 和 <code>Sec-WebSocket-Ke</code>y  的值 ，进行 <code>hmac1(sha1)</code> 加密，再进行 <code>base64</code> 加密</li><li>将结果做为 <code>“ Sec-WebSocket-Accept”</code> 头的值，返回给客户端。</li></ul><p>magic_string<code>特殊字符串 「</code> 258EAFA5-E914-47DA-95CA-C5AB0DC85B11`  」</p><p>再来介绍一下ready state 表示的四种状态</p><ul><li>CONNECTING (0)：表示还没建立连接； </li><li>OPEN (1)： 已经建立连接，可以进行通讯； </li><li>CLOSING (2)：通过关闭握手，正在关闭连接； </li><li>CLOSED (3)：连接已经关闭或无法打开；</li></ul><hr><p><img src="/images/python/python_socker3.png" srcset="/img/loading.gif" lazyload alt="2019-03-22 at 10.41 PM"></p><p>客户端 接受客户端信息解密，流程</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br>hashstr = <span class="hljs-string">b'\x81\x8b\xf1\x9c*=\x99\xf9FQ\x9e\xb0]R\x83\xf0N'</span><br><br><span class="hljs-comment"># 将第二个字节也就是 \x83 第9-16位 进行与127进行位运算</span><br>payload = hashstr[<span class="hljs-number">1</span>] &amp; <span class="hljs-number">127</span><br>print(payload)<br><span class="hljs-keyword">if</span> payload == <span class="hljs-number">127</span>:<br>    extend_payload_len = hashstr[<span class="hljs-number">2</span>:<span class="hljs-number">10</span>]<br>    mask = hashstr[<span class="hljs-number">10</span>:<span class="hljs-number">14</span>]<br>    decoded = hashstr[<span class="hljs-number">14</span>:]<br><span class="hljs-comment"># 当位运算结果等于127时,则第3-10个字节为数据长度</span><br><span class="hljs-comment"># 第11-14字节为mask 解密所需字符串</span><br><span class="hljs-comment"># 则数据为第15字节至结尾</span><br><br><span class="hljs-keyword">if</span> payload == <span class="hljs-number">126</span>:<br>    extend_payload_len = hashstr[<span class="hljs-number">2</span>:<span class="hljs-number">4</span>]<br>    mask = hashstr[<span class="hljs-number">4</span>:<span class="hljs-number">8</span>]<br>    decoded = hashstr[<span class="hljs-number">8</span>:]<br><span class="hljs-comment"># 当位运算结果等于126时,则第3-4个字节为数据长度</span><br><span class="hljs-comment"># 第5-8字节为mask 解密所需字符串</span><br><span class="hljs-comment"># 则数据为第9字节至结尾</span><br><br><br><span class="hljs-keyword">if</span> payload &lt;= <span class="hljs-number">125</span>:<br>    extend_payload_len = <span class="hljs-keyword">None</span><br>    mask = hashstr[<span class="hljs-number">2</span>:<span class="hljs-number">6</span>]<br>    decoded = hashstr[<span class="hljs-number">6</span>:]<br><br><span class="hljs-comment"># 当位运算结果小于等于125时,则这个数字就是数据的长度</span><br><span class="hljs-comment"># 第3-6字节为mask 解密所需字符串</span><br><span class="hljs-comment"># 则数据为第7字节至结尾</span><br><br>str_byte = bytearray()<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(decoded)):<br>    byte = decoded[i] ^ mask[i % <span class="hljs-number">4</span>]<br>    str_byte.append(byte)<br><br>print(str_byte.decode(<span class="hljs-string">"utf8"</span>))<br></code></pre></div></td></tr></table></figure><p>加密</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> struct<br>msg_bytes = <span class="hljs-string">"hello"</span>.encode(<span class="hljs-string">"utf8"</span>)<br>token = <span class="hljs-string">b"\x81"</span><br>length = len(msg_bytes)<br><br><span class="hljs-keyword">if</span> length &lt; <span class="hljs-number">126</span>:<br>    token += struct.pack(<span class="hljs-string">"B"</span>, length)<br><span class="hljs-keyword">elif</span> length == <span class="hljs-number">126</span>:<br>    token += struct.pack(<span class="hljs-string">"!BH"</span>, <span class="hljs-number">126</span>, length)<br><span class="hljs-keyword">else</span>:<br>    token += struct.pack(<span class="hljs-string">"!BQ"</span>, <span class="hljs-number">127</span>, length)<br><br>msg = token + msg_bytes<br><br>print(msg)<br></code></pre></div></td></tr></table></figure><h2 id="完整代码示例"><a href="#完整代码示例" class="headerlink" title="完整代码示例"></a>完整代码示例</h2><p>不再赘述</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> struct<br><br>HOST = <span class="hljs-string">"127.0.0.1"</span><br>PORT = <span class="hljs-number">9999</span><br><br><span class="hljs-comment"># 服务器回应,响应头</span><br>response_tpl = <span class="hljs-string">"HTTP/1.1 101 Switching Protocols\r\n"</span> \<br>               <span class="hljs-string">"Upgrade:websocket\r\n"</span> \<br>               <span class="hljs-string">"Connection: Upgrade\r\n"</span> \<br>               <span class="hljs-string">"Sec-WebSocket-Accept: %s\r\n"</span> \<br>               <span class="hljs-string">"WebSocket-Location: ws://127.0.0.1:9999\r\n\r\n"</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_headers</span><span class="hljs-params">(data)</span>:</span><br>    <span class="hljs-comment"># 获取 sec-websocket-key</span><br>    header_dict = &#123;&#125;<br>    header_str = data.decode(<span class="hljs-string">"utf8"</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> header_str.split(<span class="hljs-string">"\r\n"</span>):<br><br>        <span class="hljs-keyword">if</span> str(i).startswith(<span class="hljs-string">"Sec-WebSocket-Key"</span>):<br>            header_dict[<span class="hljs-string">"Sec-WebSocket-Key"</span>] = i.split(<span class="hljs-string">":"</span>)[<span class="hljs-number">1</span>].strip()<br><br>    <span class="hljs-keyword">return</span> header_dict<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decrypt_client_info</span><span class="hljs-params">(msg)</span>:</span><br>    <span class="hljs-string">'''解密客户端发送的信息'''</span><br><br>    hashstr = msg<br>    <span class="hljs-comment"># 将第二个字节也就是 \x83 第9-16位 进行与127进行位运算</span><br>    payload = hashstr[<span class="hljs-number">1</span>] &amp; <span class="hljs-number">127</span><br>    print(payload)<br>    <span class="hljs-keyword">if</span> payload == <span class="hljs-number">127</span>:<br>        extend_payload_len = hashstr[<span class="hljs-number">2</span>:<span class="hljs-number">10</span>]<br>        mask = hashstr[<span class="hljs-number">10</span>:<span class="hljs-number">14</span>]<br>        decoded = hashstr[<span class="hljs-number">14</span>:]<br>    <span class="hljs-comment"># 当位运算结果等于127时,则第3-10个字节为数据长度</span><br>    <span class="hljs-comment"># 第11-14字节为mask 解密所需字符串</span><br>    <span class="hljs-comment"># 则数据为第15字节至结尾</span><br><br>    <span class="hljs-keyword">if</span> payload == <span class="hljs-number">126</span>:<br>        extend_payload_len = hashstr[<span class="hljs-number">2</span>:<span class="hljs-number">4</span>]<br>        mask = hashstr[<span class="hljs-number">4</span>:<span class="hljs-number">8</span>]<br>        decoded = hashstr[<span class="hljs-number">8</span>:]<br>    <span class="hljs-comment"># 当位运算结果等于126时,则第3-4个字节为数据长度</span><br>    <span class="hljs-comment"># 第5-8字节为mask 解密所需字符串</span><br>    <span class="hljs-comment"># 则数据为第9字节至结尾</span><br><br>    <span class="hljs-keyword">if</span> payload &lt;= <span class="hljs-number">125</span>:<br>        extend_payload_len = <span class="hljs-keyword">None</span><br>        mask = hashstr[<span class="hljs-number">2</span>:<span class="hljs-number">6</span>]<br>        decoded = hashstr[<span class="hljs-number">6</span>:]<br><br>    <span class="hljs-comment"># 当位运算结果小于等于125时,则这个数字就是数据的长度</span><br>    <span class="hljs-comment"># 第3-6字节为mask 解密所需字符串</span><br>    <span class="hljs-comment"># 则数据为第7字节至结尾</span><br><br>    str_byte = bytearray()<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(decoded)):<br>        byte = decoded[i] ^ mask[i % <span class="hljs-number">4</span>]<br>        str_byte.append(byte)<br><br>    <span class="hljs-keyword">return</span> str_byte.decode(<span class="hljs-string">"utf8"</span>)<br><br><br><span class="hljs-comment"># 发送消息</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">send_msg</span><span class="hljs-params">(msg, conn)</span>:</span><br>    <span class="hljs-comment"># 服务端回应，防止粘包现象 使用了 struct 模块</span><br>    msg_bytes = msg.encode(<span class="hljs-string">"utf8"</span>)<br>    token = <span class="hljs-string">b"\x81"</span><br>    length = len(msg_bytes)<br><br>    <span class="hljs-keyword">if</span> length &lt; <span class="hljs-number">126</span>:<br>        token += struct.pack(<span class="hljs-string">"B"</span>, length)<br>    <span class="hljs-keyword">elif</span> length == <span class="hljs-number">126</span>:<br>        token += struct.pack(<span class="hljs-string">"!BH"</span>, <span class="hljs-number">126</span>, length)<br>    <span class="hljs-keyword">else</span>:<br>        token += struct.pack(<span class="hljs-string">"!BQ"</span>, <span class="hljs-number">127</span>, length)<br>    msg = token + msg_bytes<br>    conn.send(msg)<br><br><br><span class="hljs-keyword">with</span> socket.socket(socket.AF_INET, socket.SOCK_STREAM) <span class="hljs-keyword">as</span> s:<br>    <span class="hljs-comment"># 端口重用</span><br>    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="hljs-number">1</span>)<br>    s.bind((HOST, PORT))<br>    s.listen()<br>    conn, addr = s.accept()<br>    <span class="hljs-comment"># 获取客户端的握手信息</span><br>    <span class="hljs-keyword">with</span> conn:<br>        <span class="hljs-comment"># print('Connected by', addr)</span><br>        data = conn.recv(<span class="hljs-number">1024</span>)<br>        headers = get_headers(data)  <span class="hljs-comment"># 提取请求头信息</span><br>        <span class="hljs-comment"># 对请求头中的 sec-websocket-key 进行加密</span><br>        <span class="hljs-comment"># 固定特殊字符串</span><br>        magic_string = <span class="hljs-string">'258EAFA5-E914-47DA-95CA-C5AB0DC85B11'</span><br>        value = headers[<span class="hljs-string">'Sec-WebSocket-Key'</span>] + magic_string<br>        print(value)<br>        ac = base64.b64encode(hashlib.sha1(value.encode(<span class="hljs-string">'utf-8'</span>)).digest())<br><br>        response_str = response_tpl % (ac.decode(<span class="hljs-string">'utf-8'</span>))<br>        <span class="hljs-comment"># 响应握手信息</span><br>        conn.send(response_str.encode(<span class="hljs-string">"utf8"</span>))<br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">True</span>:<br>            msg = conn.recv(<span class="hljs-number">8096</span>)<br>            print(decrypt_client_info(msg))<br>            send_msg(<span class="hljs-string">'你好啊发送发送发送'</span>, conn)<br></code></pre></div></td></tr></table></figure><p>HTML </p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head lang="en"&gt;<br>    &lt;meta charset="UTF-8"&gt;<br>    &lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div&gt;<br>    &lt;input type="text" id="txt"/&gt;<br>    &lt;input type="button" id="btn" value="发送消息" onclick="sendMsg();"/&gt;<br>    &lt;input type="button" id="close" value="关闭连接" onclick="closeConn();"/&gt;<br>&lt;/div&gt;<br>&lt;div id="content"&gt;&lt;/div&gt;<br><br>&lt;script type="text/javascript"&gt;<br>    var socket = new WebSocket("ws://127.0.0.1:9999");<br><br>    socket.onopen = function () &#123;<br>        /* 与服务器端连接成功后，自动执行 */<br><br>        var newTag = document.createElement('div');<br>        newTag.innerHTML = "【连接成功】";<br>        document.getElementById('content').appendChild(newTag);<br>    &#125;;<br><br>    socket.onmessage = function (event) &#123;<br>        /* 服务器端向客户端发送数据时，自动执行 */<br>        var response = event.data;<br>        var newTag = document.createElement('div');<br>        newTag.innerHTML = response;<br>        document.getElementById('content').appendChild(newTag);<br>    &#125;;<br><br>    socket.onclose = function (event) &#123;<br>        /* 服务器端主动断开连接时，自动执行 */<br>        var newTag = document.createElement('div');<br>        newTag.innerHTML = "【关闭连接】";<br>        document.getElementById('content').appendChild(newTag);<br>    &#125;;<br>    // socket.addEventListener('message', function (event) &#123;<br>    //     console.log('Message from server ', event.data);<br>    //<br>    // &#125;);<br><br><br>    function sendMsg() &#123;<br>        var txt = document.getElementById('txt');<br>        socket.send(txt.value);<br>        txt.value = "";<br>    &#125;<br><br>    function closeConn() &#123;<br>        socket.close();<br>        var newTag = document.createElement('div');<br>        newTag.innerHTML = "【关闭连接】";<br>        document.getElementById('content').appendChild(newTag);<br>    &#125;<br><br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><h2 id="gevent-实现-websocker-demo-版本"><a href="#gevent-实现-websocker-demo-版本" class="headerlink" title="gevent 实现 websocker demo 版本"></a>gevent 实现 websocker demo 版本</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> gevent <span class="hljs-keyword">import</span> monkey<br><br>monkey.patch_all()<br>BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))<br>sys.path.append(BASE_DIR)<br><br><span class="hljs-keyword">from</span> pymongo <span class="hljs-keyword">import</span> MongoClient<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> render_template, Flask<br><span class="hljs-keyword">from</span> werkzeug.debug <span class="hljs-keyword">import</span> DebuggedApplication<br><br><span class="hljs-keyword">from</span> geventwebsocket <span class="hljs-keyword">import</span> WebSocketServer, WebSocketApplication, Resource<br><br><span class="hljs-keyword">from</span> mechat.blueprints.ai_baidu <span class="hljs-keyword">import</span> Baidu_AI<br><br>baidu_ai = Baidu_AI()<br><br>mgclient = MongoClient(<span class="hljs-string">"127.0.0.1"</span>, <span class="hljs-number">27017</span>)<br>MONGO_DB = mgclient[<span class="hljs-string">"chat_mess_room"</span>]<br><br>flask_app = Flask(__name__)<br>flask_app.debug = <span class="hljs-keyword">True</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChatApplication</span><span class="hljs-params">(WebSocketApplication)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">on_open</span><span class="hljs-params">(self)</span>:</span><br>        print(<span class="hljs-string">'connect'</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">on_message</span><span class="hljs-params">(self, message)</span>:</span><br>        <span class="hljs-keyword">if</span> message <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>:<br>            <span class="hljs-keyword">return</span><br><br>        message = json.loads(message)<br>        <span class="hljs-comment"># a = &#123;'msg_type': 'message', 'nickname': 'unknown', 'message': '你啊'&#125;</span><br><br>        <span class="hljs-keyword">if</span> message[<span class="hljs-string">'msg_type'</span>] == <span class="hljs-string">'message'</span>:<br>            im = message[<span class="hljs-string">'message'</span>]<br>            tuningre = baidu_ai.tuning(im)<br>            cur_time = message.get(<span class="hljs-string">'cur_time'</span>)<br>            the_robot = &#123;<span class="hljs-string">'msg_type'</span>: <span class="hljs-string">'message'</span>, <span class="hljs-string">'nickname'</span>: <span class="hljs-string">'图灵机器人的爸爸'</span>, <span class="hljs-string">'message'</span>: tuningre, <span class="hljs-string">'the_robot'</span>: <span class="hljs-string">"robot"</span>,<br>                         <span class="hljs-string">'cur_time'</span>: cur_time&#125;<br><br>            self.broadcast(message)<br>            self.broadcast(the_robot)<br>            MONGO_DB.groups.insert_many([message, the_robot])<br><br><br><br>        <span class="hljs-keyword">elif</span> message[<span class="hljs-string">'msg_type'</span>] == <span class="hljs-string">'update_clients'</span>:<br>            self.send_client_list(message)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">send_client_list</span><span class="hljs-params">(self, message)</span>:</span><br>        current_client = self.ws.handler.active_client<br>        current_client.nickname = message[<span class="hljs-string">'nickname'</span>]<br><br>        self.ws.send(json.dumps(&#123;<br>            <span class="hljs-string">'msg_type'</span>: <span class="hljs-string">'update_clients'</span>,<br>            <span class="hljs-string">'clients'</span>: [<br>                getattr(client, <span class="hljs-string">'nickname'</span>, <span class="hljs-string">'anonymous'</span>)<br>                <span class="hljs-keyword">for</span> client <span class="hljs-keyword">in</span> self.ws.handler.server.clients.values()<br>            ]<br>        &#125;))<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">broadcast</span><span class="hljs-params">(self, message)</span>:</span><br>        <span class="hljs-keyword">for</span> client <span class="hljs-keyword">in</span> self.ws.handler.server.clients.values():<br>            <span class="hljs-comment"># client.ws.send(json.dumps(&#123;</span><br>            <span class="hljs-comment">#     'msg_type': 'message',</span><br>            <span class="hljs-comment">#     'nickname': message['nickname'],</span><br>            <span class="hljs-comment">#     'message': message['message']</span><br>            <span class="hljs-comment"># &#125;))</span><br>            client.ws.send(json.dumps(message))<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">on_close</span><span class="hljs-params">(self, reason)</span>:</span><br>        print(<span class="hljs-string">'Connectiion closed'</span>)<br><br><br><span class="hljs-meta">@flask_app.route('/')</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">home</span><span class="hljs-params">()</span>:</span><br>    te = [&#123;<span class="hljs-string">"nickname"</span>: <span class="hljs-string">"baozi"</span>, <span class="hljs-string">"body"</span>: <span class="hljs-string">'你的名字叫啥'</span>&#125;,<br>          &#123;<span class="hljs-string">"nickname"</span>: <span class="hljs-string">"baozi"</span>, <span class="hljs-string">"body"</span>: <span class="hljs-string">'做个自我介绍啊'</span>&#125;,<br>          &#123;<span class="hljs-string">"nickname"</span>: <span class="hljs-string">"baozi"</span>, <span class="hljs-string">"body"</span>: <span class="hljs-string">'发图啊'</span>&#125;]<br><br>    re = list(MONGO_DB.groups.find(&#123;&#125;, &#123;<span class="hljs-string">"_id"</span>: <span class="hljs-number">0</span>&#125;))<br><br>    <span class="hljs-comment"># return render_template("home2.html")</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">"home2.html"</span>, messages=re)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    WebSocketServer((<span class="hljs-string">'192.168.1.2'</span>, <span class="hljs-number">9999</span>), Resource([<br>        (<span class="hljs-string">'^/chat'</span>, ChatApplication),<br>        (<span class="hljs-string">'^/.*'</span>, DebuggedApplication(flask_app))<br>    ]), debug=<span class="hljs-keyword">False</span>).serve_forever()<br></code></pre></div></td></tr></table></figure><p>V2</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> print_function<br><br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-keyword">from</span> gevent <span class="hljs-keyword">import</span> monkey<br><br>monkey.patch_all()<br><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template<br><span class="hljs-keyword">from</span> werkzeug.debug <span class="hljs-keyword">import</span> DebuggedApplication<br><br><span class="hljs-keyword">from</span> geventwebsocket <span class="hljs-keyword">import</span> WebSocketServer, WebSocketApplication, Resource<br><br>websocket = Flask(__name__)<br>websocket.debug = <span class="hljs-keyword">True</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChatApplication</span><span class="hljs-params">(WebSocketApplication)</span>:</span><br>    <span class="hljs-string">''' webSocket 消息发送'''</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">on_open</span><span class="hljs-params">(self)</span>:</span><br>        print(<span class="hljs-string">"Some client connected!"</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">on_message</span><span class="hljs-params">(self, message)</span>:</span><br>        <span class="hljs-keyword">if</span> message <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>:<br>            <span class="hljs-keyword">return</span><br><br>        message = json.loads(message)<br><br>        <span class="hljs-keyword">if</span> message.get(<span class="hljs-string">'msg_type'</span>) == <span class="hljs-string">'send_'</span>:<br>            print(message)<br>            self.share_music_friend(message)<br><br>        <span class="hljs-keyword">elif</span> message.get(<span class="hljs-string">'msg_type'</span>) == <span class="hljs-string">'accept_'</span>:<br>            self.accept_client_list(message)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">share_music_friend</span><span class="hljs-params">(self, message)</span>:</span><br>        current_client = self.ws.handler.active_client<br>        <span class="hljs-comment"># current_client.from_id = message.get('toy_id')</span><br>        current_client.from_id = message.get(<span class="hljs-string">'toy_id'</span>, message.get(<span class="hljs-string">"from_user"</span>))<br><br>        <span class="hljs-keyword">for</span> client <span class="hljs-keyword">in</span> self.ws.handler.server.clients.values():<br>            <span class="hljs-keyword">if</span> getattr(client, <span class="hljs-string">'from_id'</span>, <span class="hljs-string">'anonymous'</span>) == message[<span class="hljs-string">'to_user'</span>]:<br>                client.ws.send(json.dumps(message))<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">accept_client_list</span><span class="hljs-params">(self, message)</span>:</span><br>        print(message)<br>        current_client = self.ws.handler.active_client<br>        current_client.from_id = message.get(<span class="hljs-string">'toy_id'</span>, message.get(<span class="hljs-string">"from_user"</span>))<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">on_close</span><span class="hljs-params">(self, reason)</span>:</span><br>        print(<span class="hljs-string">"Connection closed!"</span>)<br><br><br><span class="hljs-meta">@websocket.route('/toy')</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">toy</span><span class="hljs-params">()</span>:</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">'toy.html'</span>)<br><br><br>WebSocketServer(<br>    (<span class="hljs-string">"192.168.1.2"</span>, <span class="hljs-number">8001</span>),<br><br>    Resource([<br>        (<span class="hljs-string">'^/sendone'</span>, ChatApplication),<br>        (<span class="hljs-string">'^/.*'</span>, DebuggedApplication(websocket))<br>    ]),<br><br>    debug=<span class="hljs-keyword">False</span><br>).serve_forever()<br></code></pre></div></td></tr></table></figure><p><a href="https://zh.wikipedia.org/wiki/WebSocket" target="_blank" rel="noopener">WebSocket</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers" target="_blank" rel="noopener">Writing WebSocket servers</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket" target="_blank" rel="noopener"><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/WebSocket</a></a></p>]]></content>
    
    
    <categories>
      
      <category>aiolib</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅显理解 Pyhton 中闭包</title>
    <link href="/2018/12/01/%E6%B5%85%E6%98%BE%E7%90%86%E8%A7%A3%20Pyhton%20%E4%B8%AD%E9%97%AD%E5%8C%85/"/>
    <url>/2018/12/01/%E6%B5%85%E6%98%BE%E7%90%86%E8%A7%A3%20Pyhton%20%E4%B8%AD%E9%97%AD%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="浅显理解-Pyhton-中闭包"><a href="#浅显理解-Pyhton-中闭包" class="headerlink" title="浅显理解 Pyhton 中闭包"></a>浅显理解 Pyhton 中闭包</h1><p>什么是闭包? 闭包（ Closure ）是词法闭包（ Lexical Closure ）的简称。 闭包就是内层函数, 对外层函数(非全局)的变量的引用. 叫闭包</p><blockquote><ul><li>可以保护我的变量</li><li>闭包的作用就是让⼀一个变量能够常驻内存. 供后面的程序使用.</li></ul></blockquote><ul><li><h2 id="简单示例："><a href="#简单示例：" class="headerlink" title="简单示例："></a>简单示例：</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#我们可以使⽤用 __closure__ 来检测函数是否是闭包. 使⽤用函数名 .__closure__ 返回 cell 就是闭包. 返回None就不是闭包</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func1</span><span class="hljs-params">()</span>:</span><br>name = <span class="hljs-string">"馒头"</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func2</span><span class="hljs-params">()</span>:</span><br>print(name) <span class="hljs-comment"># 闭包</span><br>func2()<br>print(func2.__closure__) <span class="hljs-comment"># (&lt;cell at 0x10c2e20a8: str object at0x10c3fc650&gt;,)</span><br>func1()<br><br><span class="hljs-comment">#调用内部函数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">outer</span><span class="hljs-params">()</span>:</span><br>name = <span class="hljs-string">"土豆"</span><br><span class="hljs-comment"># 内部函数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inner</span><span class="hljs-params">()</span>:</span><br>print(name)<br><span class="hljs-keyword">return</span> inner<br>fn = outer() <span class="hljs-comment"># 访问外部函数, 获取到内部函数的函数地址</span><br>fn() <span class="hljs-comment"># 访问内部函数</span><br><br><br><span class="hljs-comment">#多层嵌套呢</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func1</span><span class="hljs-params">()</span>:</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func2</span><span class="hljs-params">()</span>:</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func3</span><span class="hljs-params">()</span>:</span><br>print(<span class="hljs-string">"嘿嘿"</span>)<br><span class="hljs-keyword">return</span> func3<br><span class="hljs-keyword">return</span> func2<br>func1()()()<br></code></pre></div></td></tr></table></figure></li><li><h4 id="应用-爬虫"><a href="#应用-爬虫" class="headerlink" title="应用 爬虫"></a>应用 爬虫</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">but</span><span class="hljs-params">()</span>:</span><br>content = urlopen(<span class="hljs-string">"http://www.mi.cn/index.html"</span>).read()<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_content</span><span class="hljs-params">()</span>:</span><br><span class="hljs-keyword">return</span> content<br><span class="hljs-keyword">return</span> get_content<br>fn = but() <span class="hljs-comment"># 这个时候就开始加载校花100的内容</span><br><span class="hljs-comment"># 后⾯面需要⽤用到这⾥里里⾯面的内容就不不需要在执⾏行行⾮非常耗时的⽹网络连接操作了了</span><br>content = fn() <span class="hljs-comment"># 获取内容</span><br>print(content)<br>content2 = fn() <span class="hljs-comment"># 重新获取内容</span><br>print(content2)<br></code></pre></div></td></tr></table></figure></li><li><h4 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># how to define</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrapper</span><span class="hljs-params">(func1)</span>:</span>  <span class="hljs-comment"># 接受一个callable对象</span><br>    <span class="hljs-keyword">return</span> func2  <span class="hljs-comment"># 返回一个对象，一般为函数</span><br>    <br><span class="hljs-comment"># how to use</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">target_func</span><span class="hljs-params">(args)</span>:</span> <span class="hljs-comment"># 目标函数</span><br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># 调用方式一，直接包裹</span><br>result = wrapper(target_func)(args)<br><br><span class="hljs-comment"># 调用方式二，使用@语法，等同于方式一</span><br><span class="hljs-meta">@wrapper</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">target_func</span><span class="hljs-params">(args)</span>:</span><br>    <span class="hljs-keyword">pass</span><br><br>result = target_func()<br></code></pre></div></td></tr></table></figure></li><li><h2 id="closure-属性和-cell-对象"><a href="#closure-属性和-cell-对象" class="headerlink" title="__closure__ 属性和  cell  对象"></a><code>__closure__</code> 属性和  cell  对象</h2><p>其实闭包函数相对与普通函数会多出一个 <code>__closure__</code> 的属性，而 <code>__closure__</code> 属性定义了 cell 对象的元祖 ，元祖中 保存了这个闭包中所有的 外部变量 。</p><p>包含 <code>__closure__</code>  属性 就是 <strong>闭包函数</strong></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br>def out(arg1, arg2):<br>    def inner():<br>        print(arg1,arg2)<br>    return inner<br>ine = out('man','info')<br>print(ine.__closure__) # 返回的是 cell 对象的元祖，其中元组中的每一个 cell 对象用来保存作用域中变量的值。<br>print(ine.__closure__[0].cell_contents)<br>print(type(ine.__closure__),type(ine.__closure__[0])) # 元祖， cell 对象组成的元祖 <br>print(type(ine.__closure__),type(ine.__closure__[1])) # 第二个外部变量<br>print(ine)<br><br><br># 执行结果<br>(&lt;cell at 0x103596888: str object at 0x103561378&gt;, &lt;cell at 0x103596828: str object at 0x1034fc3b0&gt;)<br>man  # 第一个外部变量<br>info  # 第二个外部变量<br>&lt;class 'tuple'&gt; &lt;class 'cell'&gt;<br>&lt;function out.&lt;locals&gt;.inner at 0x10356cd08&gt;<br></code></pre></div></td></tr></table></figure><p>最后：</p><p>我们可以使⽤用<code>__closure__</code>来检测函数是否是闭包. 使⽤用函数名 .<strong>closure</strong> 返回 cell 就是闭包. 返回None就不是闭包</p></li></ul><ul><li>链接<ul><li><a href="http://www.ibm.com/developerworks/cn/linux/l-cn-closure/" target="_blank" rel="noopener">闭包的概念、形式与应用</a></li><li><a href="https://coolshell.cn/articles/6731.html" target="_blank" rel="noopener">理解JAVASCRIPT的闭包</a></li><li><a href="https://www.the5fire.com/closure-in-python.html" target="_blank" rel="noopener">Python中的闭包使用</a> </li><li><a href="https://betacat.online/posts/2016-10-23/python-closure/" target="_blank" rel="noopener">cosure</a></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python反射类型判断</title>
    <link href="/2018/11/24/%E5%8F%8D%E5%B0%84isinstance/"/>
    <url>/2018/11/24/%E5%8F%8D%E5%B0%84isinstance/</url>
    
    <content type="html"><![CDATA[<h2 id="Python中类型判断"><a href="#Python中类型判断" class="headerlink" title="Python中类型判断"></a>Python中类型判断</h2><ul><li><code>type</code></li><li><code>from types import MethodType, FunctionType</code></li></ul><h3 id="types-python内置模块"><a href="#types-python内置模块" class="headerlink" title="types python内置模块"></a><code>types</code> python内置模块</h3><p>Python3 中类型判断</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">types.BuiltinFunctionType               <br>types.BuiltinMethodType         <span class="hljs-comment"># 内置函数的类型，如len()或sys.exit()，以及内置类的方法。(这里，“内置”的意思是“用C写”。)</span><br>types.CodeType                  <span class="hljs-comment"># 通过compile()返回的代码对象类型。</span><br>types.DynamicClassAttribute<br>types.FrameType                 <span class="hljs-comment"># 框架对象的类型，如在tb中发现的。tb_frame如果tb是一个traceback对象。</span><br>types.FunctionType<br>types.GeneratorType             <span class="hljs-comment"># 由生成器函数创建的generator - iterator对象类型。</span><br>types.GetSetDescriptorType      <span class="hljs-comment"># 用PyGetSetDef(如FrameType)在扩展模块中定义的对象的类型。</span><br>types.LambdaType                <span class="hljs-comment"># 由lambda表达式创建的用户定义函数和函数的类型。</span><br>types.MappingProxyType<br>types.MemberDescriptorType<br>types.MethodType                <span class="hljs-comment"># 用户定义类实例的方法类型。</span><br>types.ModuleType<br>types.SimpleNamespace<br>types.TracebackType             <span class="hljs-comment"># traceback对象的类型，如sys.exc_info()</span><br>types.new_class<br>types.prepare_class<br></code></pre></div></td></tr></table></figure><p><a href="https://docs.python.org/3/library/types.html#module-types" target="_blank" rel="noopener">Dynamic type creation and names for built-in types</a></p><p>Typical use of these names is for <a href="https://docs.python.org/3.7/library/functions.html#isinstance" target="_blank" rel="noopener"><code>isinstance()</code></a> or <a href="https://docs.python.org/3.7/library/functions.html#issubclass" target="_blank" rel="noopener"><code>issubclass()</code></a> checks.</p><h3 id="isinstance"><a href="#isinstance" class="headerlink" title="isinstance"></a><code>isinstance</code></h3><p>这个真的鲜为人知, 我们可以用 <code>isinstance(x, (float, int))</code>  来判断 <code>x</code> 是不是数:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>isinstance(<span class="hljs-number">1</span>, (float, int))<br><span class="hljs-keyword">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>isinstance(<span class="hljs-number">1.3</span>, (float, int))<br><span class="hljs-keyword">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>isinstance(<span class="hljs-string">"1.3"</span>, (float, int))<br><span class="hljs-keyword">False</span><br></code></pre></div></td></tr></table></figure><p>那么对于第三个测试，你把 <code>str</code> 加入元组就可以看到这是怎么回事了:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>isinstance(<span class="hljs-string">"1.3"</span>, (float, int, str))<br><span class="hljs-keyword">True</span><br></code></pre></div></td></tr></table></figure><p>也就是那个<strong>元组</strong>里面是 <strong>或</strong> 的关系，只要是其中一个的实例就返回 <code>True</code></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">class A:<br>    def __init__(self, name):<br>        self.name = name<br><br><br>class B(A):<br>    def __init__(self):<br>        print("class B")<br><br><br>instance_A = A('baozi')<br>instance_B = B()<br><br>print(isinstance(instance_B, A))<br>print(instance_A.name)<br>print(type(instance_A) is A)<br>print(type(instance_B) is A)<br><br># 执行结果<br>class B<br>True<br>baozi<br>True<br>False<br></code></pre></div></td></tr></table></figure><p><code>isinstance(b, A)</code>   # 检测的是对象是不是某一个类 及父类的 对象 </p><p><code>(type(b) is B)</code>      # 检测的是对象是不是某一个类的实例</p><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>使用字符串的方式，操作对象的属性（对象属性，类的动态属性（方法））</p><p>某个命名空间中的某个 <strong>‘变量名’</strong> ， 获取这个<strong>变量名对应的值</strong></p><p>getattr(<strong>命名空</strong>间，’key’)  == 命名空间.key<br>所有的a.b 都可以被反射成 getattr(a,’b’)</p><ul><li><p><code>hasattr(obj, str)</code> 判断对象中是否包含<code>xxxx(str)</code>. **</p></li><li><p><code>getattr(obj, str)</code> 从对象中获取<code>xxx(str)</code> **</p><p><code>get</code>表⽰示找, <code>attr</code>表⽰示属性(功能). </p></li><li><p><code>setattr(obj, str, value)</code>  把对象中的<code>str</code>设置成<code>value</code>o. # obj.str = value</p></li><li><p><code>delattr(obj, str)</code> 从对象中删除<code>xxxx(str)</code> # del obj.str</p></li></ul><p>类\对象\模块 实际上都是有自己的命名空间 ,从这个命名空间中获取某个值或者函数…名字<br>如果这个名字字符串数据类型<br>值 = <code>getatt</code>r(命名空间，’字符串类型名字’)<br>如果<code>getattr</code>的值是一个属性或者普通变量，那么直接得到结果<br>如果<code>getattr</code>的值是函数或者方法 获取的是<strong>内存地址</strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> types <span class="hljs-keyword">import</span> MethodType, FunctionType<br><span class="hljs-keyword">import</span> os, sys<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">iscall</span><span class="hljs-params">(file_di)</span>:</span><br>    <span class="hljs-comment"># file_di = file_mdoe.__dict__</span><br>    attr = input(<span class="hljs-string">'arg&gt;&gt;'</span>)<br>    <span class="hljs-keyword">if</span> hasattr(file_di, attr):<br>        type_valeus = getattr(file_di, attr)<br>        <span class="hljs-keyword">if</span> isinstance(type_valeus, (FunctionType)):<br>            <span class="hljs-keyword">return</span> type_valeus()<br><br>        <span class="hljs-comment"># isinstance 元祖可以使用多个参数</span><br>        <span class="hljs-keyword">elif</span> isinstance(type_valeus, (str, int, list, dict)):<br>            <span class="hljs-keyword">return</span> type_valeus<br><br>        <span class="hljs-comment"># 变量是不可调用 "__call__"</span><br>        <span class="hljs-comment"># elif not hasattr(type_valeus,'__call__') :</span><br><br>        <span class="hljs-comment"># print(type_valeus)</span><br><br><br><span class="hljs-comment"># print(iscall(te))</span><br><span class="hljs-comment"># __dict__</span><br></code></pre></div></td></tr></table></figure><h2 id="sys-modules"><a href="#sys-modules" class="headerlink" title="sys modules"></a><code>sys</code> <code>modules</code></h2><h4 id="反射本文件中的名字-反射全局变量的值（"><a href="#反射本文件中的名字-反射全局变量的值（" class="headerlink" title="反射本文件中的名字 反射全局变量的值（"></a>反射本文件中的名字 反射全局变量的值（</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 全局的</span><br><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> modules<br><br>a = <span class="hljs-number">1</span><br>b = <span class="hljs-number">2</span><br>lst = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Manager</span>:</span> <span class="hljs-keyword">pass</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>:</span> <span class="hljs-keyword">pass</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span>:</span> <span class="hljs-keyword">pass</span><br><br>getattr(modules[__name__], <span class="hljs-string">'Student'</span>)<br>identify = input(<span class="hljs-string">'&gt;&gt;&gt;'</span>).strip()<br>类 = getattr(modules[__name__], identify)<br>print(类)<br>对象 = 类()<br>print(对象)<br><br><span class="hljs-comment"># 这玩意是个字典，跟操作字典似得。</span><br>print(modules[__name__])<br><br><span class="hljs-comment"># getattr(modules[__name__],'全局变量名')</span><br><span class="hljs-comment"># 从当前文件中寻找全局变量对应的值/地址</span><br><br><br><span class="hljs-comment"># 执行结果</span><br><br>&lt;module <span class="hljs-string">'__main__'</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'/Users/toorl/PycharmProjects/A17task/day026/05反射.py'</span>&gt;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python类中装饰器classmethod,staticmethod,property,</title>
    <link href="/2018/11/20/%E7%B1%BB%E4%B8%AD%E7%9A%84%E4%B8%89%E4%B8%AA%E8%A3%85%E9%A5%B0%E5%99%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2018/11/20/%E7%B1%BB%E4%B8%AD%E7%9A%84%E4%B8%89%E4%B8%AA%E8%A3%85%E9%A5%B0%E5%99%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="classmethod"><a href="#classmethod" class="headerlink" title="@classmethod"></a><code>@classmethod</code></h2><p> 有的时候在类中会有一种情况，就是这个方法并不需要使用<strong>每一个对象属性</strong><br> 因此 这个方法中的<code>self</code>参数一个完全<strong>无用</strong>的参数，使用<code>classmethod</code></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">class A:<br>    __count = 0  # 隐藏类count属性<br><br>    def __init__(self, name):<br>        self.name = name<br>        self.__add_count()  # 每一次实例化的时候掉<br>        # 用私有方法来对__count 进行累加<br><br>    @classmethod<br>    def __add_count(cls):  # 定义一个私有方法<br>        print(cls, A)<br>        A.__count += 1  # 让这个方法只能在类的内部被使用<br><br>    @classmethod<br>    def show_count(cls):  # 被classmethod 装饰去的方法，<br>        print(cls.__count)<br>        return A.__count  # 让用户可以从外部查看__count的值<br><br>    def show_count_self(self):  # 定义一个普通方法<br>        # print(self.__count)<br>        print(self)<br>        # print('_____')<br>        # print(self.show_count(),'fogogo')<br>        # return A.__count  # 让用户可以从外部查看__count的值<br><br><br># show_count 是一个查看类中属性的方法，这样的方法和某一个对象并没有直接联系        <br>        <br><br><br>obj = A('baozi')<br>print(A._A__add_count) # <br># 执行结果<br>&lt;class '__main__.A'&gt; &lt;class '__main__.A'&gt;<br>&lt;bound method A.__add_count of &lt;class '__main__.A'&gt;&gt;<br></code></pre></div></td></tr></table></figure><p>本质上 : </p><p><code>@classmethod</code></p><p>一个方法不用<strong>对象属性</strong>但是使用<strong>静态属性</strong> – 类方法<code>@classmethod</code><br>某一个方法被创造出来,就是为了进行对<strong>静态变量</strong>进行操作</p><p><code>@staticmehtod</code></p><p>根本不涉及到对象,所以这个方法就应该被定义成 <strong>类方法</strong>(被<code>@classmethod</code>装饰)<br>调用这个类方法,可以使用<strong>对象调用,</strong>也可以使用<strong>类调用</strong><br>但是这个方法的默认参数永远是当前类的命名空间,而不是对象的</p><h2 id="staticmethod"><a href="#staticmethod" class="headerlink" title="@staticmethod"></a><code>@staticmethod</code></h2><p>如果一个类中的<strong>方法</strong>不用 <strong>对象属性</strong> 也不用 <strong>静态属性</strong> – <strong>静态方法</strong><code>@staticmethod</code></p><p>那实际上这个方法就是一个普通的函数</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br>class User(object):<br><br>    @staticmethod<br>    def login(arg1, arg2):#是User类中的名字函数的名字login就是一个类中的静态方法,本质上就是一个函数<br>        return (arg1 + arg2)<br><br><br>    def show(self):<br>        print('----&gt;show')<br>        print('---self--',self.login(1, 3))<br>        print('class--',User.login(123, 31))<br><br><br>print(User.login(1,2)) ## 不需要实例化，当函数使用<br>print(User().show())<br><br># 执行结果<br><br>3<br>----&gt;show<br>---self-- 4<br>class-- 154<br></code></pre></div></td></tr></table></figure><p>一个不需要用到对象命名空间中的<strong>变量</strong>的<strong>方法</strong>,就不是一个对象方法,就应该是一个普通的函数</p><h3 id="方法的查找的顺序："><a href="#方法的查找的顺序：" class="headerlink" title="方法的查找的顺序："></a>方法的查找的顺序：</h3><ul><li><p><strong>类</strong>是直接在自己的空间找到类 类这个方法</p></li><li><p><strong>对象</strong>先在自己的空间找，找不到，就到<strong>类的空间</strong>找</p></li></ul><h2 id="classmethod-staticmethod-使用场景说明："><a href="#classmethod-staticmethod-使用场景说明：" class="headerlink" title="classmethod staticmethod 使用场景说明："></a><code>classmethod</code> <code>staticmethod</code> 使用场景说明：</h2><h6 id="用哪一个命名空间的名字，就定义的不同的方法"><a href="#用哪一个命名空间的名字，就定义的不同的方法" class="headerlink" title="用哪一个命名空间的名字，就定义的不同的方法"></a>用哪一个命名空间的名字，就定义的不同的方法</h6><ol><li><p><code>self</code> 只要用<code>self</code>就是<strong>普通方法</strong>，只能用<strong>对象调</strong></p></li><li><p><code>Classmethod</code> 只要<strong>cls</strong> 就是<strong>类方</strong>法，<strong>可以用类</strong>，可以用<strong>对象</strong></p></li><li><p><code>Staticmethod</code> 啥用不用 就是<strong>静态方法</strong> ,可以用<strong>类</strong>，可以用<strong>对象</strong></p></li></ol><table><thead><tr><th></th><th style="text-align:left"><strong>普通的方法</strong></th><th><strong>类方法</strong></th><th><strong>静态方法</strong></th></tr></thead><tbody><tr><td>默认参数</td><td style="text-align:left"><code>self</code></td><td><strong>cls</strong></td><td>无</td></tr><tr><td>操作变量</td><td style="text-align:left">操作对象属性</td><td>操作静态属性</td><td>既不操作对象属性,也不操作类的属性</td></tr><tr><td>所属的命名空间</td><td style="text-align:left">类</td><td>类</td><td>类</td></tr><tr><td>调用方式</td><td style="text-align:left">对象</td><td>类/对象</td><td>类/对象</td></tr><tr><td>对应的装饰器</td><td style="text-align:left">无</td><td>@classmethod</td><td><strong>@staticmethod</strong></td></tr></tbody></table><h2 id="property"><a href="#property" class="headerlink" title="@property"></a><code>@property</code></h2><p>把一个方法伪装成属性，</p><p>下面例子中计算圆面积的公式</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cirecle</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, r)</span>:</span><br>        self.r = r<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">area</span><span class="hljs-params">(self)</span>:</span>  <span class="hljs-comment"># 被property 装饰器 装饰的方法不能传递 除self以外参数</span><br><br>        <span class="hljs-keyword">return</span> pi * self.r ** <span class="hljs-number">2</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">perimeter</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">return</span> self.r * pi * <span class="hljs-number">2</span><br><br><br>c1 = Cirecle(<span class="hljs-number">5</span>)<br><br>print(c1.area)<br><span class="hljs-comment"># 打印执行结果</span><br><br><span class="hljs-number">78.53981633974483</span><br></code></pre></div></td></tr></table></figure><p>某一个属性需要被私有，但是有需要可以被外部查看， 这种情况，把这个属性通过方法,`property 伪装成属性</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, name)</span>:</span><br>        self.__name = name  <span class="hljs-comment"># 不让外面随便修改</span><br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_name</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">return</span> self.__name<br><br><br>ari = Person(<span class="hljs-string">'arimiage'</span>)<br><br>print(ari.get_name)<br><span class="hljs-comment"># 执行结果</span><br><br>arimiage<br></code></pre></div></td></tr></table></figure><p><strong>Property</strong> 修改属性值</p><ul><li><a href="mailto:`@funcname.setter" target="_blank" rel="noopener">`@funcname.setter</a>`</li><li><a href="mailto:`@funcname.deleter" target="_blank" rel="noopener">`@funcname.deleter</a>`</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, name)</span>:</span><br>        self.__name = name<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">name</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">return</span> self.__name<br><br><span class="hljs-meta">    @name.setter  # 只能传一个参数。之前必须有一个同名的方法被property装饰过</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">name</span><span class="hljs-params">(self, new_name)</span>:</span><br>        <span class="hljs-keyword">if</span> isinstance(new_name, str):<br>            <span class="hljs-comment"># if type(new_name) is str:</span><br>            self.__name = new_name<br>            <span class="hljs-comment">#setattr装饰的函数名叫什么</span><br>            <span class="hljs-comment">#那么这个函数中绝对不可以对这个，函数名同名属性进行修改( 函数名)</span><br><br><span class="hljs-meta">    @name.deleter</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">name</span><span class="hljs-params">(self)</span>:</span><br>        print(<span class="hljs-string">'gogoog'</span>)<br>        <span class="hljs-keyword">del</span> self.__name <span class="hljs-comment">#这里才执行删除属性操作</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_name</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">return</span> self.__name<br><br>    <span class="hljs-comment"># def set_name(self,new_name):</span><br>    <span class="hljs-comment"># if type(new_name) is str:</span><br>    <span class="hljs-comment"># if isinstance(new_name,str):</span><br>    <span class="hljs-comment">#     self.__name == new_name</span><br><br>    <br><br>ari = Person(<span class="hljs-string">'arimiage'</span>)<br>&#123;<span class="hljs-string">'_Person__name'</span>: <span class="hljs-string">'arimiage'</span>&#125;<br><span class="hljs-comment"># print(Person.__dict__)</span><br><br>print(ari.get_name)<br><br>ari.name = <span class="hljs-string">'fgo'</span><br>&#123;<span class="hljs-string">'_Person__name'</span>: <span class="hljs-string">'fgo'</span>&#125; <span class="hljs-comment">#对象空间</span><br>print(Person.__dict__)<br>print(ari.__dict__)<br>print(ari.name)<br><br><span class="hljs-keyword">del</span> ari.name <span class="hljs-comment"># 只是相当于调用被deleter装饰的方法,并不相当于删除name属性</span><br>&#123;&#125; 对象空间为空<br><br><span class="hljs-comment"># print(ari.__dict__)  # 报错</span><br></code></pre></div></td></tr></table></figure><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 类印象</title>
    <link href="/2018/11/18/Python%20%E7%B1%BB%E5%8D%B0%E8%B1%A1/"/>
    <url>/2018/11/18/Python%20%E7%B1%BB%E5%8D%B0%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是类"><a href="#什么是类" class="headerlink" title="什么是类"></a>什么是类</h2><p>具有相同属性和方法的一类事物（框架 模子）类(Class): 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法，对象是类的实例</p><h2 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h2><p>对象中类中一个具体的例子（具有具体的属性属性和具体的方法）<br>​    对象就是类的实例化 类的实例</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">调用模子得到的结果 : 对象(具体的)<br>根据模子的规范,填上具体的值就是一个对象了<br><br>python中一切皆对象<br>什么是类什么是对象<br>整数是类 : <span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>是对象<br>列表是类 : [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br></code></pre></div></td></tr></table></figure><h2 id="什么是实例"><a href="#什么是实例" class="headerlink" title="什么是实例"></a>什么是实例</h2><p>实例完全和对象一样</p><h3 id="什么是实例化"><a href="#什么是实例化" class="headerlink" title="什么是实例化"></a>什么是实例化</h3><p>是由类创建对象的过程</p><h2 id="定义类的关键字"><a href="#定义类的关键字" class="headerlink" title="定义类的关键字"></a>定义类的关键字</h2><p><code>class</code> 类名首字母大写</p><h3 id="实例化的过程-：对象名-类名（）"><a href="#实例化的过程-：对象名-类名（）" class="headerlink" title="实例化的过程 ：对象名 = 类名（）"></a>实例化的过程 ：对象名 = 类名（）</h3><ol><li><p>创建一个属于对象的空间</p></li><li><p>执行<code>init</code> 方法，将这个空间的地址和参数传递给<strong>init</strong>方法</p></li><li><p>将对象的空间地址作为返回值，返回给对象名，（对象变量）</p></li></ol><h2 id="在类中可以定义的内容"><a href="#在类中可以定义的内容" class="headerlink" title="在类中可以定义的内容"></a>在类中可以定义的内容</h2><ul><li>静态属性 ：</li></ul><p>所有的这个类的对象 都共有的属性</p><ul><li><p>动态属性:</p><p>方法\ 定义在类中的函数,自带一个<code>self</code>,就是调用这个方法的对象本身</p></li></ul><h2 id="什么是对象的属性"><a href="#什么是对象的属性" class="headerlink" title="什么是对象的属性:"></a>什么是对象的属性:</h2><ol><li>存储在实例化之后 </li><li>创建的空间中的所有 </li><li>变量都是对象的属性<br>​    每一次实例化产生的空间都是独立，每一个对象都有自己的属性值</li></ol><h2 id="类名的作用"><a href="#类名的作用" class="headerlink" title="类名的作用"></a>类名的作用</h2><ul><li>实例化的时候 对象 = 类名（）</li><li>操作（调用） 静态属性 </li></ul><h2 id="对象名作用"><a href="#对象名作用" class="headerlink" title="对象名作用"></a>对象名作用</h2><ul><li><p>操作对象的属性</p></li><li><p>调用类中的方法（动态属性）</p></li></ul><p>闭包</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span><span class="hljs-params">(name)</span>:</span><br>    dic = &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bite</span><span class="hljs-params">()</span>:</span><br>        print(dic[<span class="hljs-string">'name'</span>])<br><br>    dic[<span class="hljs-string">'bite'</span>] = bite <span class="hljs-comment"># 把'bite' 函数的内存地址添加到字典</span><br>    dic[<span class="hljs-string">'name'</span>] = name<br>    <span class="hljs-keyword">return</span> dic<br><br>inn1 = func(<span class="hljs-string">'alex'</span>)<br>print(inn1)<br>inn2 = func(<span class="hljs-string">'egon'</span>)<br>inn1[<span class="hljs-string">'bite'</span>]() <span class="hljs-comment">#inn1 现在就是一个字典，bite 的值 就是一个 函数地址 加()就是调用</span><br>inn2[<span class="hljs-string">'bite'</span>]()<br><br><br><br>执行结果<br>egon<br>&#123;<span class="hljs-string">'bite'</span>: &lt;function func.&lt;locals&gt;.bite at <span class="hljs-number">0x10f61b400</span>&gt;, <span class="hljs-string">'name'</span>: <span class="hljs-string">'alex'</span>&#125;<br>alex<br>egon<br></code></pre></div></td></tr></table></figure><h2 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>:</span><br><br>    <span class="hljs-comment"># self 是一块内存空间</span><br>    <span class="hljs-comment"># 本身存在的内置方法</span><br>    <span class="hljs-comment"># 类名加() 直接执行 __init__ 方法</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, name, gender, hp, mp, ad)</span>:</span><br>        print(<span class="hljs-string">'self&gt;&gt;&gt;&gt;'</span>, self)<br>        print(name, gender, hp, mp, ad)<br><br><br>馒头 = Person(<span class="hljs-string">'mantou'</span>, <span class="hljs-string">'man'</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0.1</span>)<br><br>print(<span class="hljs-string">'馒头&gt;&gt;&gt;&gt;'</span>, 馒头)<br><span class="hljs-comment">#执行结果</span><br><br>self&gt;&gt;&gt;&gt; &lt;__main__.Person object at <span class="hljs-number">0x1062a7978</span>&gt;<br>mantou man <span class="hljs-number">10</span> <span class="hljs-number">10</span> <span class="hljs-number">0.1</span><br>馒头&gt;&gt;&gt;&gt; &lt;__main__.Person object at <span class="hljs-number">0x1062a7978</span>&gt;<br><br><br><br><span class="hljs-comment"># slef 和馒头 的关系?</span><br><span class="hljs-comment"># - Person 做了什么</span><br><br><span class="hljs-comment"># 1.开辟一块内存空间</span><br><br><span class="hljs-comment"># 2.调用__init__</span><br><span class="hljs-comment"># 并且把开辟的空间地址 自动传递给__init__</span><br><br><span class="hljs-comment"># 3. 将self 所指向的内存空间 返回被对象 ‘馒头’ 接收了</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person_</span>:</span>  <span class="hljs-comment"># 类</span><br><br>    COUNTRY = <span class="hljs-string">'China'</span>  <span class="hljs-comment"># 静态属性\类属性 属于类的。 所有属于 这个类所有对象的属性</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, name, gender, hp, mp, ad)</span>:</span><br>        self.name = name  <span class="hljs-comment"># 属性，属于对象的值  - 对象属性</span><br>        self.gener = gender<br>        self.hp = hp<br>        self.mp = mp<br>        self.ad = ad<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">attack</span><span class="hljs-params">(self)</span>:</span>  <span class="hljs-comment"># 在类中的定义的函数，就是方法|</span><br>        <span class="hljs-comment"># 动态属性 、方法</span><br>        print(self)<br><br><br>mantou = Person_(<span class="hljs-string">'mantou'</span>, <span class="hljs-string">'man'</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0.1</span>)  <span class="hljs-comment"># 实例化</span><br>baozi = Person_(<span class="hljs-string">'baozi'</span>, <span class="hljs-string">'man'</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)  <span class="hljs-comment"># 实例化</span><br><br><span class="hljs-comment"># mantou 实例\对象</span><br><br>print(mantou.name)<br>print(baozi.hp)<br><br><span class="hljs-comment"># 如何调用方法 # attack</span><br><br>baozi.attack()  <span class="hljs-comment"># 对象加方法***</span><br><br><span class="hljs-comment"># Person_.attack(mantou) 类名加方法</span><br><br><br><span class="hljs-comment"># 调用一般则是对象名加方法,也可以类名加方法</span><br><br><span class="hljs-comment"># 这两个效果都是相同的。</span><br><br><span class="hljs-comment"># 对象能够完成的事情</span><br><span class="hljs-comment"># 操作对象的属性</span><br><span class="hljs-comment"># 调用对象的方法</span><br></code></pre></div></td></tr></table></figure><h2 id="对象属性的值的操作"><a href="#对象属性的值的操作" class="headerlink" title="对象属性的值的操作"></a>对象属性的值的操作</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>:</span><br>    COUNTRY = <span class="hljs-string">'China'</span>  <span class="hljs-comment"># 静态属性\类属性 属于类的。 所有属于 这个类所有对象的属性</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, name, gender, hp, mp, ad)</span>:</span><br>        self.name = name  <span class="hljs-comment">#对象属性</span><br>        self.gender = gender<br>        self.hp = hp<br>        self.mp = mp<br>        self.ad = ad<br><br><br><span class="hljs-comment">#</span><br>mantou = Person_(<span class="hljs-string">'mantou'</span>, <span class="hljs-string">'man'</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0.1</span>)  <span class="hljs-comment"># 实例化</span><br>baozi = Person_(<span class="hljs-string">'baozi'</span>, <span class="hljs-string">'man'</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)  <span class="hljs-comment"># 实例化</span><br><br>print(Person_.__dict__)<br>print(mantou.__dict__)<br><br><span class="hljs-comment"># 可修改属性名</span><br>mantou.__dict__[<span class="hljs-string">'name'</span>] = <span class="hljs-string">'tu_sb'</span><br>print(mantou.__dict__)<br><br><span class="hljs-comment"># 修改属性的值</span><br><span class="hljs-comment"># mantou.hp = 9</span><br><span class="hljs-comment"># print(mantou.hp)</span><br><br><span class="hljs-comment"># 可以查看属性名</span><br>print(mantou.__dict__)<br><br><span class="hljs-comment">#尝试</span><br><span class="hljs-comment">#调用这些对象的属性(能不能修改, 能不能在实例化之后再给对象添加新的属性)</span><br><span class="hljs-comment">#查看属性值</span><br>print(alex.hp)<br><br><span class="hljs-comment">#如何给一个对象添加属性</span><br>alex.level = <span class="hljs-number">1</span><br>print(alex.level)<br><br><span class="hljs-comment">#删除属性的值</span><br><span class="hljs-keyword">del</span> alex.level<br>print(alex.level)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 一点基本技巧</title>
    <link href="/2018/11/15/python%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <url>/2018/11/15/python%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-一点基本技巧"><a href="#Python-一点基本技巧" class="headerlink" title="Python 一点基本技巧"></a>Python 一点基本技巧</h1><h3 id="Python合并列表，append-、extend-、-、"><a href="#Python合并列表，append-、extend-、-、" class="headerlink" title="Python合并列表，append()、extend()、+、+="></a>Python合并列表，append()、extend()、+、+=</h3><p>实际应用中涉及到了列表合并的问题。</p><p>在应用<code>append()</code>时，发现列表是以一个元素的形式追加到列表上的，最后查询后用的是extend()方法，下面是区别</p><p>1.<code>append()</code>向列表尾部追加一个新元素，列表只占一个索引位，在原有列表上增加</p><p>2.<code>extend()</code> 向列表尾部追加一个列表，将列表中的每个元素都追加进来，在原有列表上增加</p><p>3.<code>+</code>  直接用+号看上去与用<code>extend()</code>一样的效果，但是实际上是生成了一个新的列表存这两个列表的和，只能用在两个列表相加上</p><p>4.<code>+=</code> 效果与<code>extend()</code>一样，向原列表追加一个新元素，在原有列表上增加</p><h3 id="列表python-列表分组技巧"><a href="#列表python-列表分组技巧" class="headerlink" title="列表python - 列表分组技巧"></a>列表python - 列表分组技巧</h3><p>#请写出一段 Python 代码实现分组一个 list 里面的元素,如 [1,2,3,…100]变成 [[1,2,3],[4,5,6]….] </p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">a = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">101</span>)] <br><br>b = [a[i:i+<span class="hljs-number">3</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, len(a),<span class="hljs-number">3</span>)] <br><br>print(b)<br></code></pre></div></td></tr></table></figure><p>运行结果: </p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>], [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>], [<span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>], [<span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>], [<span class="hljs-number">19</span>, <span class="hljs-number">20</span>, <span class="hljs-number">21</span>], [<span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>], [<span class="hljs-number">25</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>], [<span class="hljs-number">28</span>, <span class="hljs-number">29</span>, <span class="hljs-number">30</span>], [<span class="hljs-number">31</span>, <span class="hljs-number">32</span>, <span class="hljs-number">33</span>], [<span class="hljs-number">34</span>, <span class="hljs-number">35</span>, <span class="hljs-number">36</span>], [<span class="hljs-number">37</span>, <span class="hljs-number">38</span>, <span class="hljs-number">39</span>], [<span class="hljs-number">40</span>, <span class="hljs-number">41</span>, <span class="hljs-number">42</span>], [<span class="hljs-number">43</span>, <span class="hljs-number">44</span>, <span class="hljs-number">45</span>], [<span class="hljs-number">46</span>, <span class="hljs-number">47</span>, <span class="hljs-number">48</span>], [<span class="hljs-number">49</span>, <span class="hljs-number">50</span>, <span class="hljs-number">51</span>], [<span class="hljs-number">52</span>, <span class="hljs-number">53</span>, <span class="hljs-number">54</span>], [<span class="hljs-number">55</span>, <span class="hljs-number">56</span>, <span class="hljs-number">57</span>], [<span class="hljs-number">58</span>, <span class="hljs-number">59</span>, <span class="hljs-number">60</span>], [<span class="hljs-number">61</span>, <span class="hljs-number">62</span>, <span class="hljs-number">63</span>], [<span class="hljs-number">64</span>, <span class="hljs-number">65</span>, <span class="hljs-number">66</span>], [<span class="hljs-number">67</span>, <span class="hljs-number">68</span>, <span class="hljs-number">69</span>], [<span class="hljs-number">70</span>, <span class="hljs-number">71</span>, <span class="hljs-number">72</span>], [<span class="hljs-number">73</span>, <span class="hljs-number">74</span>, <span class="hljs-number">75</span>], [<span class="hljs-number">76</span>, <span class="hljs-number">77</span>, <span class="hljs-number">78</span>], [<span class="hljs-number">79</span>, <span class="hljs-number">80</span>, <span class="hljs-number">81</span>], [<span class="hljs-number">82</span>, <span class="hljs-number">83</span>, <span class="hljs-number">84</span>], [<span class="hljs-number">85</span>, <span class="hljs-number">86</span>, <span class="hljs-number">87</span>], [<span class="hljs-number">88</span>, <span class="hljs-number">89</span>, <span class="hljs-number">90</span>], [<span class="hljs-number">91</span>, <span class="hljs-number">92</span>, <span class="hljs-number">93</span>], [<span class="hljs-number">94</span>, <span class="hljs-number">95</span>, <span class="hljs-number">96</span>], [<span class="hljs-number">97</span>, <span class="hljs-number">98</span>, <span class="hljs-number">99</span>], [<span class="hljs-number">100</span>]]<br></code></pre></div></td></tr></table></figure><p>实际应用的一段代码</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">full_list_info = [n[i] <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> dic_info <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Head_info] <span class="hljs-comment">#全部信息组成为一个列表</span><br>five_elment_list = [full_list_info[i:i + len(Head_info)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, len(full_list_info), len(Head_info))] <span class="hljs-comment">#5个元素为一组列表</span><br></code></pre></div></td></tr></table></figure><p>运行效果如下：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">[<span class="hljs-string">'1'</span>, <span class="hljs-string">'tu'</span>, <span class="hljs-string">'121'</span>, <span class="hljs-string">'13651054608'</span>, <span class="hljs-string">'IT'</span>, <span class="hljs-string">'2'</span>, <span class="hljs-string">'hh'</span>, <span class="hljs-string">'23'</span>, <span class="hljs-string">'13304320533'</span>, <span class="hljs-string">'Tearcher'</span>, <span class="hljs-string">'3'</span>, <span class="hljs-string">'nezha'</span>, <span class="hljs-string">'25'</span>, <span class="hljs-string">'1333235322'</span>, <span class="hljs-string">'IT'</span>, <span class="hljs-string">'9'</span>, <span class="hljs-string">'xiaohaha'</span>, <span class="hljs-string">'121'</span>, <span class="hljs-string">'17601234567'</span>, <span class="hljs-string">'IT'</span>, <span class="hljs-string">'10'</span>, <span class="hljs-string">'tudou'</span>, <span class="hljs-string">'21'</span>, <span class="hljs-string">'1760123'</span>, <span class="hljs-string">'ban'</span>, <span class="hljs-string">'11'</span>, <span class="hljs-string">'xiaohaha'</span>, <span class="hljs-string">'50'</span>, <span class="hljs-string">'138'</span>, <span class="hljs-string">'game'</span>, <span class="hljs-string">'12'</span>, <span class="hljs-string">'mantou25000'</span>, <span class="hljs-string">'23'</span>, <span class="hljs-string">'17602323312'</span>, <span class="hljs-string">'搬砖'</span>, <span class="hljs-string">'13'</span>, <span class="hljs-string">'32'</span>, <span class="hljs-string">'23'</span>, <span class="hljs-string">'23'</span>, <span class="hljs-string">'3'</span>, <span class="hljs-string">'14'</span>, <span class="hljs-string">'12'</span>, <span class="hljs-string">'123'</span>, <span class="hljs-string">'32'</span>, <span class="hljs-string">'132'</span>]<br><br><span class="hljs-comment">#分组后效果</span><br>[[<span class="hljs-string">'1'</span>, <span class="hljs-string">'tu'</span>, <span class="hljs-string">'121'</span>, <span class="hljs-string">'13651054608'</span>, <span class="hljs-string">'IT'</span>], [<span class="hljs-string">'2'</span>, <span class="hljs-string">'h'</span>, <span class="hljs-string">'23'</span>, <span class="hljs-string">'13304320533'</span>, <span class="hljs-string">'Tearcher'</span>], [<span class="hljs-string">'3'</span>, <span class="hljs-string">'nezha'</span>, <span class="hljs-string">'25'</span>, <span class="hljs-string">'1333235322'</span>, <span class="hljs-string">'IT'</span>], [<span class="hljs-string">'9'</span>, <span class="hljs-string">'xiaohaha'</span>, <span class="hljs-string">'121'</span>, <span class="hljs-string">'17601234362'</span>, <span class="hljs-string">'IT'</span>], [<span class="hljs-string">'10'</span>, <span class="hljs-string">'tudou'</span>, <span class="hljs-string">'21'</span>, <span class="hljs-string">'1760123'</span>, <span class="hljs-string">'ban'</span>], [<span class="hljs-string">'11'</span>, <span class="hljs-string">'xiaohaha'</span>, <span class="hljs-string">'50'</span>, <span class="hljs-string">'138'</span>, <span class="hljs-string">'game'</span>], [<span class="hljs-string">'12'</span>, <span class="hljs-string">'mantou25000'</span>, <span class="hljs-string">'23'</span>, <span class="hljs-string">'17602323312'</span>, <span class="hljs-string">'搬砖'</span>], [<span class="hljs-string">'13'</span>, <span class="hljs-string">'32'</span>, <span class="hljs-string">'23'</span>, <span class="hljs-string">'23'</span>, <span class="hljs-string">'3'</span>], [<span class="hljs-string">'14'</span>, <span class="hljs-string">'12'</span>, <span class="hljs-string">'123'</span>, <span class="hljs-string">'32'</span>, <span class="hljs-string">'132'</span>]]<br></code></pre></div></td></tr></table></figure><p>###变量值交换</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-string">""""pythonic way of value swapping"""</span><br><br>a,b = <span class="hljs-number">5</span>,<span class="hljs-number">10</span><br>a,b = b,a<br></code></pre></div></td></tr></table></figure><h3 id="拼接列表中字符串"><a href="#拼接列表中字符串" class="headerlink" title="拼接列表中字符串"></a>拼接列表中字符串</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br>li = [<span class="hljs-string">'he'</span>,<span class="hljs-string">'llo'</span>,<span class="hljs-string">'world'</span>,<span class="hljs-string">'python'</span>]<br><br>print(<span class="hljs-string">''</span>.join(li)<br></code></pre></div></td></tr></table></figure><p>也可以使用’+’ ,join效率更高</p><h3 id="查找中出现频繁的元素"><a href="#查找中出现频繁的元素" class="headerlink" title="查找中出现频繁的元素"></a>查找中出现频繁的元素</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br>a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2313</span>, <span class="hljs-number">13</span>, <span class="hljs-number">123</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">99</span>, <span class="hljs-number">9</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">33</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">55</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>,<span class="hljs-number">6</span>, <span class="hljs-number">66</span>]<br><br>print(set(a))<br>print(a.count(<span class="hljs-number">4</span>))<br><br><span class="hljs-comment"># 一</span><br>litu = [(i, a.count(i)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a]<br>maxel = max(litu, key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>])<br>print(maxel)<br><br>mmm = map(a.count, a)<br>print(list(mmm))<br><br><span class="hljs-comment"># 一</span><br>maxel = max(zip(map(a.count, a), a))<br>print(maxel)<br>print(<span class="hljs-string">'..'</span>)<br><br><span class="hljs-comment"># 二</span><br>maxel2 = max([(i, a.count(i)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a], key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>])<br>print(maxel2)<br><br><span class="hljs-comment"># 三</span><br>maxel3 = max(a, key=<span class="hljs-keyword">lambda</span> x: a.count(x))<br>print(maxel3)<br><br><span class="hljs-comment"># 四</span><br>print(max(set(a), key=a.count))<br><br><span class="hljs-comment"># 五</span><br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Counter<br><br>cnt = Counter(a)<br>print(cnt.most_common())  <span class="hljs-comment"># ？？</span><br></code></pre></div></td></tr></table></figure><h3 id="检查两个字符串是否相同的字符构成"><a href="#检查两个字符串是否相同的字符构成" class="headerlink" title="检查两个字符串是否相同的字符构成"></a>检查两个字符串是否相同的字符构成</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Counter<br>str1 = <span class="hljs-string">'13'</span><br>str2 = <span class="hljs-string">'13'</span><br>islike = Counter(str1) == Counter(str2)<br>print(islike)<br></code></pre></div></td></tr></table></figure><h3 id="字符串反转"><a href="#字符串反转" class="headerlink" title="字符串反转"></a>字符串反转</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">a = [<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]<br><br><span class="hljs-comment">#一</span><br>print(a[::<span class="hljs-number">-1</span>])<br><br><span class="hljs-comment">#二</span><br>b = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> reversed(a)]<br>print(b)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> reversed(a):<br>    print(i)<br></code></pre></div></td></tr></table></figure><p> 列表有个reverse方法，也是反转列表，但是它是对原列表进行反转，而不是返回一个新的列表</p><h3 id="转置二维数组"><a href="#转置二维数组" class="headerlink" title="转置二维数组"></a>转置二维数组</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#transpose 2d array</span><br><br>original = [[<span class="hljs-string">'a'</span>,<span class="hljs-string">'b'</span>],[<span class="hljs-string">'c'</span>,<span class="hljs-string">'d'</span>],[<span class="hljs-string">'e'</span>,<span class="hljs-string">'f'</span>]]<br>transposed = zip(*original)<br>print(list(transposed))<br></code></pre></div></td></tr></table></figure><h3 id="链式比较"><a href="#链式比较" class="headerlink" title="链式比较"></a>链式比较</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#chained comparison with all kind of operators</span><br>b = <span class="hljs-number">6</span><br>print(<span class="hljs-number">4</span> &lt; b &lt; <span class="hljs-number">7</span>)<br>print(<span class="hljs-number">1</span> == b &lt; <span class="hljs-number">2</span>)<br></code></pre></div></td></tr></table></figure><h3 id="链式函数调用"><a href="#链式函数调用" class="headerlink" title="链式函数调用"></a>链式函数调用</h3> <figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#calling different functions with same arguments based on condition</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">product</span><span class="hljs-params">(a,b)</span>:</span><br><span class="hljs-keyword">return</span> a * b<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(a,b)</span>:</span><br>    <span class="hljs-keyword">return</span> a + b<br><br>b = <span class="hljs-keyword">True</span><br><br>print((product <span class="hljs-keyword">if</span> b <span class="hljs-keyword">else</span> add)(<span class="hljs-number">5</span>,<span class="hljs-number">7</span>))<br></code></pre></div></td></tr></table></figure><h3 id="拷贝列表"><a href="#拷贝列表" class="headerlink" title="拷贝列表"></a>拷贝列表</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">浅拷贝<br>a.copy()<br><br>a[::]<br><br>深拷贝<br><br><span class="hljs-keyword">from</span> copy <span class="hljs-keyword">import</span> deepcopy<br><br>deepcopy(l)<br></code></pre></div></td></tr></table></figure><h3 id="字典get"><a href="#字典get" class="headerlink" title="字典get"></a>字典get</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><span class="hljs-comment">#returning None or default value,when key is not in dict</span><br>   <br>d = &#123;<span class="hljs-string">'a'</span>:<span class="hljs-number">1</span>,<span class="hljs-string">'b'</span>:<span class="hljs-number">2</span>&#125;<br>print(d.get(<span class="hljs-string">'c'</span>,<span class="hljs-string">'xiaohaah'</span>))<br></code></pre></div></td></tr></table></figure><h3 id="按字典值排序"><a href="#按字典值排序" class="headerlink" title="按字典值排序"></a>按字典值排序</h3><p>习题中</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br>dicton = [<br>    &#123;<br>        <span class="hljs-string">'name'</span>: <span class="hljs-string">'IBM'</span>, <span class="hljs-string">'shares'</span>: <span class="hljs-number">100</span>, <span class="hljs-string">'price'</span>: <span class="hljs-number">91.1</span>&#125;, &#123;<br>        <span class="hljs-string">'name'</span>: <span class="hljs-string">'AAPL'</span>, <span class="hljs-string">'shares'</span>: <span class="hljs-number">50</span>, <span class="hljs-string">'price'</span>: <span class="hljs-number">543.22</span>&#125;, &#123;<br>        <span class="hljs-string">'name'</span>: <span class="hljs-string">'FB'</span>, <span class="hljs-string">'shares'</span>: <span class="hljs-number">200</span>, <span class="hljs-string">'price'</span>: <span class="hljs-number">21.09</span>&#125;, &#123;<br>        <span class="hljs-string">'name'</span>: <span class="hljs-string">'HPQ'</span>, <span class="hljs-string">'shares'</span>: <span class="hljs-number">35</span>, <span class="hljs-string">'price'</span>: <span class="hljs-number">31.75</span>&#125;, &#123;<br>        <span class="hljs-string">'name'</span>: <span class="hljs-string">'YHOO'</span>, <span class="hljs-string">'shares'</span>: <span class="hljs-number">45</span>, <span class="hljs-string">'price'</span>: <span class="hljs-number">16.35</span>&#125;, &#123;<br>        <span class="hljs-string">'name'</span>: <span class="hljs-string">'ACME'</span>, <span class="hljs-string">'shares'</span>: <span class="hljs-number">75</span>, <span class="hljs-string">'price'</span>: <span class="hljs-number">115.65</span>&#125;]<br><br><br>sortd = sorted(dicton,key= <span class="hljs-keyword">lambda</span> x:x[<span class="hljs-string">'price'</span>])<br><br>print(sortd)<br></code></pre></div></td></tr></table></figure><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#sort a dictonary by its values with the built-in functions and a 'key' argument</span><br><br>d = &#123;<span class="hljs-string">'apple'</span>:<span class="hljs-number">10</span>,<span class="hljs-string">'orange'</span>:<span class="hljs-number">20</span>,<span class="hljs-string">'banana'</span>:<span class="hljs-number">5</span>,<span class="hljs-string">'tomatol'</span>:<span class="hljs-number">1</span>,<span class="hljs-string">'baozi'</span>:<span class="hljs-number">100</span>&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> d.items():<br>    print(i[<span class="hljs-number">0</span>],i[<span class="hljs-number">1</span>])<br><br>print(sorted(d.items(),key=<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-number">1</span>]))<br><br><span class="hljs-comment">#sort using operator itemgetter as the sort key instead or a lambda</span><br><br><span class="hljs-keyword">from</span> operator <span class="hljs-keyword">import</span> itemgetter<br><br>print(sorted(d.items(),key=itemgetter(<span class="hljs-number">1</span>)))<br><br>sort dict key by value<br><span class="hljs-comment">#pythonic******* 真棒</span><br>print(sorted(d,key=d.get))<br></code></pre></div></td></tr></table></figure><h3 id="for-else-不太推荐"><a href="#for-else-不太推荐" class="headerlink" title="for else 不太推荐"></a>for else 不太推荐</h3><p>else gets called when for loop does not reach break statement</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><br><span class="hljs-keyword">for</span> el <span class="hljs-keyword">in</span> a:<br>    <span class="hljs-keyword">if</span> el == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">break</span><br><span class="hljs-keyword">else</span>:<br>    print(<span class="hljs-string">'did not break out of for loop'</span>)<br></code></pre></div></td></tr></table></figure><h3 id="将列表转换成用逗号分隔的字符串"><a href="#将列表转换成用逗号分隔的字符串" class="headerlink" title="将列表转换成用逗号分隔的字符串"></a>将列表转换成用逗号分隔的字符串</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">items = [<span class="hljs-string">'foo'</span>,<span class="hljs-string">'hello'</span>,<span class="hljs-string">'python'</span>]<br><br>print(<span class="hljs-string">','</span>.join(items))<br><br>unmber = [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">10</span>]<br><br>print(<span class="hljs-string">','</span>.join(map(str,unmber)))<br></code></pre></div></td></tr></table></figure><h3 id="合并字典"><a href="#合并字典" class="headerlink" title="合并字典"></a>合并字典</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">d1 = &#123;<span class="hljs-string">'a'</span>:<span class="hljs-number">1</span>&#125;<br>d2 = &#123;<span class="hljs-string">'b'</span>:<span class="hljs-number">2</span>&#125;<br><br><span class="hljs-comment">#pyton3.5</span><br><span class="hljs-comment">#1.</span><br>print(&#123;**d1,**d2&#125;)<br><br><span class="hljs-comment">#2.</span><br>print(dict(d1.items()|d2.items()))<br><br><span class="hljs-comment">#3.</span><br>d1.update(d2)<br>print(d1)<br></code></pre></div></td></tr></table></figure><h3 id="获取列表中最大值与最小值的索引位置"><a href="#获取列表中最大值与最小值的索引位置" class="headerlink" title="获取列表中最大值与最小值的索引位置"></a>获取列表中最大值与最小值的索引位置</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">lst = [<span class="hljs-number">55</span>,<span class="hljs-number">50</span>,<span class="hljs-number">66</span>,<span class="hljs-number">100</span>,<span class="hljs-number">28</span>,<span class="hljs-number">80</span>]<br>print(list(map(lst.index,lst)))<br><br>print(map((lst[lst.index],lst.index),lst))<br>print(min(map(lst.index,lst),key=<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-number">0</span>]))<br> <br><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">minindex</span><span class="hljs-params">(lst)</span>:</span><br>    mmm =min(map((a.index,i),lst),key=<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-number">1</span>])<br>    print(mmm)<br><br>print(min)<br><br><br>minindex(lst)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">maxindex</span><span class="hljs-params">(lst)</span>:</span><br>   <span class="hljs-keyword">return</span> max(range(len(lst)),key=lst.__getitem__)<br><br>print(maxindex(lst))<br></code></pre></div></td></tr></table></figure><h4 id="移除列表中重复的元素"><a href="#移除列表中重复的元素" class="headerlink" title="移除列表中重复的元素"></a>移除列表中重复的元素</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">ites= [<span class="hljs-number">2222</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>]<br><br>newite = list(set(ites))<br>print(newite)<br><br><span class="hljs-comment">#romve dups add keey order</span><br><br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> OrderedDict<br><br>print(OrderedDict.fromkeys(items).keys())<br></code></pre></div></td></tr></table></figure><p> <a href="https://hackernoon.com/python-tricks-101-2836251922e0" target="_blank" rel="noopener">参考连接</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pipenv &amp; 虚拟环境</title>
    <link href="/2018/11/10/Python%20pip&amp;pipenv/"/>
    <url>/2018/11/10/Python%20pip&amp;pipenv/</url>
    
    <content type="html"><![CDATA[<h1 id="pip-的安装-amp-更新"><a href="#pip-的安装-amp-更新" class="headerlink" title="pip 的安装 &amp; 更新"></a>pip 的安装 &amp; 更新</h1><h2 id="确保您已经有了-Python-和-pip"><a href="#确保您已经有了-Python-和-pip" class="headerlink" title="确保您已经有了 Python 和 pip"></a>确保您已经有了 Python 和 pip</h2><p>在您进一步之前，请确保您有 Python，并且可从您的命令行中获得。 您可以通过简单地运行以下命令来检查：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> python --version</span><br><span class="hljs-meta">$</span><span class="bash"> pip --version</span><br></code></pre></div></td></tr></table></figure><h2 id="关键步骤"><a href="#关键步骤" class="headerlink" title="关键步骤"></a>关键步骤</h2><p>来到命令行界面，执行</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">python2-m pip install --upgrade pip --force-reinstall<br>python3-m pip install --upgrade pip --force-reinstall<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 分别重装两个python版本的pip</span><br> python -m pip install --upgrade pip --force-reinstall，显示重新安装成功。<br> python3 -m pip install --upgrade pip --force-reinstall，显示重新安装成功。<br></code></pre></div></td></tr></table></figure><h2 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">输入pip2 -V ，pip3 -V 查看版本信息 <br><span class="hljs-meta"><br>#</span><span class="bash">卸载</span><br>python -m pip uninstall pip<br></code></pre></div></td></tr></table></figure><h2 id="卸载-安装pip"><a href="#卸载-安装pip" class="headerlink" title="卸载 安装pip"></a>卸载 安装pip</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">安装pip环境：<br>sudo easy_install pip<br><br>Mac 卸载自己安装的 python<br>第一步：删除框架<br>sudo rm -rf /Library/Frameworks/Python.framework/Versions/3.6<br>第二步：删除应用目录<br>sudo rm -rf "/Applications/Python 3.6"<br>第三步：删除指向python的链接<br>cd /usr/local/bin/<br>ls -l /usr/local/bin | grep '/Library/Frameworks/Python.framework/Versions/3.6' # 查看链接<br>ls -l /usr/local/bin | grep '../Library/Frameworks/Python.framework/Versions/x.x' | awk '&#123;print $9&#125;' | tr -d @ | xargs rm<br>brew prune # 清除链接和目录<br></code></pre></div></td></tr></table></figure><h2 id="升级pip"><a href="#升级pip" class="headerlink" title="升级pip"></a>升级pip</h2><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">$ python3<br>Python 3.6.6 (default, Sep  5 2018, 03:40:52) <br>[GCC 6.3.0 20170516] on linux<br>Type "help", "copyright", "credits" or "license" for more information.<br>&gt;&gt;&gt; from pipenv.vendor.pip_shims import get_installed_distributions, FrozenRequirement<br>&gt;&gt;&gt; FrozenRequirement<br>&lt;class 'pipenv.patched.notpip._internal.operations.freeze.FrozenRequirement'&gt;<br>&gt;&gt;&gt; get_installed_distributions<br>&lt;function get_installed_distributions at 0x7f4298e859d8&gt;<br>&gt;&gt;&gt; import pipenv<br>&gt;&gt;&gt; pipenv.__version__<br>'2018.10.9'<br><br><br><br><br><br>I'm currently using<br><br>python3 -m pip install pip==10.0.1<br>python3 -m pip install pipenv==2018.5.18<br>Once #2924 is fixed and released, you can upgrade again to the latest and greatest.<br><br>python3 -m pip install --upgrade pip<br>python3 -m pip install --upgrade pipenv<br></code></pre></div></td></tr></table></figure><p>以后只需运行<code>pip(2) install XXX</code>和<code>pip3 install XXX</code>即可安装各自的python包。</p><p><strong>注意</strong>，使用<strong>Python2.X</strong>或<strong>pip2</strong>安装东西的时候要注意权限问题，如果当前用户是普通用户，需要切换到管理员用户 <code>sudo -i</code></p><h2 id="pip的使用"><a href="#pip的使用" class="headerlink" title="pip的使用"></a>pip的使用</h2><p>pip 为python的包管理器. 最新的python2和python3都已经自带pip.</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 显示帮助</span><br>pip<br>pip --help<br>pip install -h                      # 显示安装的帮助<br><span class="hljs-meta"><br>#</span><span class="bash"> 安装包</span><br>pip install PackageName             # latest version<br>pip install PackageName==1.0.4      # specific version<br><span class="hljs-meta"><br>#</span><span class="bash"> 包列表</span><br>pip list                            # 显示已安装的包   <br>pip list --outdated                 # 显示有更新的包<br><span class="hljs-meta"><br>#</span><span class="bash"> 显示包的简介, 以及包的源码文件</span><br>pip show --files PackageName<br><span class="hljs-meta"><br>#</span><span class="bash"> 更新包</span><br>pip install --U PackageName<br>pip install --upgradwe PackageName<br>pip install --upgrade pip           # pip更新自己<br>python -m pip install --U pip       # -m 表示调用python模块, 这里就是要调用pip<br><span class="hljs-meta"><br>#</span><span class="bash"> 卸载包</span><br>pip uninstall PackageName<br><span class="hljs-meta"><br>#</span><span class="bash"> 遇到SSL问题, 下载失败时, 信任下载源即可</span><br>yum install openssl -y<br><span class="hljs-meta">#</span><span class="bash"> [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:XXX)</span><br>pip list --outdated --trusted-host pypi.python.org <br>pip install --trusted-host pypi.python.org PackageName<br><br><br><br><br><br>pip3 install --upgrade pip --trusted-host=pypi.python.org --trusted-host=pypi.org --trusted-host=files.pythonhosted.org<br> <br>pip install pip -U<br>pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple<br>pip3 config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple<br><br><br><span class="hljs-meta"><br><br><br>#</span><span class="bash"> 如果还是不行, 再试试下面这句. index-url 将源指定为http格式, 不用https了, 然后设置为信任.</span><br><span class="hljs-meta">#</span><span class="bash"> 指定单次下载包源</span><br>pip install &lt;包名&gt; -i https://mirrors.aliyun.com/pypi/simple<br>pip install --index-url=http://pypi.python.org/simple/ --trusted-host pypi.python.org <br><br>PackageName<br>python3 -m pip install --upgrade --force pip <br><span class="hljs-meta"><br><br><br>#</span><span class="bash"> 安装</span><br>sudo easy_install pip<br><span class="hljs-meta"><br>#</span><span class="bash"> 列出已安装的包</span><br>pip freeze or pip list<br><span class="hljs-meta"><br>#</span><span class="bash"> 导出requirements.txt</span><br>pip freeze &gt; requirements.txt<br><span class="hljs-meta"><br>#</span><span class="bash"> 在线安装</span><br>pip install PackageName 或 <br>pip install -r requirements.txt<br><br>通过使用== &gt;= &lt;= &gt; &lt;来指定版本，不写则安装最新版<br><br>requirements.txt内容格式为：<br><br>APScheduler==2.1.2<br>Django==1.5.4<br><br>安装本地安装包<br>pip install &lt;目录&gt;/&lt;文件名&gt; 或 pip install --use-wheel --no-index --find-links=wheelhouse/ PackageName<br><br>PackageName前有空格<br><br>可简写为<br><br>pip install --no-index -f=&lt;目录&gt;/ PackageName<br><span class="hljs-meta"><br>#</span><span class="bash"> 卸载包</span><br>pip uninstall PackageName 或 pip uninstall -r requirements.txt<br><span class="hljs-meta"><br>#</span><span class="bash"> 升级包</span><br>pip install -U PackageName<br><br>或：pip install PackageName --upgrade<br><br>升级pip<br>pip install -U pip<br><span class="hljs-meta"><br>#</span><span class="bash"> 显示包所在的目录</span><br>pip show -f PackageName<br><span class="hljs-meta"><br>#</span><span class="bash"> 搜索包</span><br>pip search &lt;搜索关键字&gt;<br><span class="hljs-meta"><br>#</span><span class="bash"> 查询可升级的包</span><br>pip list -o<br><span class="hljs-meta"><br>#</span><span class="bash"> 下载包而不安装</span><br>pip install PackageName -d &lt;目录&gt; 或 pip install -d &lt;目录&gt; -r requirements.txt<br><span class="hljs-meta"><br>#</span><span class="bash"> 打包</span><br>pip wheel PackageName<br></code></pre></div></td></tr></table></figure><p><a href="https://www.cnblogs.com/zhangxinqi/p/9074546.html" target="_blank" rel="noopener">pip安装</a></p><p><a href="https://pip.pypa.io/en/latest/#" target="_blank" rel="noopener">pip documentation</a> </p><p><a href="https://pip.readthedocs.io/en/1.1/index.html" target="_blank" rel="noopener">readthdoc</a></p><hr><h2 id="更换国内pypi镜像"><a href="#更换国内pypi镜像" class="headerlink" title="更换国内pypi镜像"></a>更换国内pypi镜像</h2><h3 id="国内pypi镜像"><a href="#国内pypi镜像" class="headerlink" title="国内pypi镜像"></a>国内pypi镜像</h3><ul><li>阿里：<code>https://mirrors.aliyun.com/pypi/simple</code></li><li>中国科学技术大学：<a href="http://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">http://pypi.mirrors.ustc.edu.cn/simple/</a></li></ul><h3 id="指定单次安装源"><a href="#指定单次安装源" class="headerlink" title="指定单次安装源"></a>指定单次安装源</h3><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">pip install &lt;包名&gt; -<span class="hljs-selector-tag">i</span> https:<span class="hljs-comment">//mirrors.aliyun.com/pypi/simple</span><br></code></pre></div></td></tr></table></figure><h3 id="指定全局安装源"><a href="#指定全局安装源" class="headerlink" title="指定全局安装源"></a>指定全局安装源</h3><p>在<code>unix</code>和<code>macos</code>，配置文件为：<code>$HOME/.pip/pip.conf</code><br>在<code>windows</code>上，配置文件为：<code>%HOME%\pip\pip.ini</code></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[global]<br>timeout = 6000<br>  index-url = https://mirrors.aliyun.com/pypi/simple<br>  <br>  pip install -i https://pypi.tuna.tsinghua.edu.cn/simple flask<br><span class="hljs-meta"><br>  #</span><span class="bash">pypi</span><br>配置方法<br>在文件<br><br>~/.pip/pip.conf<br>中添加或修改:<br><br>[global]<br>index-url = https://mirrors.aliyun.com/pypi/simple/<br><br>[install]<br>trusted-host=mirrors.aliyun.com<br></code></pre></div></td></tr></table></figure><h1 id="Pipenv-amp-虚拟环境"><a href="#Pipenv-amp-虚拟环境" class="headerlink" title="Pipenv &amp; 虚拟环境"></a>Pipenv &amp; 虚拟环境</h1><p>用<a href="https://github.com/pypa/pipenv" target="_blank" rel="noopener">Pipenv</a>安装相互独立的虚拟环境</p><blockquote><p>pipenv：Pyhton 官方推荐的新一代包管理工具。 它综合了 virtualenv , pip 和 pyenv 三者的功能。能够自动为项目创建和管理虚拟环境。<br> pipenv使用 Pipfile 和 Pipfile.lock 来管理依赖包，并且在使用pipenv添加或删除包时，自动维护 Pipfile 文件，同时生成 Pipfile.lock 来锁定安装包的版本和依赖信息，避免构建错误。相比pip需要手动维护requirements.txt 中的安装包和版本，具有很大的进步。</p></blockquote><h4 id="安装pipenv"><a href="#安装pipenv" class="headerlink" title="安装pipenv"></a>安装pipenv</h4><p>如果你是Mac电脑，那么推荐使用<strong>Homebrew</strong>来安装。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> brew install pipenv</span><br></code></pre></div></td></tr></table></figure><p>如果不是Mac电脑，建议 使用Python3的pip3 安装：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> pip3 install pipenv <span class="hljs-comment">#pyhton3</span></span><br>or<br><span class="hljs-meta">$</span><span class="bash"> pip install --user pipenv <span class="hljs-comment">#python2 指定用户</span></span><br></code></pre></div></td></tr></table></figure><p>执行pipenv，可以查看pipenv的帮助信息：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">pipenv<br></code></pre></div></td></tr></table></figure><p>其他方式后面有链接地址</p><h2 id="安装-Pipenv"><a href="#安装-Pipenv" class="headerlink" title="安装 Pipenv"></a>安装 Pipenv</h2><p><a href="https://docs.pipenv.org/" target="_blank" rel="noopener">Pipenv</a> 是 Python 项目的依赖管理器。如果您熟悉 Node.js 的 <a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm</a> 或 Ruby 的 <a href="http://bundler.io/" target="_blank" rel="noopener">bundler</a>，那么它们在思路上与这些工具类似。尽管 <a href="https://pypi.org/project/pip/" target="_blank" rel="noopener">pip</a> 可以安装 Python 包， 但仍推荐使用 Pipenv，因为它是一种更高级的工具，可简化依赖关系管理的常见使用情况。</p><p>使用 <code>pip</code> 来安装 Pipenv：</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">$ pip install --<span class="hljs-keyword">user</span> <span class="hljs-title">pipenv</span><br></code></pre></div></td></tr></table></figure><p>注解</p><p>这进行了 <a href="https://pip.pypa.io/en/stable/user_guide/#user-installs" target="_blank" rel="noopener">用户安装</a>，以防止破坏任何系统范围的包。如果安装后, shell 中没有<code>pipenv</code>，则需要将 <a href="https://docs.python.org/3/library/site.html#site.USER_BASE" target="_blank" rel="noopener">用户基础目录</a> 的 二进制文件目录添加到 <code>PATH</code> 中。</p><p>在 Linux 和 macOS 上，您可以通过运行 <code>python -m site --user-base</code> 找到 用户基础目录，然后把 <code>bin</code> 加到目录末尾。比如，上述命令典型地会打印出<code>~/.local`</code>（ <code></code>~<code>会扩展为您的家目录的局对路径），然后将</code>~/.local/bin<code>添加到</code>PATH<code>中。您可以通过 [修改 ~/.profile](https://stackoverflow.com/a/14638025) 永久地设置</code>PATH`。</p><p>在 Windows 上，您通过运行 <code>py -m site --user-site</code> 找到用户基础目录，然后 将 <code>site-packages</code> 替换为 <code>Scripts</code>。比如，上述命令可能返回为<code>C:\Users\Username\AppData\Roaming\Python36\site-packages</code>，然后您需要在<code>PATH</code> 中包含 <code>C:\Users\Username\AppData\Roaming\Python36\Scripts</code>。 您可以在 <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/bb776899(v=vs.85" target="_blank" rel="noopener">控制面板</a>.aspx) 中永久设置用户的 <code>PATH</code>。您可能需要登出 <code>PATH</code> 更改才能生效。</p><h2 id="安装-Pipenv-1"><a href="#安装-Pipenv-1" class="headerlink" title="安装 Pipenv"></a>安装 Pipenv</h2><p><a href="https://docs.pipenv.org/" target="_blank" rel="noopener">Pipenv</a> 是 Python 项目的依赖管理器。如果您熟悉 Node.js 的 <a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm</a> 或 Ruby 的 <a href="http://bundler.io/" target="_blank" rel="noopener">bundler</a>，那么它们在思路上与这些工具类似。尽管 <a href="https://pypi.org/project/pip/" target="_blank" rel="noopener">pip</a> 可以安装 Python 包， 但仍推荐使用 Pipenv，因为它是一种更高级的工具，可简化依赖关系管理的常见使用情况。</p><p>使用 <code>pip</code> 来安装 Pipenv：</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">$ pip install --<span class="hljs-keyword">user</span> <span class="hljs-title">pipenv</span><br></code></pre></div></td></tr></table></figure><p>注解</p><p>这进行了 <a href="https://pip.pypa.io/en/stable/user_guide/#user-installs" target="_blank" rel="noopener">用户安装</a>，以防止破坏任何系统范围的包。如果安装后, shell 中没有<code>pipenv</code>，则需要将 <a href="https://docs.python.org/3/library/site.html#site.USER_BASE" target="_blank" rel="noopener">用户基础目录</a> 的 二进制文件目录添加到 <code>PATH</code> 中。</p><p>在 Linux 和 macOS 上，您可以通过运行 <code>python -m site --user-base</code> 找到 用户基础目录，然后把 <code>bin</code> 加到目录末尾。比如，上述命令典型地会打印出<code>~/.local`</code>（ <code></code>~<code>会扩展为您的家目录的局对路径），然后将</code>~/.local/bin<code>添加到</code>PATH<code>中。您可以通过 [修改 ~/.profile](https://stackoverflow.com/a/14638025) 永久地设置</code>PATH`。</p><p>在 Windows 上，您通过运行 <code>py -m site --user-site</code> 找到用户基础目录，然后 将 <code>site-packages</code> 替换为 <code>Scripts</code>。比如，上述命令可能返回为<code>C:\Users\Username\AppData\Roaming\Python36\site-packages</code>，然后您需要在<code>PATH</code> 中包含 <code>C:\Users\Username\AppData\Roaming\Python36\Scripts</code>。 您可以在 <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/bb776899(v=vs.85" target="_blank" rel="noopener">控制面板</a>.aspx) 中永久设置用户的 <code>PATH</code>。您可能需要登出 <code>PATH</code> 更改才能生效。</p><h4 id="pipenv使用方法命令名"><a href="#pipenv使用方法命令名" class="headerlink" title="pipenv使用方法命令名　　"></a>pipenv使用方法命令名　　</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">命令创建pipenv<br>pipenv启动pipenv　<br>pipenv shell(为存在虚拟环境可自动创建)<br>退出pipenv　　exit<br>查找所有安装包　　pip list<br>环境内包的依赖展示　　pipenv graph<br>查找虚拟环境的路径　　pipenv --venv<br>卸载安装包　　pipenv uninstall<br>卸载pipenv虚拟环境 pipenv --rm<br>1、将目录更改为包含你的Python项目的文件夹，并启动Pipenv， <br>cd my_project <br>pipenv ·install <br><br>---------------------<br><span class="hljs-meta"><br>#</span><span class="bash">创建项目虚拟环境</span><br><span class="hljs-meta">$</span><span class="bash">pipenv install</span><br><span class="hljs-meta">#</span><span class="bash">指定python版本创建虚拟环境</span><br><span class="hljs-meta">$</span><span class="bash">pipenv --two</span><br><span class="hljs-meta">$</span><span class="bash">pipenv --three</span><br><span class="hljs-meta">$</span><span class="bash">pipenv --python 3.6.5</span><br><span class="hljs-meta"><br>#</span><span class="bash">升级所有包</span><br><span class="hljs-meta">$</span><span class="bash">pipenv update</span><br><span class="hljs-meta"><br><br>#</span><span class="bash">升级某一个包，如：redis</span><br><span class="hljs-meta">$</span><span class="bash">pipenv update redis</span><br><span class="hljs-meta"><br>#</span><span class="bash">显示项目路径</span><br><span class="hljs-meta">$</span><span class="bash">pipenv --<span class="hljs-built_in">where</span>  </span><br><span class="hljs-meta"><br>#</span><span class="bash">显示virtualenv路径</span><br><span class="hljs-meta">$</span><span class="bash">pipenv --venv  </span><br><span class="hljs-meta"><br>#</span><span class="bash">显示python虚拟解释器</span><br><span class="hljs-meta">$</span><span class="bash">pipenv --py  </span><br><span class="hljs-meta"><br>#</span><span class="bash">激活虚拟环境</span><br><span class="hljs-meta">$</span><span class="bash">pipenv shell   </span><br><span class="hljs-meta"><br>#</span><span class="bash">安装urllib模块</span><br><span class="hljs-meta">$</span><span class="bash">pipenv install urllib </span><br><span class="hljs-meta"><br><br>#</span><span class="bash">查看目前安装的库及依赖关系  </span><br><span class="hljs-meta">$</span><span class="bash">pipenv graph </span><br><span class="hljs-meta"><br>#</span><span class="bash">检查包的安全性 </span><br><span class="hljs-meta">#</span><span class="bash">pipenv check  </span><br><span class="hljs-meta"><br>#</span><span class="bash">激活虚拟环境并运行shell命令</span><br><span class="hljs-meta">$</span><span class="bash">pipenv run <span class="hljs-built_in">which</span> python</span><br><span class="hljs-meta"><br>#</span><span class="bash">从文件导入包</span><br><span class="hljs-meta">$</span><span class="bash">pipenv install -r requirements.txt</span><br><span class="hljs-meta"><br>#</span><span class="bash">冻结软件包和版本依赖关系,生成Pipfile.lock文件</span><br><span class="hljs-meta">$</span><span class="bash">pipenv lock -r</span><br><span class="hljs-meta"><br>#</span><span class="bash">安装开发包</span><br><span class="hljs-meta">$</span><span class="bash">pipenv install --dev pytest</span><br>pipenv install [moduel] --dev  安装包到开发环境<br><span class="hljs-meta"><br>#</span><span class="bash">使用系统上的python自带的包组件</span><br><span class="hljs-meta">$</span><span class="bash">pipenv --three --site-packages</span><br><span class="hljs-meta">#</span><span class="bash"> 卸载包</span><br><br><br>pipenv uninstall[module]       卸载包<br>pipenv uninstall --all or --all-dev         卸载所有包<br></code></pre></div></td></tr></table></figure><h4 id="为项目建立虚拟环境"><a href="#为项目建立虚拟环境" class="headerlink" title="为项目建立虚拟环境"></a>为项目建立虚拟环境</h4><p>我们希望在每个项目的根目录下保存虚拟环境目录（.venv），需要在 .bashrc 或 .bash_profile 中配置如下： </p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">export PIPENV_VENV_IN_PROJECT=1<br></code></pre></div></td></tr></table></figure><p>要想使配置生效，执行下source ~/.bashrc或者source ~/.bash_profile。<br> 接下来我们为项目创建虚拟环境。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> mkdir pipenv_demo</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> pipenv_demo</span><br><span class="hljs-meta">$</span><span class="bash"> pipenv --three <span class="hljs-comment"># 初始化一个python3虚拟环境，如果想初始化pyhton2的虚拟环境，则使用pipenv --two123</span></span><br></code></pre></div></td></tr></table></figure><p>创建完虚拟环境之后，在pipenv_demo目录下将会看到一个.venv的目录，这个目录就是pipenv_demo项目的虚拟环境。使用具体的python版本创建虚拟环境，可以执行：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">pipenv --python 2.7.14<br></code></pre></div></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">pip install -p    <span class="hljs-comment"># 没有参数会自动寻找 Pipfile 文件</span><br>pip install -p Pipfile.lock  <span class="hljs-comment"># 根据 Pipfile.lock 安装指定依赖</span><br></code></pre></div></td></tr></table></figure><h4 id="为项目安装第三方依赖包"><a href="#为项目安装第三方依赖包" class="headerlink" title="为项目安装第三方依赖包"></a>为项目安装第三方依赖包</h4><p>为项目安装自己的依赖包到虚拟环境中，使每个项目拥有相互独立的第三方包，是非常不错的Python的开发实践。安装依赖包到虚拟环境中：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> pipenv install flask</span><br><span class="hljs-meta">$</span><span class="bash"> pipenv install pytest --dev   <span class="hljs-comment"># 用于区分需要部署到线上的开发包、只需要在测试环境中执行的包12</span></span><br></code></pre></div></td></tr></table></figure><p>执行完上面的命令后，检查一下是否安装成功：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> pipenv graph</span><br>Flask==0.12.2<br>  - click [required: &gt;=2.0, installed: 6.7]<br>  - itsdangerous [required: &gt;=0.21, installed: 0.24]<br>  - Jinja2 [required: &gt;=2.4, installed: 2.10]<br>    - MarkupSafe [required: &gt;=0.23, installed: 1.0]<br>  - Werkzeug [required: &gt;=0.7, installed: 0.14.1]<br>pytest==3.4.2<br>  - attrs [required: &gt;=17.2.0, installed: 17.4.0]<br>  - pluggy [required: &gt;=0.5,&lt;0.7, installed: 0.6.0]<br>  - py [required: &gt;=1.5.0, installed: 1.5.2]<br>  - setuptools [required: Any, installed: 38.6.0]<br>  - six [required: &gt;=1.10.0, installed: 1.11.0]12345678910111213<br></code></pre></div></td></tr></table></figure><p>可看到已经安装了Flask和pytest，还列出了他们的依赖包。<br> 这是观察项目的根目录下，生成了两个文件，分别是Pipfile和Pipfile.lock。这两个文件记录了此项目的第三方依赖包，这两个文件的区别是 Pipfile中安装的包不包含包的具体版本号，而Pipfile.lock是包含包的具体的版本号的</p><h4 id="更新-pypi源来提高依赖库安装的速度"><a href="#更新-pypi源来提高依赖库安装的速度" class="headerlink" title="更新 pypi源来提高依赖库安装的速度"></a>更新 pypi源来提高依赖库安装的速度</h4><p>在使用pipenv的时候，常常会在安装的时候，一直卡在了 Locking 这里，通过加上 -v 参数，可以看到安装过程中的步骤信息，卡在了下载那里，这时应该可以意识到是因为网络的原因，pipenv创建的 Pipfile 中默认的pypi源是python官方的 <a href="https://pypi.python.org/simple" target="_blank" rel="noopener">https://pypi.python.org/simple</a>。我们国内用户访问下载的时候会很慢。</p><p>所以，我一般会在创建好Pipfile以后，修改到文件中 source 块下的 url 字段，设置为国内的 pypi 源就好了，我推荐的是清华的pypi源或者阿里源，具体设置如下：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[[source]]<br> url = "https://pypi.tuna.tsinghua.edu.cn/simple"<br> verify_ssl = true<br> name = "pypi"1234<br> <br> ——————————————————————————————————————————————————————<br><span class="hljs-meta"> $</span><span class="bash">cat Pipfile</span><br><br>[[source]]<br>url = "https://pypi.org/simple"  #用来配置安装包的源，可以更换国内的源,注意在更好没有https的源时会不信任站点将verify_ssl设置为false<br>verify_ssl = true<br>name = "pypi"<br><br>[[source]]<br>url = "https://pypi.tuna.tsinghua.edu.cn/simple"<br>uerify_ssl = true<br>name =  'tuna'<br><br>[packages]<br>requests = &#123;version = "*", index = 'tuna''&#125;   #为不同的包指定不同的安装源<br>maya = &#123;version = "*", index = "pypi"   <br><br>[packages]  #安装的包及版本关系显示<br>redis = "*"<br><br>[dev-packages]  #安装的开发包<br><br>[requires]  #指定项目运行的python版本，你可以在此指定一个系统上没有的版本，在创建虚拟环境是pipenv会通过pyenv下载指定版本的python<br>python_version = "3.6"<br></code></pre></div></td></tr></table></figure><hr><h4 id="linux下的双版本"><a href="#linux下的双版本" class="headerlink" title="linux下的双版本"></a>linux下的双版本</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo python2 hello.py<br>sudo python3 hello.py<br><span class="hljs-meta">#</span><span class="bash"> 指定版本运行源码</span><br><br>sudo pip2 install PackageName<br>sudo pip3 install PackageName<br><span class="hljs-meta">#</span><span class="bash"> 直接使用pip+版本</span><br><br>sudo python2 -m pip install PackageName<br>sudo python3 -m pip install PackageName<br><span class="hljs-meta">#</span><span class="bash"> -m 表示调用python模块, 这里就是要调用pip</span><br></code></pre></div></td></tr></table></figure><h4 id="源码内指定版本"><a href="#源码内指定版本" class="headerlink" title="源码内指定版本"></a>源码内指定版本</h4><p>将需要指定的python版本放在源码的第一行.<br>支持如下方式:</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/usr/bin/env</span><br><span class="hljs-meta">#</span><span class="bash"> 使用默认的系统环境</span><br><span class="hljs-meta"><br>#</span><span class="bash">!python2</span><br><span class="hljs-meta">#</span><span class="bash">!python3</span><br><span class="hljs-meta">#</span><span class="bash">!/usr/bin/env python2</span><br><span class="hljs-meta">#</span><span class="bash">!/usr/bin/env python3</span><br><span class="hljs-meta">#</span><span class="bash"> 指定python版本</span><br><span class="hljs-meta"><br>#</span><span class="bash">!/usr/bin/python2</span><br><span class="hljs-meta">#</span><span class="bash">!/usr/bin/python3</span><br><span class="hljs-meta">#</span><span class="bash">!/usr/<span class="hljs-built_in">local</span>/bin/python2.7</span><br><span class="hljs-meta">#</span><span class="bash">!/usr/<span class="hljs-built_in">local</span>/bin/python3.5</span><br><span class="hljs-meta">#</span><span class="bash"> 通过路径指定版本</span><br></code></pre></div></td></tr></table></figure><p>举个python3的例子, 格式如下:</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">! python3</span><br><span class="hljs-meta">#</span><span class="bash"> coding: utf-8</span><br><br>import logging<br><span class="hljs-meta">#</span><span class="bash"> ... 源码</span><br></code></pre></div></td></tr></table></figure><p>## </p><p><a href="https://github.com/pypa/pipenv" target="_blank" rel="noopener">Pipenv官网</a></p><p><a href="https://pythonguidecn.readthedocs.io/zh/latest/dev/virtualenvs.html" target="_blank" rel="noopener">Pipenv &amp; 虚拟环境</a></p><p><a href="http://pipenv.readthedocs.io/en/latest/#install-pipenv-today" target="_blank" rel="noopener">参考链接</a></p><p><a href="https://www.cnblogs.com/zhangxinqi/p/9073191.html#_labelTop" target="_blank" rel="noopener">py.qi</a></p><p><a href="https://pipenv.readthedocs.io/en/latest/#pipenv-python-dev-workflow-for-humans" target="_blank" rel="noopener">Pipenv: Python Dev Workflow for Humans</a></p><p><a href="http://www.liujiangblog.com/blog/18/" target="_blank" rel="noopener">via</a></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python socket 基本知识与工作原理</title>
    <link href="/2018/11/02/python%20socketbasic%20knowledge/"/>
    <url>/2018/11/02/python%20socketbasic%20knowledge/</url>
    
    <content type="html"><![CDATA[<h3 id="套接字"><a href="#套接字" class="headerlink" title="套接字"></a>套接字</h3><p>由于TCP/IP协议族被设计成能够运行在多种操作系统的环境下，TCP/IP标准允许系统设计者能够选择有关API的具体实现细节。</p><p>目前，可供应用程序使用TCP/IP的应用编程接口API的最著名的是<strong>套接字接口</strong></p><p><strong>而套接字不是物理实体，而是一种抽象，套接字是提供应用程序创建和使用的数据结构</strong></p><p><code>Socket</code>通常也称作“<strong>套接字</strong>”，用于描述<strong>IP地址</strong>和<strong>端口</strong>，是一个通信链的句柄</p><p><img src="/images/python/1652f12fa6e94275.png" srcset="/img/loading.gif" lazyload alt="1652f12fa6e94275"></p><h2 id="Socket有两种类型："><a href="#Socket有两种类型：" class="headerlink" title="Socket有两种类型："></a>Socket有两种类型：</h2><p> <img src="/images/python/image-20181017155606248.png" srcset="/img/loading.gif" lazyload alt="image-20181017155606248"></p><ul><li>流式<code>Socket(STREAM)</code>：是一种面向连接的<code>Socekt</code>，针对面向连接的<strong>TCP</strong>服务应用，可靠，但是效率低；</li><li>数据报式<code>Socket(DATAGAM)</code>：是一种无连接的<strong>Socket</strong>，对应于无连接的<strong>UDP</strong>服务应用。不可靠(丢失，顺序混乱，在接受端要分析重排及要求重发)，但效率高。</li></ul><h2 id="Socket通信协议分析"><a href="#Socket通信协议分析" class="headerlink" title="Socket通信协议分析"></a>Socket通信协议分析</h2><h3 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h3><p>UDP协议是一种无连接的协议，也称为数据报协议。每次发送数据报时，需要同时发送本机的socket描述符(就是上面所说的套接字描述符)和接收端的socket描述符。所以，每次通信都要发送额外的数据。</p><h3 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h3><p>TCP协议是一种有连接的协议，使用应用程序之前，必须先建立TCP连接。所以每次在进行通信之前那，我们需要先建立Socket连接，一个socket作为服务端监听请求，一个socket作为客户端进行连接请求。只有双方建立连接好以后，双方才可以通信。</p><h3 id="两种协议区别及选择"><a href="#两种协议区别及选择" class="headerlink" title="两种协议区别及选择"></a>两种协议区别及选择</h3><p>简单分析两者的区别:</p><ul><li>在UDP中，每次发送数据报，需要附上本机的socket描述符和接收端的socket描述符.而TCP是基于连接的协议，在通信的socket之间需要在通信之前建立连接，即<strong>TCP的三次握手</strong>，，因此建立连接会有一定耗时</li><li>在UDP中，数据报数据在大小有64KB的限制。而TCP不存在这样的限制，一旦TCP通信的socket对建立连接，他们通信类似IO流。</li><li>UDP是不可靠的协议，发送的数据报不一定会按照其发送顺序被接收端的socket接收。而TCP是一种可靠的协议。接收端收到的包的顺序和包在发送端的顺序大体一致(这里不讨论丢包的情况)</li></ul><p>说到这，至于选择哪种协议，还是取决于你的使用场景，当然目前见得比较多就是基于TCP协议的Socket通信。当然一些实时性较高的一些服务，局域网的一些服务用UDP的多一些。</p><h2 id="基于TCP协议的-Socket编程基本流程图"><a href="#基于TCP协议的-Socket编程基本流程图" class="headerlink" title="基于TCP协议的 Socket编程基本流程图"></a>基于TCP协议的 Socket编程基本流程图</h2><p><img src="/images/python/C19943F3-ECA3-4C44-8EB5-6BD7B8C17C6B.jpg" srcset="/img/loading.gif" lazyload alt></p><h2 id="Socket的通信过程"><a href="#Socket的通信过程" class="headerlink" title="Socket的通信过程"></a>Socket的通信过程</h2><h3 id="服务端："><a href="#服务端：" class="headerlink" title="服务端："></a>服务端：</h3><p>申请一个<code>Socket</code><br>绑定到一个IP地址和一个端口<br>开启侦听，等待接受连接</p><h3 id="客户端："><a href="#客户端：" class="headerlink" title="客户端："></a>客户端：</h3><p>申请一个<code>Socket</code><br>连接服务器（指明IP地址和端口号）<br>服务器端接到连接请求后，产生一个新的<code>Socket</code>（端口大于<code>1024</code>）与客户端建立连接并进行通讯，原侦听<code>Socket</code>继续侦听。</p><h2 id="粘包现象是如何产生的"><a href="#粘包现象是如何产生的" class="headerlink" title="粘包现象是如何产生的???"></a>粘包现象是如何产生的???</h2><p>​    黏包现象并不是一个bug<br>​    而是各种tcp协议的特点和算法导致了现在的问题<br>​        合包机制 Nagle<br>​        拆包机制<br>​        流式传输无边界</p><h2 id="黏包一定是坏现象么"><a href="#黏包一定是坏现象么" class="headerlink" title="黏包一定是坏现象么"></a>黏包一定是坏现象么</h2><p>​    但是从程序的传递过程中的角度:<br>​    解决了大量短数据大量回执的问题<br>​    长数据由于网络限制的拆包在我们的接收端可以自动拼接</p><p>对于应用层 你的程序来说 大部分时候都不是好事儿<br>所以我们才要解决它</p><p>解决在应用层程序中的黏包现象</p><h2 id="解决在应用层程序中的黏包现象"><a href="#解决在应用层程序中的黏包现象" class="headerlink" title="解决在应用层程序中的黏包现象"></a>解决在应用层程序中的黏包现象</h2><h2 id="如何解决粘包"><a href="#如何解决粘包" class="headerlink" title="如何解决粘包"></a>如何解决粘包</h2><ul><li>自定义协议<br>先发送即将发送 <strong>数据的长度</strong>，然后再 <strong>发送数据</strong><br>先<strong>接受</strong> 数据的长度，在根据接受的<strong>长度接受数据</strong><br>用到了<code>struct</code> 模块， 来控制<strong>第一次</strong>发送数据长度的这条<strong>信息的长度</strong></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python Socket 编程</title>
    <link href="/2018/10/09/Python%20Socket%20%E7%BC%96%E7%A8%8B/"/>
    <url>/2018/10/09/Python%20Socket%20%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-Socket-编程"><a href="#Python-Socket-编程" class="headerlink" title="Python Socket 编程"></a>Python Socket 编程</h1><p>Python 提供了两个基本的 <a href="https://docs.python.org/3/library/socket.html" target="_blank" rel="noopener">socket</a> 模块：</p><ul><li><code>Socket</code> 它提供了标准的BSD Socket API。</li><li><code>SocketServer</code> 它提供了服务器重心，可以简化网络服务器的开发。</li></ul><p>下面讲解下 Socket模块功能。</p><h3 id="Socket-类型"><a href="#Socket-类型" class="headerlink" title="Socket 类型"></a>Socket 类型</h3><p>套接字格式：socket(family, type[,protocal]) 使用给定的套接族，套接字类型，协议编号（默认为0）来创建套接字</p><table><thead><tr><th style="text-align:left"></th><th style="text-align:left">socket 类型</th><th style="text-align:left">描述  </th></tr></thead><tbody><tr><td style="text-align:left">family</td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">socket.AF_UNIX</td><td style="text-align:left">UNIX系统进程间传输数据                                       </td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><font color="#ff0000" size="3">socket.AF_INET</font></td><td style="text-align:left">IPv4网络传输数据（IPv4 </td></tr><tr><td style="text-align:left"></td><td style="text-align:left">socket.AF_INET6</td><td style="text-align:left">IPv6网络传输数据                                             </td></tr><tr><td style="text-align:left">Type</td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">TCP</td><td style="text-align:left"><font color="#ff0000" size="3">socket.SOCK_STREAM</font></td><td style="text-align:left">基于TCP的流式socket通信，面向连接可靠的传输，TCP传输 </td></tr><tr><td style="text-align:left">UDP</td><td style="text-align:left"><font color="#ff0000" size="3">socket.SOCK_DGRAM</font></td><td style="text-align:left">基于UDP的数据报式socket通信，面向无连接不可靠的传输，UDP传输 </td></tr><tr><td style="text-align:left"></td><td style="text-align:left">socket.SOCK_RAW</td><td style="text-align:left">原始套接字，普通的套接字无法处理ICMP、IGMP等网络报文，而SOCK_RAW可以；其次SOCK_RAW也可以处理特殊的IPV4报文；此外，利用原始套接字，可以通过IP_HDRINCL套接字选项由用户构造IP头</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">socket.SOCK_SEQPACKET</td><td style="text-align:left">连续的数据包传输(已废弃) </td></tr></tbody></table><p>####套接字家族</p><p>基于文件类型的套接字家族名：<code>AF_UNIX</code></p><p>  <code>unix</code>一切皆文件，基于文件的套接字调用的就是底层的文件系统来取数据，两个套接字进程运行在同一机器，可以通过访问同一个文件系统间接完成通信。</p><p>基于网络类型的套接字家族名：<code>AF_INET</code></p><p>　　还有<code>AF_INET6</code>被用于<code>ipv6</code>，还有一些其他的地址家族，不过，他们要么是只用于某个平台，要么就是已经被废弃，或者是很少被使用，或者是根本没有实现，所有地址家族中，<code>AF_INET</code>是使用最广泛的一个，python支持很多种地址家族，但是由于我们只关心网络编程，所以大部分时候我么只使用<code>AF_INET</code>。</p><p>创建<font color="#ff0000" size="3">TCP Socket</font>：</p><figure class="highlight Python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python">sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br></code></pre></div></td></tr></table></figure><p>创建<font color="#ff0000" size="3">UDP Socket</font>：<br><figure class="highlight Python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python">sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)<br></code></pre></div></td></tr></table></figure></p><h3 id="Socket-函数"><a href="#Socket-函数" class="headerlink" title="Socket 函数"></a>Socket 函数</h3><ul><li><p>TCP发送数据时，已建立好TCP链接，所以不需要指定地址，而UDP是面向无连接的，每次发送都需要指定发送给谁。</p></li><li><p>服务器与客户端不能直接发送列表，元素，字典等带有数据类型的格式，发送的内容必须是字符串数据。socket传输字符串需要bytes </p><p>总结</p><blockquote><p>1、socket分为服务端和客户端。</p><p>2、TCP传输不需要IP，UDP传输需要IP地址。</p><p>3、socket传输字符串需要变成byte型。</p><p>4、列表、字典等数据也需要成变byte型。json处理过的数据是字符型的，decode后可以进行send。</p><p>5、传输大数据，使用长度时，要注意len的对象是原数据，还是encode后的数据，接收方也得计算相应的数据。否则会造成文件长度不匹配</p></blockquote></li></ul><p><strong>服务器端 Socket 函数</strong></p><table><thead><tr><th style="text-align:left">Socket 函数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"> <font color="#ff0000" size="3">s.bind(address)</font></td><td style="text-align:left">将套接字绑定到地址，在AF_INET下，以tuple(host, port)的方式传入，如s.bind((host, port))</td></tr><tr><td style="text-align:left"> <font color="#ff0000" size="3">s.listen(backlog)  </font></td><td style="text-align:left">开始监听TCP传入连接，backlog指定在拒绝链接前，操作系统可以挂起的最大连接数，该值最少为1，大部分应用程序设为5就够用了（客户端连接数量，数字） </td></tr><tr><td style="text-align:left"> <font color="#ff0000" size="3">s.accept()    </font></td><td style="text-align:left">接受TCP链接并返回（conn, address），其中conn是新的套接字对象（即，接受的信息），可以用来接收和发送数据，address是链接客户端的地址（ip，随机端口）。 </td></tr></tbody></table><p><strong>客户端 Socket 函数</strong></p><table><thead><tr><th style="text-align:left">Socket 函数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"> <font color="#ff0000" size="3">s.connect(address)      </font></td><td style="text-align:left">链接到address处的套接字，一般address的格式为tuple(host, port)，如果链接出错，则返回socket.error错误（绑定服务端地址） </td></tr><tr><td style="text-align:left">s.connect_ex(address)</td><td style="text-align:left">功能与s.connect(address)相同，但成功返回0，失败返回errno的值</td></tr></tbody></table><p><strong>公共 Socket 函数</strong></p><table><thead><tr><th style="text-align:left">Socket 函数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"> <font color="#ff0000" size="3">s.recv(bufsize[, flag])  </font></td><td style="text-align:left">接受TCP套接字的数据，数据以字符串形式返回，buffsize指定要接受的最大数据量，flag提供有关消息的其他信息，通常可以忽略。<br>bufsize官方建议8192，不同系统最大数值不同，一般一次可以收10M左右。 </td></tr><tr><td style="text-align:left"> <font color="#ff0000" size="3">s.send(string[, flag])    </font></td><td style="text-align:left">发送TCP数据，将字符串中的数据发送到链接的套接字，返回值是要发送的字节数量，该数量可能小于string的字节大小</td></tr><tr><td style="text-align:left"> <font color="#ff0000" size="3">s.sendall(string[, flag])      </font></td><td style="text-align:left">完整发送TCP数据，将字符串中的数据发送到链接的套接字，但在返回之前尝试发送所有数据。成功返回None，失败则抛出异常</td></tr><tr><td style="text-align:left">s.recvfrom(bufsize[, flag])</td><td style="text-align:left">接受UDP套接字的数据u，与recv()类似，但返回值是tuple(data, address)。其中data是包含接受数据的字符串，address是发送数据的套接字地址</td></tr><tr><td style="text-align:left">s.sendto(string[, flag], address)</td><td style="text-align:left">发送UDP数据，将数据发送到套接字，address形式为tuple(ipaddr, port)，指定远程地址发送，返回值是发送的字节数</td></tr><tr><td style="text-align:left"> <font color="#ff0000" size="3">s.close() </font></td><td style="text-align:left">关闭套接字</td></tr><tr><td style="text-align:left">s.getpeername()</td><td style="text-align:left">返回套接字的远程地址，返回值通常是一个tuple(ipaddr, port)</td></tr><tr><td style="text-align:left">s.getsockname()</td><td style="text-align:left">返回套接字自己的地址，返回值通常是一个tuple(ipaddr, port)</td></tr><tr><td style="text-align:left">s.setsockopt(level, optname, value)</td><td style="text-align:left">设置给定套接字选项的值</td></tr><tr><td style="text-align:left">s.getsockopt(level, optname[, buflen])</td><td style="text-align:left">返回套接字选项的值</td></tr><tr><td style="text-align:left">s.settimeout(timeout)</td><td style="text-align:left">设置套接字操作的超时时间，timeout是一个浮点数，单位是秒，值为None则表示永远不会超时。一般超时期应在刚创建套接字时设置，因为他们可能用于连接的操作，如s.connect()</td></tr><tr><td style="text-align:left">s.gettimeout()</td><td style="text-align:left">返回当前超时值，单位是秒，如果没有设置超时则返回None</td></tr><tr><td style="text-align:left">s.fileno()</td><td style="text-align:left">返回套接字的文件描述</td></tr><tr><td style="text-align:left">s.setblocking(flag)</td><td style="text-align:left">如果flag为0，则将套接字设置为非阻塞模式，否则将套接字设置为阻塞模式（默认值）。非阻塞模式下，如果调用recv()没有发现任何数据，或send()调用无法立即发送数据，那么将引起socket.error异常。</td></tr><tr><td style="text-align:left">s.makefile()</td><td style="text-align:left">创建一个与该套接字相关的文件</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br>port = socket.getservbyname(<span class="hljs-string">'ssh'</span>,<span class="hljs-string">'tcp'</span>) <span class="hljs-comment"># /etc/services端口号</span><br></code></pre></div></td></tr></table></figure><h3 id="Socket-编程思想"><a href="#Socket-编程思想" class="headerlink" title="Socket 编程思想"></a>Socket 编程思想</h3><p><img src="/images/python/socket00001.jpg" srcset="/img/loading.gif" lazyload alt></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><br><span class="hljs-keyword">import</span> socket<br>socket.socket(socket_family,socket_type,protocal=<span class="hljs-number">0</span>)<br>socket_family 可以是 AF_UNIX 或 AF_INET。socket_type 可以是 SOCK_STREAM 或 SOCK_DGRAM。protocol 一般不填,默认值为 <span class="hljs-number">0</span>。<br><br>获取tcp/ip套接字<br>tcpSock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br><br>获取udp/ip套接字<br>udpSock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)<br><br>由于 socket 模块中有太多的属性。我们在这里破例使用了<span class="hljs-string">'from module import *'</span>语句。使用 <span class="hljs-string">'from socket import *'</span>,我们就把 socket 模块里的所有属性都带到我们的命名空间里了,这样能 大幅减短我们的代码。<br>例如tcpSock = socket(AF_INET, SOCK_STREAM)<br></code></pre></div></td></tr></table></figure><p><strong>TCP 服务器</strong><br>1、创建套接字，绑定套接字到本地IP与端口</p><figure class="highlight Python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>s.bind()<br></code></pre></div></td></tr></table></figure><p>2、开始监听链接<br><figure class="highlight Python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python">s.listen()<br></code></pre></div></td></tr></table></figure></p><p>3、进入循环，不断接受客户端的链接请求</p><figure class="highlight Python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python">While <span class="hljs-keyword">True</span>:<br>    s.accept()<br></code></pre></div></td></tr></table></figure><p>4、接收客户端传来的数据，并且发送给对方发送数据<br><figure class="highlight Python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python">s.recv()<br>s.sendall()<br></code></pre></div></td></tr></table></figure></p><p>5、传输完毕后，关闭套接字<br><figure class="highlight Python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python">s.close()<br></code></pre></div></td></tr></table></figure></p><p><strong>TCP 客户端</strong><br>1、创建套接字并链接至远端地址<br><figure class="highlight Python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>s.connect()<br></code></pre></div></td></tr></table></figure></p><p>2、链接后发送数据和接收数据<br><figure class="highlight Python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python">s.sendall()<br>s.recv()<br></code></pre></div></td></tr></table></figure></p><p>3、传输完毕后，关闭套接字</p><p>#####send和sendall区别</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">data = s.recv(<span class="hljs-number">1024</span>)<br></code></pre></div></td></tr></table></figure><p>1024 是缓冲区数据大小限制最大值参数 <code>bufsize</code>，并不是说 <code>recv()</code> 方法只返回 1024个字节的内容</p><p><code>send()</code> 方法也是这个原理，它返回发送内容的字节数，结果可能小于传入的发送内容，你得处理这处情况，按需多次调用 <code>send()</code> 方法来发送完整的数据</p><blockquote><p>应用程序负责检查是否已发送所有数据；如果仅传输了一些数据，则应用程序需要尝试传 递剩余数据 <a href="https://docs.python.org/3/library/socket.html#socket.socket.send" target="_blank" rel="noopener">引用</a></p></blockquote><p>我们可以使用 <code>sendall()</code> 方法来回避这个过程</p><blockquote><p>和 send() 方法不一样的是，<code>sendall()</code> 方法会一直发送字节，只到所有的数据传输完成 或者中途出现错误。成功的话会返回 None <a href="https://docs.python.org/3/library/socket.html#socket.socket.sendall" target="_blank" rel="noopener">引用</a></p></blockquote><blockquote><p><a href="https://my.oschina.net/letiantian/blog/297217" target="_blank" rel="noopener">via</a></p><p><a href="http://www.penghaoran.com/2017/03/27/python-send-sendall/" target="_blank" rel="noopener">via</a></p></blockquote><p><strong>socket</strong>（创建套接字） —&gt; <strong>bind</strong>（绑定地址） —&gt; <strong>listen</strong>（设置监听）—&gt; <strong>accept</strong>（等待链接） —&gt; <strong>recv/send</strong>（收/发消息） —&gt; <strong>close</strong> （）</p><p><strong>收发函数特性：</strong></p><p>​     <strong>recv</strong>特征：</p><ol><li><strong>如果</strong>建立的<strong>另一端链接被断开</strong>， 则recv立即<strong>返回空字符串</strong></li><li>recv<strong>是</strong>从<strong>接受缓冲区</strong>取出<strong>内容</strong>，当<strong>缓冲区为空则阻塞</strong></li><li>recv如果<strong>一次接受不完</strong>缓冲区的<strong>内容</strong>，<strong>下次</strong>执行<strong>会自动接受</strong></li></ol><p>​     <strong>send特征：</strong></p><ol><li><p>​        如果发送的<strong>另一端不存在</strong>则会<strong>产生Pipe Broken异常</strong></p></li><li><p>send<strong>是</strong>从<strong>发送缓冲区</strong>发送<strong>内容，</strong>当<strong>缓冲</strong>区<strong>为满则堵塞</strong></p></li></ol><h3 id="Socket-tcp服务器端代码"><a href="#Socket-tcp服务器端代码" class="headerlink" title="Socket tcp服务器端代码"></a>Socket tcp服务器端代码</h3><figure class="highlight Python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><br><span class="hljs-keyword">import</span> socket<br><br><br>HOST = <span class="hljs-string">'192.168.15.46'</span><br>PORT = <span class="hljs-number">8002</span><br><br>s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)<br><br>s.bind((HOST,PORT)) <span class="hljs-comment">#</span><br>s.listen() <span class="hljs-comment">#可运行的客户端</span><br><br><br>print(<span class="hljs-string">'server start %s:%s'</span>%(HOST,PORT))<br><br>print(<span class="hljs-string">'wait...'</span>)<br><br><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>: <span class="hljs-comment">#</span><br>    conn,addr = s.accept()<span class="hljs-comment"># 接受一套接信息，和地址。</span><br>    print(<span class="hljs-string">'conning'</span>,addr)<br>    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>        data = conn.recv(<span class="hljs-number">1024</span>) <span class="hljs-comment">#接受客户端数据，可以改变接受的数据，但不小于客户端发送的消息</span><br>        data = data.decode(<span class="hljs-string">'utf-8'</span>)<span class="hljs-comment"># 解码，在传输中是bytes传输。</span><br>        print(data) <span class="hljs-comment">#打印包数据</span><br>        msg = input(<span class="hljs-string">'plese msg：'</span>)<br>        msg = msg.encode(<span class="hljs-string">'utf-8'</span>) <br>        <span class="hljs-comment">#conn.send(b'hello')              # 在网络传输中，变成字节数据，才可以传输</span><br><br>        conn.send(msg)<br><br>s.close()<br></code></pre></div></td></tr></table></figure><h3 id="Socket-tcp客户端代码"><a href="#Socket-tcp客户端代码" class="headerlink" title="Socket tcp客户端代码"></a>Socket tcp客户端代码</h3><figure class="highlight Python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><br><span class="hljs-keyword">import</span> socket<br>HOST = <span class="hljs-string">'192.168.15.46'</span><br>PORT = <span class="hljs-number">8002</span><br><br>s = socket.socket(socket.AF_INET,socket.SOCK_STREAM) <span class="hljs-comment">#创建一个套接字对象</span><br><br>s.connect((HOST,PORT))<br><br>print(<span class="hljs-string">'conneting'</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    msg = input(<span class="hljs-string">'please input msg:'</span>)<br>    s.send(msg.encode(<span class="hljs-string">'utf-8'</span>))<br>    data = s.recv(<span class="hljs-number">1024</span>) <span class="hljs-comment">#接受返回的数据包，通信的主体，一收一发</span><br>    data = data.decode(<span class="hljs-string">'utf-8'</span>)<br>    print(data)<br>s.close()<br></code></pre></div></td></tr></table></figure><h3 id="基于udp的服务端编程："><a href="#基于udp的服务端编程：" class="headerlink" title="基于udp的服务端编程："></a>基于udp的服务端编程：</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">基于udp的服务端编程：<br>    <span class="hljs-number">1.</span>创建套接字：<br>        sockfd = socket（AF_INET，SOCK_DGRAM）<br>    <span class="hljs-number">2.</span>绑定地址：<br>        sockfd.bind()<br>    <span class="hljs-number">3.</span>消息收发<br>        data, addr = sockfd.recvfrom(buffersize)<br>         功能：接受udp消息<br> 参数：接受消息的大小<br> 返回值：<br>     data 接受到的内容<br>     addr 消息发送的地址<br>        <br>recvfrom每次接受一个报文，如果没有接受到的内容则直接丢弃<br>        sockfd.sendto(data, addr)<br>  功能：udp消息发送<br>  参数：<br>      data 要发送的内容 bytes<br>      addr 目标地址<br>  返回：发送字节数<br>    <span class="hljs-number">4.</span>关闭套接字：<br>        socket.close()<br></code></pre></div></td></tr></table></figure><p><a href="https://www.cnblogs.com/ParisGabriel/p/9434378.html" target="_blank" rel="noopener">次1</a></p><p><a href="https://www.cnblogs.com/ParisGabriel/p/9446617.html" target="_blank" rel="noopener">次2</a></p><p>问题：</p><p>有的同学在重启服务端时可能会遇到</p><p><img src="/images/python/socketaddressalready.png" srcset="/img/loading.gif" lazyload alt="2018-10-17 at 5.34 PM"></p><p>这个是由于你的服务端仍然存在四次挥手的time_wait状态在占用地址（如果不懂，请深入研究1.tcp三次握手，四次挥手 2.syn洪水攻击 3.服务器高并发情况下会有大量的time_wait状态的优化方法）</p><p>解决方法：</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">#加入一条socket配置，重用ip和端口<br><br>server=socket(AF_INET,SOCK_STREAM)<br>server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)<br>server.bind(('127.0.0.1',8080))<br></code></pre></div></td></tr></table></figure><h3 id="粘包现象"><a href="#粘包现象" class="headerlink" title="粘包现象"></a>粘包现象</h3><p>让我们基于tcp先制作一个远程执行命令的程序（1：执行错误命令 2：执行ls 3：执行ifconfig）</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> subprocess<br>cmd  = input(<span class="hljs-string">'&gt;&gt;'</span>)<br>subinfo = subprocess.Popen(<br>    cmd,                     <span class="hljs-comment">#字符串指令：'dir','ipconfig',等等</span><br>    shell=<span class="hljs-keyword">True</span>,              <span class="hljs-comment">#使用shell，就相当于使用cmd窗口</span><br>    stderr=subprocess.PIPE,  <span class="hljs-comment">#标准错误输出，凡是输入错误指令，错误指令输出的报错信息就会被它拿到</span><br>    stdout=subprocess.PIPE   <span class="hljs-comment">#标准输出，正确指令的输出结果被它拿到</span><br>)<br><br>print(subinfo.stdout.read().decode(<span class="hljs-string">'utf-8'</span>)) <span class="hljs-comment"># locale 查看</span><br><br>print(subinfo.stderr.read().decode(<span class="hljs-string">'utf-8'</span>)) <span class="hljs-comment"># win需要解码为gbk</span><br></code></pre></div></td></tr></table></figure><p>　　　注意：</p><p>　　　如果是windows，那么<strong>res.stdout.read()读出的就是GBK编码的</strong>，在接收端需<strong>要用GBK解码</strong></p><p>　　<strong>且只能从管道里读一次结果，PIPE称为管道。</strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> socket <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> subprocess<br><br>ip_port=(<span class="hljs-string">'127.0.0.1'</span>,<span class="hljs-number">8080</span>)<br>BUFSIZE=<span class="hljs-number">1024</span><br><br>tcp_socket_server=socket(AF_INET,SOCK_STREAM)<br>tcp_socket_server.bind(ip_port)<br>tcp_socket_server.listen(<span class="hljs-number">5</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-keyword">True</span>:<br>    conn,addr=tcp_socket_server.accept()<br>    print(<span class="hljs-string">'客户端'</span>,addr)<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">True</span>:<br>        cmd=conn.recv(BUFSIZE)<br>        <span class="hljs-keyword">if</span> len(cmd) == <span class="hljs-number">0</span>:<span class="hljs-keyword">break</span><br><br>        res=subprocess.Popen(cmd.decode(<span class="hljs-string">'utf-8'</span>),shell=<span class="hljs-keyword">True</span>,<br>                         stdout=subprocess.PIPE,<br>                         stdin=subprocess.PIPE,<br>                         stderr=subprocess.PIPE)<br><br>        stderr=act_res.stderr.read()<br>        stdout=act_res.stdout.read()<br>        conn.send(stderr)<br>        conn.send(stdout)<br></code></pre></div></td></tr></table></figure><h4 id="什么是粘包"><a href="#什么是粘包" class="headerlink" title="什么是粘包"></a>什么是粘包</h4><p>须知：只有TCP有粘包现象，UDP永远不会粘包，为何，且听我娓娓道来</p><p>首先需要掌握一个socket收发消息的原理</p><p>两种情况会发生粘包</p><p>发送端需要等缓冲区满才发送出去，造成粘包（发送数据时间间隔很短，数据了很小，会合到一起，产生粘包）</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#server</span><br><span class="hljs-keyword">from</span> socket <span class="hljs-keyword">import</span> *<br>ip_port=(<span class="hljs-string">'127.0.0.1'</span>,<span class="hljs-number">8080</span>)<br><br>tcp_socket_server=socket(AF_INET,SOCK_STREAM)<br>tcp_socket_server.bind(ip_port)<br>tcp_socket_server.listen(<span class="hljs-number">5</span>)<br><br><br>conn,addr=tcp_socket_server.accept()<br><br><br>data1=conn.recv(<span class="hljs-number">10</span>)<br>data2=conn.recv(<span class="hljs-number">10</span>)<br><br>print(<span class="hljs-string">'-----&gt;'</span>,data1.decode(<span class="hljs-string">'utf-8'</span>))<br>print(<span class="hljs-string">'-----&gt;'</span>,data2.decode(<span class="hljs-string">'utf-8'</span>))<br><br>conn.close()<br></code></pre></div></td></tr></table></figure><p>Client</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> socket<br>BUFSIZE=<span class="hljs-number">1024</span><br>ip_port=(<span class="hljs-string">'127.0.0.1'</span>,<span class="hljs-number">8080</span>)<br><br>s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)<br>res=s.connect_ex(ip_port)<br><br><br>s.send(<span class="hljs-string">'hello'</span>.encode(<span class="hljs-string">'utf-8'</span>))<br>s.send(<span class="hljs-string">'feng'</span>.encode(<span class="hljs-string">'utf-8'</span>))<br></code></pre></div></td></tr></table></figure><p><strong>拆包的发生情况</strong></p><p>当发送端缓冲区的长度大于网卡的MTU时，网络层限制是1500B,tcp会将这次发送的数据拆成几个数据包发送出去。</p><p><strong>补充问题一：为何tcp是可靠传输，udp是不可靠传输</strong></p><p>tcp在数据传输时，发送端先把数据发送到自己的缓存中，然后协议控制将缓存中的数据发往对端，对端返回一个ack=1，发送端则清理缓存中的数据，对端返回ack=0，则重新发送数据，所以tcp是可靠的</p><p>而udp发送数据，对端是不会返回确认信息的，因此不可靠</p><p><strong>补充问题二：send(字节流)和recv(1024)及sendall</strong></p><p>recv里指定的1024意思是从缓存里一次拿出1024个字节的数据</p><p>send的字节流是先放入己端缓存，然后由协议控制将缓存内容发往对端，如果待发送的字节流大小大于缓存剩余空间，那么数据丢失，用sendall就会循环调用send，数据不会丢失</p><h3 id="解决粘包的low比处理方法"><a href="#解决粘包的low比处理方法" class="headerlink" title="解决粘包的low比处理方法"></a>解决粘包的low比处理方法</h3><p>问题的根源在于，接收端不知道发送端将要传送的字节流的长度，所以解决粘包的方法就是围绕，如何让发送端在发送数据前，把自己将要发送的字节流总大小让接收端知晓，然后接收端来一个死循环接收完所有数据</p><p>low版本的解决方法</p><p>服务端</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> subprocess<br><br>ip_port = (<span class="hljs-string">'127.0.0.1'</span>, <span class="hljs-number">8889</span>)<br>s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="hljs-number">1</span>)<br>s.bind(ip_port)<br>s.listen()<br><br><span class="hljs-keyword">while</span> <span class="hljs-keyword">True</span>:<br>    conn, addr = s.accept()<br>    print(<span class="hljs-string">'客户端'</span>, addr)<br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">True</span>:<br>        msg = conn.recv(<span class="hljs-number">1024</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> msg:<br>            <span class="hljs-keyword">break</span><br>            <span class="hljs-comment">#</span><br>        res = subprocess.Popen(<br>            msg.decode(<span class="hljs-string">'utf-8'</span>),<br>            shell=<span class="hljs-keyword">True</span>,<br>            stderr=subprocess.PIPE,<br>            stdout=subprocess.PIPE)<br>        err = res.stderr.read()<br>        <span class="hljs-keyword">if</span> err:<br>            ret = err<br>        <span class="hljs-keyword">else</span>:<br>            ret = res.stdout.read()<br>        data_length = len(ret)<br>        conn.send(str(data_length).encode(<span class="hljs-string">'utf-8'</span>))<br>        data = conn.recv(<span class="hljs-number">102</span>).decode(<span class="hljs-string">'utf-8'</span>) <br>        <span class="hljs-keyword">if</span> data == <span class="hljs-string">'recv_ready'</span>:<span class="hljs-comment">#???</span><br>            conn.sendall(ret)<br>    conn.close()<br></code></pre></div></td></tr></table></figure><p>client</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><br>s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)<br><br><br><span class="hljs-comment"># res = s.connect_ex(('127.0.0.1',8889))</span><br>res = s.connect((<span class="hljs-string">'127.0.0.1'</span>,<span class="hljs-number">8889</span>))<br><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    msg = input(<span class="hljs-string">'&gt;&gt;&gt;'</span>)<br>    <span class="hljs-keyword">if</span> len(msg) == <span class="hljs-number">0</span>:<span class="hljs-keyword">continue</span><span class="hljs-comment">#没输入，则重新输入</span><br>    <span class="hljs-keyword">if</span> msg == <span class="hljs-string">'quit'</span>:<span class="hljs-keyword">break</span><span class="hljs-comment">#退出</span><br>    s.send(msg.encode(<span class="hljs-string">'utf-8'</span>))<span class="hljs-comment">#发送执行的命令</span><br>    length = int(s.recv(<span class="hljs-number">1024</span>).decode(<span class="hljs-string">'utf-8'</span>))<span class="hljs-comment">#接受数据包长度（数字转整数性下面做计算</span><br>    print(length)<br>    s.send(<span class="hljs-string">'recv_ready'</span>.encode(<span class="hljs-string">'utf-8'</span>))<span class="hljs-comment">#发送一个可以传输的标示。</span><br>    send_size = <span class="hljs-number">0</span><br>    recv_size = <span class="hljs-number">0</span><br>    data = <span class="hljs-string">b''</span><br>    <span class="hljs-keyword">while</span> recv_size &lt; length:<span class="hljs-comment">#校验数据完整性</span><br>        data += s.recv(<span class="hljs-number">102</span>)<span class="hljs-comment">#循环缓存池能接受收的数据</span><br>        print(len(data))<br>        recv_size += len(data)<span class="hljs-comment">#接收数据包长度对比发送方的长度，才算完整数据。</span><br>    print(data.decode(<span class="hljs-string">'utf-8'</span>))<span class="hljs-comment">#输出接受到完整信息</span><br>    print(<span class="hljs-string">"计算后接受包大小"</span>,recv_size)<br>    print(len(data))<br><br>    <br>   <span class="hljs-comment">#接收方、发送方两端</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python常用模块02</title>
    <link href="/2018/10/09/python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%9702/"/>
    <url>/2018/10/09/python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%9702/</url>
    
    <content type="html"><![CDATA[<h4 id="一-什么是序列化"><a href="#一-什么是序列化" class="headerlink" title="一.什么是序列化"></a>一.什么是序列化</h4><p>​    在数据存储和网络传输的时候，需要对我们的对象进行处理，处理方便存储和传输的数据格式，这个过程叫序列化。不同序列，处理的方式不同，但目的想相同，都是为达到方便存储、传输。序列化是为了解决对象的传输问题。</p><p>​    在python中存在三种序列化的方案</p><ol><li><code>pickle</code> python 任意数据类型转化成bytes并写入文件中。同样也可以将文件bytes转换回我们python的数据，这个过程叫反序列化。</li><li><code>shelve</code> 简单另类的一种序列化，有点类似<code>redis</code>可以作为一种小型数据使用</li><li><code>json</code>将pythoh中常见的字典，列表转化成字符串，是前后端数据交换使用频率最高的的一种数据格式</li></ol><h4 id="二-pickle"><a href="#二-pickle" class="headerlink" title="二.pickle"></a>二.pickle</h4><p>​    pickle就是将python对象写入文件中一种解决方案，但写入的是bytes。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#生成一只猫，今天我要把猫打扁。让他变成机器猫。</span><br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-comment">#</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,name,age)</span>:</span><br>        self.name = name<br>        self.age = age<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">catchMouse</span><span class="hljs-params">(self)</span>:</span><br>        print(self.name,self.age,<span class="hljs-string">'抓老鼠'</span>)<br><span class="hljs-comment">#序列化</span><br>cat = Cat(<span class="hljs-string">'tom'</span>,<span class="hljs-number">12</span>) <span class="hljs-comment">#生成一个对象</span><br>bs = pickle.dumps(cat) <span class="hljs-comment">#把对象转化bytes 序列化</span><br>print(bs) <span class="hljs-comment">#</span><br><span class="hljs-comment">#对象变成bytes了 </span><br><span class="hljs-string">''' b'\x80\x03c__main__\nCat\nq\x00)\x81q\x01&#125;q\x02(X\x04\x00\x00\x00nameq\x03X\x03\x00\x00\x00tomq\x04X\x03\x00\x00\x00ageq\x05K\x13ub.'<br>'''</span><br><span class="hljs-comment">#反序列化</span><br><span class="hljs-comment"># #把bytes 转换回对象 ，反序列化</span><br><br>cf = pickle.loads(bs) <br>cf.catchMouse() <span class="hljs-comment">#猫 还可以抓抓老鼠</span><br><br><br><br><span class="hljs-comment">#对字典的巡序列化</span><br>dic = &#123;<span class="hljs-string">"tom"</span>:<span class="hljs-string">"贾老练"</span>,<span class="hljs-string">'jj'</span>:<span class="hljs-string">"渣渣"</span>&#125;<br><br>bs = pickle.dumps(dic)<br>print(bs)<br>d = pickle.loads(bs)<br>print(d<br></code></pre></div></td></tr></table></figure><p>Pickle中<code>dumps</code> 可以序列化一个对象， loads反序列化，dump可以将对象写入文件</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><span class="hljs-comment"># f = open('cat',mode='wb')  #将猫写入文件中</span><br><span class="hljs-comment"># pickle.dump(tom,f)</span><br><br>rf = open(<span class="hljs-string">'cat'</span>,mode=<span class="hljs-string">'rb'</span>) <span class="hljs-comment"># 读取文件中猫</span><br>cc = pickle.load(rf)<br>cc.catchMouse() <span class="hljs-comment">#让猫抓老鼠</span><br></code></pre></div></td></tr></table></figure><p>pickle多个对象写入</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#多个对象写入文件</span><br>lst = [Cat(<span class="hljs-string">'jerry'</span>,<span class="hljs-number">20</span>),Cat(<span class="hljs-string">'jek'</span>,<span class="hljs-number">14</span>),Cat(<span class="hljs-string">'blue'</span>,<span class="hljs-number">22</span>)]<br><span class="hljs-comment">#</span><br>f = open(<span class="hljs-string">'cat'</span>,mode=<span class="hljs-string">'wb'</span>) <span class="hljs-comment">#写入文件中</span><br><br><span class="hljs-comment">#for el in lst:</span><br><span class="hljs-comment">#   pickle.dump(el,f)</span><br><span class="hljs-comment">#f.close()</span><br><br><span class="hljs-comment">#从文件读取对象；</span><br>f = open(<span class="hljs-string">'cat'</span>,mode=<span class="hljs-string">'rb'</span>) <span class="hljs-comment">#从文件读取对象</span><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">try</span>:<br>        c1 = pickle.load(f)<br>        c1.catchMouse()<br>    <span class="hljs-keyword">except</span> EOFError:<br>        <span class="hljs-keyword">break</span><br></code></pre></div></td></tr></table></figure><ul><li><p>另一种推荐方式读取写入</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#多个对象装入list中，然后读取写入都用着list</span><br><br><span class="hljs-comment">#写入</span><br>lst = [Cat(<span class="hljs-string">'jerry'</span>,<span class="hljs-number">20</span>),Cat(<span class="hljs-string">'jek'</span>,<span class="hljs-number">14</span>),Cat(<span class="hljs-string">'blue'</span>,<span class="hljs-number">22</span>)]<br>f = open(<span class="hljs-string">'cat'</span>,mode=<span class="hljs-string">'wb'</span>) <span class="hljs-comment">#打开文件</span><br>pickle.dump(lst,f）<br>        <br>     <br><span class="hljs-comment">#读取</span><br><br>f = open(<span class="hljs-string">'cat'</span>,mode=<span class="hljs-string">'rb'</span>)<br>ll = pickle.load(f)<br><span class="hljs-keyword">for</span> el <span class="hljs-keyword">in</span> ll:<br>    el.catchMouse()<br><br><span class="hljs-comment">#</span><br></code></pre></div></td></tr></table></figure></li></ul><h4 id="二-shelve"><a href="#二-shelve" class="headerlink" title="二.shelve"></a>二.shelve</h4><p>​    shelve提供python持久化操作。持久化往往依赖于数据库，为了长期存储。在操作shelve像是操作python中字典。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> shelve<br><br>shelf = shelve.open(<span class="hljs-string">"ss"</span>)<br><br>shelf[<span class="hljs-string">'arm'</span>]  = <span class="hljs-string">'馒头'</span><br>print(shelf[<span class="hljs-string">'arm'</span>])<br><br>shelf.close()<br><br><span class="hljs-comment">#文件</span><br><br><span class="hljs-comment">#打开一个文件</span><br>f = shelve.open(<span class="hljs-string">"info"</span>, writeback=<span class="hljs-keyword">True</span>) <span class="hljs-comment">#动态的将修改信息写入文件。</span><br>f[<span class="hljs-string">'jj'</span>] = <span class="hljs-string">"老王"</span><br>f[<span class="hljs-string">'nk'</span>] = <span class="hljs-string">"脑壳"</span><br>f[<span class="hljs-string">'zds'</span>] = <span class="hljs-string">"张德帅"</span><br><br><span class="hljs-comment">#f = &#123;&#125;</span><br><span class="hljs-comment">#像操作字典一样操作文件</span><br>f[<span class="hljs-string">"jay"</span>] = <span class="hljs-string">"周杰伦"</span><br>print(f[<span class="hljs-string">'jay'</span>])<br><br>f[<span class="hljs-string">"jay"</span>] = &#123;<span class="hljs-string">'name'</span>: <span class="hljs-string">"周杰伦"</span>, <span class="hljs-string">'age'</span>: <span class="hljs-number">38</span>, <span class="hljs-string">"hobby"</span>: <span class="hljs-string">"吃喝拉撒睡"</span>&#125;<br>f[<span class="hljs-string">'jay'</span>][<span class="hljs-string">'name'</span>] = <span class="hljs-string">"胡辣汤"</span><br>print(f[<span class="hljs-string">'jay'</span>][<span class="hljs-string">'name'</span>])<br>print(f[<span class="hljs-string">'jay'</span>])<br><br><br><span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> f.items():<br>    print(k,v)<br><br>f.close()<br><br><br><br><span class="hljs-comment"># print(f.keys())</span><br><span class="hljs-comment"># for k in f.keys(): # 可以获取到所有的key</span><br><span class="hljs-comment">#     print(k)</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># for k in f:</span><br><span class="hljs-comment">#     print(k)</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># for k, v in f.items():</span><br><span class="hljs-comment">#     print(k, v)</span><br></code></pre></div></td></tr></table></figure><h4 id="四-json"><a href="#四-json" class="headerlink" title="四.json"></a>四.json</h4><p>​    json是我们前后端交互的枢纽。因为json的语法格式可以完美表示一个对象。json 全称（javascript object natation）翻译js对象简谱</p><p>在python中这玩意就字典。在JavaScript叫json</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br>wf = &#123;<br>    <span class="hljs-string">"name"</span>: <span class="hljs-string">"汪峰"</span>,<br>    <span class="hljs-string">"age"</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-string">"hobby"</span>: <span class="hljs-string">"抢头条"</span>,<br>    <span class="hljs-string">"wife"</span>: &#123;<br>        <span class="hljs-string">"name"</span>: <span class="hljs-string">"子怡"</span>,<br>        <span class="hljs-string">"age"</span>: <span class="hljs-number">19</span>,<br>        <span class="hljs-string">"hobby"</span>:[<span class="hljs-string">"唱歌"</span>, <span class="hljs-string">"跳舞"</span>, <span class="hljs-string">"演戏"</span>]<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>因为是python中写的，前端需要js来解析json。所以需要将程序产生的字典转化成json格式的json字符串。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> json<br>dic = &#123;<span class="hljs-string">"a"</span>:<span class="hljs-string">'普罗米修斯'</span>,<span class="hljs-string">'b'</span>:<span class="hljs-string">'异性'</span>,<span class="hljs-string">'c'</span>:<span class="hljs-string">"星际穿越"</span>&#125;<br>strd = json.dumps(dic)<br>print(strd)<br><span class="hljs-comment">#输出结果</span><br><span class="hljs-comment">#&#123;"a": "\u666e\u7f57\u7c73\u4fee\u65af", "b": "\u5f02\u6027", "c": "\u661f\u9645\u7a7f\u8d8a"&#125;</span><br></code></pre></div></td></tr></table></figure><p>​    结果很不友好，处理中文需要dumps的一个参数<code>ensure_ascii=False</code> ，转换字符<code>son.dumps</code></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br>dic = &#123;<span class="hljs-string">"a"</span>:<span class="hljs-string">'普罗米修斯'</span>,<span class="hljs-string">'b'</span>:<span class="hljs-string">'异性'</span>,<span class="hljs-string">'c'</span>:<span class="hljs-string">"星际穿越"</span>&#125;<br>b = json.dumps(dic,ensure_ascii=<span class="hljs-keyword">False</span>) <span class="hljs-comment">#字典转化为字符串</span><br>print(type(b),b) <br><span class="hljs-comment">#输出结果</span><br><span class="hljs-comment">#&lt;class 'str'&gt; &#123;"a": "普罗米修斯", "b": "异性", "c": "星际穿越"&#125;</span><br></code></pre></div></td></tr></table></figure><p>​    处理前端传过来的json字符串转化为字典利用<code>json.loads</code>参数</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span><br>s = <span class="hljs-string">'&#123;"a":'</span>普罗米修斯<span class="hljs-string">','</span><span class="hljs-string">b':'</span>异性<span class="hljs-string">','</span>c<span class="hljs-string">':"星际穿越"&#125;'</span><br>dic = json.loads(s) <span class="hljs-comment">#字符串解析成字典</span><br>print(type(dic),dic)<br><span class="hljs-comment">#输出结果</span><br><span class="hljs-comment">#&lt;class 'dict'&gt; &#123;'a': '普罗米修斯', 'b': '异性', 'c': '星际穿越'&#125;</span><br></code></pre></div></td></tr></table></figure><h5 id="json写入读取"><a href="#json写入读取" class="headerlink" title="json写入读取"></a>json写入读取</h5><p>​    json序列化结果写入文件中。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><br>dic = &#123;<span class="hljs-string">"a"</span>:<span class="hljs-string">'普罗米修斯'</span>,<span class="hljs-string">'b'</span>:<span class="hljs-string">'异性'</span>,<span class="hljs-string">'c'</span>:<span class="hljs-string">"星际穿越"</span>&#125;<br><br>f = open(<span class="hljs-string">'test.json'</span>,mode=<span class="hljs-string">'w'</span>,encoding=<span class="hljs-string">'utf-8'</span>)<br>json.dump(dic,f,ensure_ascii=<span class="hljs-keyword">False</span>)<br>f.close()<br></code></pre></div></td></tr></table></figure><p>​    读取文件中一个json</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br>rf = open(<span class="hljs-string">'test.json'</span>,mode=<span class="hljs-string">'r'</span>,encoding=<span class="hljs-string">'utf-8'</span>)<br>rdic = json.load(rf)<br>rf.close()<br>print(type(rdic),rdic)<br><span class="hljs-comment">#输出结果</span><br><span class="hljs-comment">#&lt;class 'dict'&gt; &#123;'a': '普罗米修斯', 'b': '异性', 'c': '星际穿越'&#125;</span><br></code></pre></div></td></tr></table></figure><p><strong>注意</strong> 可以向一个文件写入多个json串，但读不行。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br>lst = [&#123;<span class="hljs-string">'a'</span>:<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-string">'b'</span>:<span class="hljs-string">'包子'</span>&#125;,&#123;<span class="hljs-string">"c"</span>:<span class="hljs-string">'馒头'</span>&#125;]<br>f = open(<span class="hljs-string">'test.json'</span>,mode=<span class="hljs-string">'w'</span>,encoding=<span class="hljs-string">'utf-8'</span>)<br><br><span class="hljs-keyword">for</span> el <span class="hljs-keyword">in</span> lst:<br><br>     json.dump(el,f,ensure_ascii=<span class="hljs-keyword">False</span>)<br><br>f.close()<br><span class="hljs-comment">#输出结果，内容都在一行无法正常读取。</span><br><span class="hljs-comment">#&#123;"a": 1&#125;&#123;"b": "包子"&#125;&#123;"c": "馒头"&#125;</span><br></code></pre></div></td></tr></table></figure><ul><li><p>解决方案</p><p>对每一行进行处理，把<code>dump</code>  换成<code>dumps</code></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> json<br><br>lst = [&#123;<span class="hljs-string">'a'</span>:<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-string">'b'</span>:<span class="hljs-string">'包子'</span>&#125;,&#123;<span class="hljs-string">"c"</span>:<span class="hljs-string">'馒头'</span>&#125;]<br><br>f = open(<span class="hljs-string">'test.json'</span>,mode=<span class="hljs-string">'w'</span>,encoding=<span class="hljs-string">'utf-8'</span>)<br><br><span class="hljs-keyword">for</span> el <span class="hljs-keyword">in</span> lst:<br>    elo = json.dumps(el,ensure_ascii=<span class="hljs-keyword">False</span>) + <span class="hljs-string">"\n"</span> <span class="hljs-comment"># 将字典转为json字符串</span><br>    f.write(elo)<br><br>f.close()<br><br><br><br><span class="hljs-comment">#读取</span><br><br><br><span class="hljs-keyword">import</span> json<br><br>f = open(<span class="hljs-string">'test.json'</span>,mode=<span class="hljs-string">'r'</span>,encoding=<span class="hljs-string">'utf-8'</span>)<br><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:<br>    dic = json.loads(line.strip()) <span class="hljs-comment">#逐行读取json字符串，转换为字典</span><br>    print(dic)<br>f.close()<br></code></pre></div></td></tr></table></figure></li></ul><h4 id="五-configparser模块"><a href="#五-configparser模块" class="headerlink" title="五.configparser模块"></a>五.configparser模块</h4><p>​    该模块用于配置文件的格式与windows ini文件类似，可以包含多个章节（section）每个可以节可以有多个参数</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">[DEFAULT] <br>ServerAliveInterval = <span class="hljs-number">45</span><br>Compression = yes <br>CompressionLevel = <span class="hljs-number">9</span> <br>ForwardX11 = yes<br><br>[bitbucket.org]<br>User = hg<br><br>[topsecret.server.com] <br>Port = <span class="hljs-number">50022</span> <br>ForwardX11 = no<br></code></pre></div></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> configparser<br><br>conf = configparser.ConfigParser()<br>conf[<span class="hljs-string">'DEFAULT'</span>] = &#123;<br>    <span class="hljs-string">'session-time-out'</span>:<span class="hljs-number">30</span>,<br>    <span class="hljs-string">'user-alive'</span>:<span class="hljs-number">60</span>,<br>    <span class="hljs-string">'connect-alive'</span>:<span class="hljs-number">10</span><br>&#125;<br><br>conf[<span class="hljs-string">'172-DB'</span>] = &#123;<br>    <span class="hljs-string">'ip'</span>:<span class="hljs-string">'172.16.10.20'</span>,<br>    <span class="hljs-string">'port'</span>: <span class="hljs-string">"3306"</span>,<br>    <span class="hljs-string">'username'</span>:<span class="hljs-string">'root'</span>,<br>     <span class="hljs-string">"password"</span>: <span class="hljs-string">"root"</span><br><br><br>&#125;<br>conf[<span class="hljs-string">'192-DB'</span>] = &#123;<br>    <span class="hljs-string">'ip'</span>:<span class="hljs-string">'192.168.10.10'</span>,<br>         <span class="hljs-string">'port'</span>: <span class="hljs-string">"3306"</span>,<br>                <span class="hljs-string">'username'</span>:<span class="hljs-string">'root'</span>,<br>                           <span class="hljs-string">"password"</span>:<span class="hljs-string">'toor'</span><br>&#125;<br><br>f = open(<span class="hljs-string">'db.ini'</span>,mode=<span class="hljs-string">'w'</span>)<br>conf.write(f) <span class="hljs-comment"># 写入文件</span><br>f.flush()<br>f.close()<br></code></pre></div></td></tr></table></figure><p>读取文件信息</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> configparser<br><br>conf = configparser.ConfigParser()<br>conf.read(<span class="hljs-string">'db.ini'</span>)<br><br>print(conf.sections()) <span class="hljs-comment"># 获取章节keys()</span><br>print(conf[<span class="hljs-string">'172-DB'</span>][<span class="hljs-string">'ip'</span>]) <span class="hljs-comment">#跟字典一样</span><br><br><span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> conf[<span class="hljs-string">'172-DB'</span>].items():<br>    print(k,v)<br><br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> conf[<span class="hljs-string">'192-DB'</span>].values():<br>    print(key)<br></code></pre></div></td></tr></table></figure><p>​    增删改查</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#增删改查</span><br><br><span class="hljs-keyword">import</span> configparser<br><br>conf = configparser.ConfigParser()<br><br><span class="hljs-comment">#添加一个章节</span><br>conf.read(<span class="hljs-string">'db.ini'</span>) <span class="hljs-comment">#读取文件</span><br><br>conf.add_section(<span class="hljs-string">'10-DB'</span>)<br><span class="hljs-comment">#添加章节信息</span><br>conf[<span class="hljs-string">'10-DB'</span>] = &#123;<br>    <span class="hljs-string">"ip"</span>: <span class="hljs-string">'10.15.20.12'</span>,<br>    <span class="hljs-string">'user'</span>: <span class="hljs-string">'root'</span>,<br>    <span class="hljs-string">'psw'</span>: <span class="hljs-string">'toor'</span>,<br>&#125;<br>conf.write(open(<span class="hljs-string">"db.ini"</span>, mode=<span class="hljs-string">"w"</span>))<br><br>修改信息<br>conf.set(<span class="hljs-string">'10-DB'</span>,<span class="hljs-string">"ip"</span>,<span class="hljs-string">'192.168.255.255'</span>)<br><br><span class="hljs-comment">#删除章节</span><br>conf.remove_section(<span class="hljs-string">"10-DB"</span>)<br><br><span class="hljs-comment">#删除元素信息</span><br>conf.remove_option(<span class="hljs-string">'10-DB'</span>,<span class="hljs-string">'psw'</span>)<br><br><br><br><span class="hljs-comment">#最后都需要写回文件</span><br>conf.write(open(<span class="hljs-string">"db.ini"</span>, mode=<span class="hljs-string">"w"</span>))<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python常用模块01</title>
    <link href="/2018/10/07/python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%9701/"/>
    <url>/2018/10/07/python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%9701/</url>
    
    <content type="html"><![CDATA[<h4 id="一-模块的简单认识"><a href="#一-模块的简单认识" class="headerlink" title="一.模块的简单认识"></a>一.模块的简单认识</h4><p>​    什么是模块。模块就是我们把特定功能的代码进行归类的结果。: ⼀一条代码 &lt; 语句句块 &lt; 代码块(函数, 类) &lt; 模块 我们写py文件也是模块。切记，自己的写的模块，不要和python冲突。</p><p>引入模块的方式：</p><ul><li><code>import</code> 模块</li><li><code>from xxx import</code> 模块</li></ul><h4 id="二-collections-模块"><a href="#二-collections-模块" class="headerlink" title="二.collections 模块"></a>二.collections 模块</h4><p>Collections 模块主要封装一些关于集合的相关操作。比如 Iterable, Iterator.</p><blockquote><p>Iterable: 可迭代对象. 内部包含<strong>iter</strong>()函数<br>Iterator: 迭代器. 内部包含<strong>iter</strong>() 同时包含<strong>next</strong>().</p></blockquote><ol><li><p>Counter 是一个计数器。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#统计下字符出现的次数</span><br>low：<br>s = <span class="hljs-string">'sadfsdfsdfdsfsdfghgjghxczvcvcvnjsqero'</span><br>dic = &#123;&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>    dic[i] = dic.get(i,<span class="hljs-number">0</span>)  +<span class="hljs-number">1</span> <span class="hljs-comment">#dic.get(i,0) 如果值不存在就返回0  </span><br><br>print(dic)    <br><span class="hljs-comment">#模块中</span><br><br>nb：<br>s = <span class="hljs-string">'sadfsdfsdfdsfsdfghgjghxczvcvcvnjsqero'</span><br><br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Counter<br>c = Counter(s) <span class="hljs-comment">#创建一个Counter 对象</span><br><br><br>print(c)<br>print(c[<span class="hljs-string">"s"</span>]) <span class="hljs-comment"># 用起来和字典差不多</span><br></code></pre></div></td></tr></table></figure></li><li><p><code>deque</code> 双向队列.</p></li></ol><p>   说双向队列之前我们需要了解两种数据结构. 1. 栈, 2.  队列</p><ul><li><p>队列: 先进先出 First In Fisrt out #谁先进去，谁先处理。如买票，抢红包</p></li><li><p>栈：先进后出 First In Last out #堆？ 砌墙的砖头，拆的话会是后面的先出</p></li></ul>   <figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">##只做学习样本，无实际意义</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StackFullError</span><span class="hljs-params">(Exception)</span>:</span><br>    <span class="hljs-keyword">pass</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StackEmptyError</span><span class="hljs-params">(Exception)</span>:</span><br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Stack</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,size)</span>:</span><br>        self.index = <span class="hljs-number">0</span> <span class="hljs-comment">#栈顶指针</span><br>        self.size = size<br>        self.lst = [] <span class="hljs-comment"># 容器</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">push</span><span class="hljs-params">(self,el)</span>:</span> <span class="hljs-comment">#放</span><br>        <span class="hljs-keyword">if</span> self.index &lt; self.size: <span class="hljs-comment">#为装满</span><br>            self.lst.insert(self.index,el)<br>            self.index  += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>: <span class="hljs-comment">#装满了</span><br>            <span class="hljs-keyword">raise</span> StackFullError(<span class="hljs-string">"the stack is full!"</span>)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pop</span><span class="hljs-params">(self)</span>:</span> <span class="hljs-comment"># 取</span><br>        <span class="hljs-keyword">if</span> self.index &gt; <span class="hljs-number">0</span> :<br>            self.index -= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">return</span> self.lst[self.index]<br>        <span class="hljs-keyword">else</span>: <span class="hljs-comment">#空了</span><br>            <span class="hljs-keyword">raise</span> StackEmptyError(<span class="hljs-string">"the stack is empty!"</span>)<br><br><br><span class="hljs-comment">#使用</span><br><span class="hljs-comment">#实例化</span><br>s = Stack(<span class="hljs-number">5</span>)<br><br>s.push(<span class="hljs-string">"馒头1"</span>)<br>print(s.pop())<br>s.push(<span class="hljs-string">"馒头3"</span>)<br>s.push(<span class="hljs-string">"馒头4"</span>)<br>s.push(<span class="hljs-string">"馒头5"</span>)<br>print(s.index)<br>print(s.pop())<br>print(s.index)<br></code></pre></div></td></tr></table></figure><p>   队列：python提供<code>queue</code></p>   <figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">improt queue<br><br>q = queue.Queue() <span class="hljs-comment"># 创建队列</span><br>q.put(<span class="hljs-string">'go'</span>) <span class="hljs-comment">#放入元素</span><br>q.put(<span class="hljs-string">'a'</span>)<br>q.put(<span class="hljs-string">'b'</span>)<br><br>print(q.get()) <span class="hljs-comment">#</span><br>print(q.get())<br>print(q.get())<br>print(q.get())  <span class="hljs-comment"># 在等下一个元素。 阻塞</span><br></code></pre></div></td></tr></table></figure><p>   <code>deque</code></p>   <figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<br><br>d = deque() <span class="hljs-comment"># 创建双向队列</span><br><br><br>d.append(<span class="hljs-string">"普罗米修斯"</span>) <span class="hljs-comment"># 默认右侧添加</span><br>d.append(<span class="hljs-string">"影"</span>)<br>d.append(<span class="hljs-string">"星际穿越"</span>)<br>d.append(<span class="hljs-string">"契约"</span>)<br>print(d)<br>d.appendleft(<span class="hljs-string">'赌徒默示录'</span>) <span class="hljs-comment"># 左侧添加</span><br>print(d)<br>d.pop() <span class="hljs-comment"># 从右边删除</span><br>print(d)<br></code></pre></div></td></tr></table></figure><ol start="3"><li><p><code>Namedtuple</code> 命名元祖</p><p>给元祖内的元素进行命名。比如元祖有两个数，就以坐标形式对元素命名。使用<code>namedtuple</code> 对元素进行命名</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> namedtuple<br><br>po = namedtuple(<span class="hljs-string">'Point'</span>,[<span class="hljs-string">'x'</span>,<span class="hljs-string">'y'</span>]) <span class="hljs-comment">#定义了一个类</span><br>p = po(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>) <span class="hljs-comment">#命名元祖</span><br>print(p)<br>print(p.x)<br>print(p.y)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span>  <span class="hljs-title">Point</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,x,y)</span>:</span><br>        self.x = x<br>        self.y = y<br></code></pre></div></td></tr></table></figure></li><li><p><code>orderdict</code>  和<code>defaultdict</code></p><p><code>orderdict</code>  顾名思义. 字典的key默认是无序的. 而<code>OrderedDict</code> 是有序的</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">python3<span class="hljs-number">.6</span> 以上使用的新算法，来自与pypy，节约<span class="hljs-number">20</span><span class="hljs-number">-30</span>%内存<br>d = &#123;<span class="hljs-string">'a'</span>:<span class="hljs-number">1</span>,<span class="hljs-string">'c'</span>:<span class="hljs-number">2</span>,<span class="hljs-string">'b'</span>:<span class="hljs-number">3</span>&#125;<br>print(d)<br><br><br><br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> OrderedDict<br><br>od = OrderedDict(&#123;<span class="hljs-string">'a'</span>:<span class="hljs-number">1</span>,<span class="hljs-string">'c'</span>:<span class="hljs-number">2</span>,<span class="hljs-string">'b'</span>:<span class="hljs-number">3</span>&#125;)<br>print(od.get(<span class="hljs-string">'a'</span>))<br><br>print(od[<span class="hljs-string">'b'</span>])<br></code></pre></div></td></tr></table></figure><p><code>defaultdict</code> 可以给字典设置默认值。当key不存在时，直接获取默认值。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><br><br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict<br>d = defaultdict(list) <span class="hljs-comment"># &#123;&#125;list() 必须callable</span><br>d[<span class="hljs-string">'张国荣'</span>] = <span class="hljs-string">'倩女幽魂'</span><br>print(d[<span class="hljs-string">'张国荣'</span>])<br>print(d[<span class="hljs-string">'宝宝'</span>]) <span class="hljs-comment"># 当key不存在的时候，返回默认值,其实就是callable()</span><br><br><br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict<br>lst  = [<span class="hljs-number">1123</span>,<span class="hljs-number">132</span>,<span class="hljs-number">33</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">56</span>,<span class="hljs-number">123</span>,<span class="hljs-number">100</span>,<span class="hljs-number">13223</span>,<span class="hljs-number">44</span>,<span class="hljs-number">55</span>]<br><br>d = defaultdict(list)<br><br><span class="hljs-keyword">for</span> el <span class="hljs-keyword">in</span> lst:<br>    <span class="hljs-keyword">if</span> el &gt; <span class="hljs-number">66</span>:<br>        d[<span class="hljs-string">'key1'</span>].append(el)<br>    <span class="hljs-keyword">else</span>:<br>        d[<span class="hljs-string">'key2'</span>].append(el)<br>print(d)<br><br><span class="hljs-comment">#以下代码时相同思路。</span><br><br>cars = [<span class="hljs-string">"鲁A 10086"</span>, <span class="hljs-string">"黑A 45678"</span>, <span class="hljs-string">"黑C 12345"</span>, <span class="hljs-string">"京B 00001"</span>, <span class="hljs-string">"京C 78912"</span>, <span class="hljs-string">"京A 66666"</span>]<br>locations = &#123;<span class="hljs-string">"鲁"</span>: <span class="hljs-string">"山东"</span>, <span class="hljs-string">"黑"</span>: <span class="hljs-string">"黑龙江"</span>, <span class="hljs-string">"京"</span>: <span class="hljs-string">"北京"</span>, <span class="hljs-string">"沪"</span>: <span class="hljs-string">"上海"</span>&#125;<br>dic = &#123;&#125;<br><br><span class="hljs-keyword">for</span> car <span class="hljs-keyword">in</span> cars: <span class="hljs-comment"># 每个车牌子 鲁A 10086</span><br>    paitou = car[<span class="hljs-number">0</span>] <span class="hljs-comment"># 鲁</span><br>    <span class="hljs-comment"># if dic.get(locations[paitou]) == None:</span><br>    <span class="hljs-comment">#     dic[locations[paitou]] = 1</span><br>    <span class="hljs-comment"># else:</span><br>    <span class="hljs-comment">#     dic[locations[paitou]] = dic[locations[paitou]]+1</span><br><br>    <span class="hljs-comment"># 省份 # "山东": 1, "黑龙江":1</span><br>    <span class="hljs-comment"># num = dic.get(locations[paitou], 0)</span><br>    <span class="hljs-comment"># num = num + 1</span><br>    <span class="hljs-comment"># dic[locations[paitou]] = num</span><br><br>    dic[locations[paitou]] = dic.setdefault(locations[paitou], <span class="hljs-number">0</span>) + <span class="hljs-number">1</span><br><br>print(dic)<br><br><br><br>lst  = [<span class="hljs-number">1123</span>,<span class="hljs-number">132</span>,<span class="hljs-number">33</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">56</span>,<span class="hljs-number">123</span>,<span class="hljs-number">100</span>,<span class="hljs-number">13223</span>,<span class="hljs-number">44</span>,<span class="hljs-number">55</span>]<br>dic = &#123;&#125;<br><span class="hljs-keyword">for</span> el <span class="hljs-keyword">in</span> lst:<br>    <span class="hljs-keyword">if</span> el &gt; <span class="hljs-number">66</span>:<br>        dic.setdefault(<span class="hljs-string">'key1'</span>,[]).append(el)<br><br>    <span class="hljs-keyword">else</span>:<br>        dic.setdefault(<span class="hljs-string">'key2'</span>,[]).append(el)<br>print(dic)<br></code></pre></div></td></tr></table></figure></li></ol><h4 id="三-时间模块"><a href="#三-时间模块" class="headerlink" title="三.时间模块"></a>三.时间模块</h4><p>​    时间模块，用与计算时间差，按客户要就展示时间…等</p><p>在python中时间分为三种表现形式：</p><ol><li><p><strong>时间戳（timestamp）</strong> 时间戳使用的是1970年01月01日 00点00分00秒到现在经历了多少秒用，float表示</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br>print(time.time()) <span class="hljs-comment"># 1538991585.099336 系统时间戳</span><br></code></pre></div></td></tr></table></figure></li><li><p><strong>格式化时间 (strfime)</strong> 可根据需要进行任意格式化</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">print(time.strftime(<span class="hljs-string">'%Y-%m-%d %H:%M:%S'</span>)) <span class="hljs-comment">#年月日，时分秒</span><br></code></pre></div></td></tr></table></figure><p>日期格式化标准</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">%y 两位数的年份表示（<span class="hljs-number">00</span><span class="hljs-number">-99</span>）<br>%Y 四位数的年份表示（<span class="hljs-number">000</span><span class="hljs-number">-9999</span>） <br>%m ⽉份（<span class="hljs-number">01</span><span class="hljs-number">-12</span>） <br>%d ⽉内中的⼀天（<span class="hljs-number">0</span><span class="hljs-number">-31</span>）<br>%H <span class="hljs-number">24</span>⼩时制⼩时数（<span class="hljs-number">0</span><span class="hljs-number">-23</span>）<br>%I <span class="hljs-number">12</span>⼩时制⼩时数（<span class="hljs-number">01</span><span class="hljs-number">-12</span>）<br>%M 分钟数（<span class="hljs-number">00</span>=<span class="hljs-number">59</span>）<br>%S 秒（<span class="hljs-number">00</span><span class="hljs-number">-59</span>） <br>%a 本地简化星期名称 <br>%A 本地完整星期名称<br>%b 本地简化的⽉份名称<br>%B 本地完整的⽉份名称 <br>%c 本地相应的⽇期表示和时间表示 <br>%j 年内的⼀天（<span class="hljs-number">001</span><span class="hljs-number">-366</span>） <br>%p 本地A.M.或P.M.的等价符 <br>%U ⼀年中的星期数（<span class="hljs-number">00</span><span class="hljs-number">-53</span>）星期天为星期的开始 <br>%w 星期（<span class="hljs-number">0</span><span class="hljs-number">-6</span>），星期天为星期的开始<br>%W ⼀年中的星期数（<span class="hljs-number">00</span><span class="hljs-number">-53</span>）星期⼀为星期的开始 <br>%x 本地相应的⽇期表示 %X 本地相应的时间表示<br>%Z 当前时区的名称 %<br>% %号本身<br><br>看⼀下结构化时间:<br></code></pre></div></td></tr></table></figure></li><li><p><strong>结构化时间（struct_time)</strong> </p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">print(time.localtime()) 结果:<br><br>time.struct_time(tm_year=<span class="hljs-number">2017</span>, tm_mon=<span class="hljs-number">05</span>, tm_mday=<span class="hljs-number">8</span>, tm_hour=<span class="hljs-number">10</span>, tm_min=<span class="hljs-number">24</span>, tm_sec=<span class="hljs-number">42</span>, tm_wday=<span class="hljs-number">0</span>, tm_yday=<span class="hljs-number">126</span>, tm_isdst=<span class="hljs-number">0</span>)<br></code></pre></div></td></tr></table></figure></li></ol><p><strong>转换时间</strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">##时间戳 -&gt; 格式化时间</span><br><br><span class="hljs-comment">#1。把时间戳转化成结构化时间</span><br>f = <span class="hljs-number">188888888</span><br>st = time.localtime(f) <span class="hljs-comment">#结构化时间</span><br>print(st)<br><span class="hljs-comment">#2。结构化时间转 格式化时间</span><br>t = time.strftime(<span class="hljs-string">'%Y-%m-%d %H:%M:%S '</span>,st)<br>print(t)<br><br><span class="hljs-comment">#格式化转为时间戳</span><br>s = <span class="hljs-string">"1975-12-27 13:08:08 "</span> <br>t = time.strptime(s, <span class="hljs-string">"%Y-%m-%d %H:%M:%S"</span>) <span class="hljs-comment">#转为结构化</span><br>print(time.mktime(t)) <span class="hljs-comment"># 转换成时间戳</span><br></code></pre></div></td></tr></table></figure><h4 id="四-random模块"><a href="#四-random模块" class="headerlink" title="四. random模块"></a>四. random模块</h4><p>随机相关</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><br>print(random.random()) <span class="hljs-comment"># 0-1⼩数 </span><br><br>print(random.uniform(<span class="hljs-number">3</span>, <span class="hljs-number">10</span>)) <span class="hljs-comment"># 3-10⼩数</span><br><br>print(random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)) <span class="hljs-comment"># 1-10整数 [1, 10]</span><br><br>print(random.randrange(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>)) <span class="hljs-comment"># 1-10奇数 [1,10)</span><br><br>print(random.choice([<span class="hljs-number">1</span>, <span class="hljs-string">'周杰伦'</span>, [<span class="hljs-string">"盖伦"</span>, <span class="hljs-string">"胡辣汤"</span>]])) <span class="hljs-comment"># 1或者23或者[4,5]) </span><br><br>print(random.sample([<span class="hljs-number">1</span>, <span class="hljs-string">'23'</span>, [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>]], <span class="hljs-number">2</span>)) <span class="hljs-comment"># 列表元素任意2个组合</span><br><br>lst = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>] random.shuffle(lst) <span class="hljs-comment"># 随机打乱顺序 print(lst)</span><br></code></pre></div></td></tr></table></figure><h4 id="五-os模块"><a href="#五-os模块" class="headerlink" title="五.os模块"></a>五.os模块</h4><p>所有操作系统相关os模式</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">os.makedirs('dirname1/dirname2') 可⽣成多层递归⽬录 <br>os.removedirs('dirname1') 若⽬录为空，则删除，并递归到上⼀级⽬录，如若也为空，则删 除，依此类推 os.mkdir('dirname') ⽣成单级⽬录；相当于shell中mkdir dirname <br>os.rmdir('dirname') 删除单级空⽬录，若⽬录不为空则⽆法删除，报错；相当于shell中 rmdir dirname os.listdir('dirname') 列出指定⽬录下的所有⽂件和⼦⽬录，包括隐藏⽂件，并以列表⽅式 打印<br>os.remove() 删除⼀个⽂件 os.rename("oldname","newname") 重命名⽂件/⽬录 <br>os.stat('path/filename') 获取⽂件/⽬录信息<br><br>os.system("bash command") 运⾏shell命令，直接显示 <br>os.popen("bash command).read() 运⾏shell命令，获取执⾏结果<br>os.getcwd() 获取当前⼯作⽬录，即当前python脚本⼯作的⽬录路径 <br>os.chdir("dirname") 改变当前脚本⼯作⽬录；相当于shell下cd<br><br># os.path os.path.abspath(path) 返回path规范化的绝对路径<br>         <br>os.path.split(path) 将path分割成⽬录和⽂件名⼆元组返回<br>os.path.dirname(path) 返回path的⽬录。其实就是 #b = os.path.dirname(os.path.dirname(__file__)) #上一级目录<br>os.path.split(path)的第⼀个元素 <br>os.path.basename(path) 返回path最后的⽂件名。如何path以／或\结尾，那么就会返回空值。 即`os.path.split(path)的第⼆个元素<br>os.path.exists(path) 如果path存在，返回True；如果path不存在，返回False <br>os.path.isabs(path) 如果path是绝对路径，返回True <br>os.path.isfile(path) 如果path是⼀个存在的⽂件，返回True。否则返回False <br>os.path.isdir(path) 如果path是⼀个存在的⽬录，则返回True。否则返回False <br>os.path.join(path1[, path2[, ...]]) 将多个路径组合后返回，第⼀个绝对路径之前的参数 将被忽略 os.path.getatime(path) 返回path所指向的⽂件或者⽬录的最后访问时间<br>os.path.getmtime(path) 返回path所指向的⽂件或者⽬录的最后修改时间 <br>os.path.getsize(path) 返回path的⼤⼩<br><br># 特殊属性: os.sep os.linesep os.pathsep os.name<br><br>输出操作系统特定的路径分隔符，win下为"\\",Linux下为"/"<br><br>输出当前平台使⽤的⾏终⽌符，win下为"\r\n",Linux下为"\n" 输出⽤于分割⽂件路径的字符串 win下为;,Linux下为: 输出字符串指示当前使⽤平台。win-&gt;'nt'; Linux,mac -&gt;'posix'<br></code></pre></div></td></tr></table></figure><p>Python 的 os 模块封装了常见的文件和目录操作，本文只列出部分常用的方法，更多的方法可以查看<a href="https://docs.python.org/3/library/os.path.html" target="_blank" rel="noopener">官方文档</a>。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">方法说明<br>os.mkdir 创建目录<br>os.rmdir 删除目录<br> os.rename 重命名<br>os.remove删除文件<br> os.getcwd获取当前工作路径<br>os.walk遍历目录<br>os.path.join连接目录与文件名<br>os.path.split分割文件名与目录<br>os.path.abspath获取绝对路径<br>os.path.dirname获取路径<br>os.path.basename获取文件名或文件夹名<br>os.path.splitext分离文件名与扩展名<br>os.path.isfile判断给出的路径是否是一个文件<br>os.path.isdir判断给出的路径是否是一个目录<br></code></pre></div></td></tr></table></figure><h5 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h5><ul><li><a href="http://www.cnblogs.com/rollenholt/archive/2012/04/23/2466179.html" target="_blank" rel="noopener">关于python文件操作 - Rollen Holt</a></li><li><a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0013868321590543ff305fb9f9949f08d760883cc243812000" target="_blank" rel="noopener">操作文件和目录 - 廖雪峰的官方网站</a></li><li><a href="http://blog.csdn.net/bagboy_taobao_com/article/details/893" target="_blank" rel="noopener">Python os.walk的用法与举例</a></li></ul><h5 id="os-stat-属性解读"><a href="#os-stat-属性解读" class="headerlink" title="os.stat()属性解读"></a>os.stat()属性解读</h5><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">stat 结构:<br><br>st_mode: inode 保护模式 <br>st_ino: inode 节点号。 <br>st_dev: inode 驻留的设备。 <br>st_nlink: inode 的链接数。 <br>st_uid: 所有者的⽤户ID。 <br>st_gid: 所有者的组ID。<br>st_size: 普通⽂件以字节为单位的⼤⼩；包含等待某些特殊⽂件的数据。 <br>st_atime: 上次访问的时间。 <br>st_mtime: 最后⼀次修改的时间。 <br>st_ctime: 由操作系统报告的<span class="hljs-string">"ctime"</span>。在某些系统上（如Unix）是最新的元数据更改的时间，在 其它系统上（如Windows）是创建时间（详细信息参⻅见平台的⽂档）。<br></code></pre></div></td></tr></table></figure><h4 id="六-sys模块"><a href="#六-sys模块" class="headerlink" title="六.sys模块"></a>六.sys模块</h4><p>所有和python解释器sys模块</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">sys.argv 命令⾏参数List，第⼀个元素是程序本身路径<br>sys.exit(n)退出程序，正常退出时exit(<span class="hljs-number">0</span>),错误退出sys.exit(<span class="hljs-number">1</span>)<br>sys.version  获取Python解释程序的版本信息 <br><br>sys.path   返回模块的搜索路径，初始化时使⽤PYTHONPATH环境变量的值 <span class="hljs-comment">#谨慎操作</span><br>sys.platform   返回操作系统平台名称<br><br>print(sys.modules.keys())<br>print(sys.path.append)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python类与类之间的关系(3)</title>
    <link href="/2018/09/27/Python%E7%B1%BB%E4%B8%8E%E7%B1%BB%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB(3)/"/>
    <url>/2018/09/27/Python%E7%B1%BB%E4%B8%8E%E7%B1%BB%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB(3)/</url>
    
    <content type="html"><![CDATA[<p>#####类方法静态方法区别</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Num</span>:</span><br>    <span class="hljs-comment">#普通方法：能用Num调用而不能用实例化对象调用    </span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">one</span><span class="hljs-params">()</span>:</span>   <br>        <span class="hljs-keyword">print</span> (<span class="hljs-string">'1'</span>)<br><br>    <span class="hljs-comment">#实例方法：能用实例化对象调用而不能用Num调用</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">two</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">print</span> (<span class="hljs-string">'2'</span>)<br><br>    <span class="hljs-comment">#静态方法：能用Num和实例化对象调用</span><br><span class="hljs-meta">    @staticmethod  </span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">three</span><span class="hljs-params">()</span>:</span>   <br>        <span class="hljs-keyword">print</span> (<span class="hljs-string">'3'</span>)<br><br>    <span class="hljs-comment">#类方法：第一个参数cls长什么样不重要，都是指Num类本身，调用时将Num类作为对象隐式地传入方法    </span><br><span class="hljs-meta">    @classmethod  </span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">go</span><span class="hljs-params">(cls)</span>:</span>  <br>        cls.three()  <br><br>Num.one()       <span class="hljs-comment">#1</span><br><span class="hljs-comment">#Num.two()     #TypeError: two() missing 1 required positional argument: 'self'</span><br>Num.three()    <span class="hljs-comment">#3</span><br>Num.go()         <span class="hljs-comment">#3</span><br><br>i=Num()                 <br><span class="hljs-comment">#i.one()           #TypeError: one() takes 0 positional arguments but 1 was given          </span><br>i.two()             <span class="hljs-comment">#2       </span><br>i.three()          <span class="hljs-comment">#3</span><br>i.go()              <span class="hljs-comment">#3</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python约束和异常处理,Md5,日志处理</title>
    <link href="/2018/09/27/%20Python%E7%BA%A6%E6%9D%9F%E5%92%8C%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86,Md5,%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86/"/>
    <url>/2018/09/27/%20Python%E7%BA%A6%E6%9D%9F%E5%92%8C%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86,Md5,%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/python/python_exception.png" srcset="/img/loading.gif" lazyload alt></p><h4 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">chufa</span><span class="hljs-params">(a,b)</span>:</span><br>    <span class="hljs-keyword">try</span>: <span class="hljs-comment">#尝试执行XX代码</span><br>        ret = a/b <span class="hljs-comment">#如果这里出现了错误.异常.</span><br>        <span class="hljs-comment">#系统内部会产生一个异常对象. 系统会把这个错误抛出,</span><br>        <span class="hljs-comment">#抛出给调用方</span><br>        <span class="hljs-keyword">return</span> ret<br>    <span class="hljs-comment"># except ZeroDivisionError as e:</span><br>    <span class="hljs-comment">#except ZeroDivisionErro as e: # 内部产生的所有异常都会被捕获 #捕获的异常对象会交给e</span><br>    <span class="hljs-comment">#    print(e)</span><br>    <span class="hljs-comment">#    print("出错,0不能是除数")</span><br>    <span class="hljs-comment"># except FileExistsError as e:</span><br>    <span class="hljs-comment"># except StopIteration as e:</span><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-comment">#except:   #同 except Exception #所有异常</span><br>        print(e)<br>        print(<span class="hljs-string">"出错了"</span>)<br><br>    <span class="hljs-keyword">else</span>: <span class="hljs-comment">#保护不抛出异常的代码,当try 中无异常的时候执行</span><br><br><br>    <span class="hljs-keyword">finally</span>: <span class="hljs-comment">#最好总会执行部分</span><br><br>    <span class="hljs-comment"># return a/b</span><br>ret = chufa(<span class="hljs-number">5</span>,<span class="hljs-number">0</span>)<br>print(ret)<br><br><br><span class="hljs-comment">#计算两个整数的加法</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(a, b)</span>:</span><br>    <span class="hljs-keyword">if</span> type(a)!=int <span class="hljs-keyword">or</span> type(b) != int:<br>        <span class="hljs-comment"># return</span><br>        <span class="hljs-comment"># return Exception</span><br>        <span class="hljs-keyword">raise</span> TypeError(<span class="hljs-string">"我这里只要int, 不要别的类型"</span>)<br>    <span class="hljs-keyword">return</span> a + b<br><br>add(<span class="hljs-number">123</span>, <span class="hljs-string">"abc"</span><br></code></pre></div></td></tr></table></figure><h4 id="自定义异常返回"><a href="#自定义异常返回" class="headerlink" title="自定义异常返回"></a>自定义异常返回</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenderError</span><span class="hljs-params">(Exception)</span>:</span><br>    <span class="hljs-keyword">pass</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,name,gender)</span>:</span><br>        self.name = name<br>        self.gender = gender<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">xi</span><span class="hljs-params">(per)</span>:</span><br>    <span class="hljs-keyword">if</span> per.gender != <span class="hljs-string">'男'</span>:<br>        <span class="hljs-keyword">raise</span> GenderError(<span class="hljs-string">"这里是男澡堂"</span>)<br>    <span class="hljs-keyword">else</span>:<br>        print(<span class="hljs-string">"进去了"</span>)<br>p1 = Person(<span class="hljs-string">'tudou'</span>,<span class="hljs-string">"不详"</span>)<br>p2 = Person(<span class="hljs-string">'mantou'</span>,<span class="hljs-string">'男'</span>)<br><br><br><span class="hljs-keyword">import</span> traceback <span class="hljs-comment"># 导入模块</span><br><span class="hljs-keyword">try</span>:<br>    xi(p2)<br><span class="hljs-keyword">except</span> GenderError <span class="hljs-keyword">as</span> g:<br>    print(g)<br>    val = traceback.format_exc() <span class="hljs-comment">#获取堆栈信息</span><br>    print(val)<br></code></pre></div></td></tr></table></figure><h4 id="类的约束"><a href="#类的约束" class="headerlink" title="类的约束"></a>类的约束</h4><p>约束是对子类进行的约束。</p><ul><li>在父类中给出一个方法。 这个方法中什么都不写。 就抛异常。 <code>NotImplementError()</code></li><li>在子类中把上述的方法进行重写。</li><li>在子类中把上述的方法进行重写。</li></ul><ol><li><p>python中有两种办法来解决这样的问题.</p><blockquote><p>提取父类. 然后在父类中定义好方法. 在这个方法中什么都不用干. 就抛一个异常就可以了. 这样所有的子类都必须重写这个方法. 否则. 访问的时候就会报错.</p></blockquote></li></ol><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-comment">#raise Exception("没有实现login方法")</span><br>        <span class="hljs-keyword">raise</span> NotImplementedError(<span class="hljs-string">"没有实现login方法"</span>) <span class="hljs-comment">#专业的写法</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">kantie</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">raise</span> Gk(<span class="hljs-string">"没有看帖功能"</span>)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Normal</span><span class="hljs-params">(Base)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login</span><span class="hljs-params">(self)</span>:</span><br>        print(<span class="hljs-string">"普通人登录"</span>)<br><br> <span class="hljs-comment">## 李四写</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Menber</span><span class="hljs-params">(Base)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">l</span><span class="hljs-params">(self)</span>:</span><br>        print(<span class="hljs-string">"吧务登录"</span>)<br><br> <span class="hljs-comment">## 王八</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Admin</span><span class="hljs-params">(Base)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login</span><span class="hljs-params">(self)</span>:</span><br>        print(<span class="hljs-string">"管理员登录"</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login</span><span class="hljs-params">(obj)</span>:</span><br>    print(<span class="hljs-string">"产生验证码"</span>)<br>    obj.login()<br>    print(<span class="hljs-string">"进入主页"</span>)<br> <span class="hljs-comment">## 场景</span><br><br><br>n = Normal()<br>m = Menber()<br>a = Admin()<br><br>login(n)<br>login(m)<br>login(a)<br></code></pre></div></td></tr></table></figure><ol start="2"><li><blockquote><p>使⽤用元类来描述父类. 在元类中给出一个抽象方法. 这样子类就不得不给出抽象方法的具体实现. 也可以起到约束的效果.</p></blockquote><p>python中编写⼀一个抽象类比较⿇麻烦. 需要引入abc模块中的ABCMeta和<br>abstractmethod这两个内容. 来我们看一个例例⼦子.</p></li></ol><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><br><span class="hljs-keyword">from</span> abc <span class="hljs-keyword">import</span> ABCMeta,abstractmethod<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span><span class="hljs-params">(metaclass=ABCMeta)</span>:</span><br><span class="hljs-meta">    @abstractmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login</span><span class="hljs-params">(self)</span>:</span><span class="hljs-keyword">pass</span><br><br><br><span class="hljs-comment"># 张三</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Normal</span><span class="hljs-params">(Base)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login</span><span class="hljs-params">(self)</span>:</span><br>        print(<span class="hljs-string">"::普通人登陆"</span>)<br><br><span class="hljs-comment"># 李四</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Member</span><span class="hljs-params">(Base)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login</span><span class="hljs-params">(self)</span>:</span><br>        print(<span class="hljs-string">"::吧务登陆"</span>)<br><br><span class="hljs-comment"># 王五</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Admin</span><span class="hljs-params">(Base)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login</span><span class="hljs-params">(self)</span>:</span><br>        print(<span class="hljs-string">"::管理员登陆"</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login</span><span class="hljs-params">(obj)</span>:</span><br>    print(<span class="hljs-string">"1.产生验证码"</span>)<br>    obj.login() <span class="hljs-comment"># 标准在这里.  必须由login</span><br>    print(<span class="hljs-string">"3.进入主页"</span>)<br><br><span class="hljs-comment"># 场景</span><br>n = Normal()<br>m = Member()<br>a = Admin()<br>login(n)<br>login(m)<br>login(a)<br></code></pre></div></td></tr></table></figure><p>​   </p><blockquote><p>总结: 约束. 其实就是⽗类对⼦类进行约束. 子类必须要写xxx方法. 在python中约束的</p></blockquote><p>方式和方法有两种:</p><ol><li>使用抽象类和抽象方法, 由于该方案来源是java和c#. 所以使用频率还是很少的</li><li>使用人为抛出异常的方案. 并且尽量量抛出的是NotImplementError. 这样比较专业, 而且错误比较明确.(推荐)</li></ol><h4 id="异常类型"><a href="#异常类型" class="headerlink" title="异常类型"></a>异常类型</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">AttributeError 试图访问一个对象没有的树形，比如foo.x，但是foo没有属性x<br>IOError 输入/输出异常；基本上是无法打开文件<br>ImportError 无法引入模块或包；基本上是路径问题或名称错误<br>IndentationError 语法错误（的子类） ；代码没有正确对齐<br>IndexError 下标索引超出序列边界，比如当x只有三个元素，却试图访问x[<span class="hljs-number">5</span>]<br>KeyError 试图访问字典里不存在的键<br>KeyboardInterrupt Ctrl+C被按下<br>NameError 使用一个还未被赋予对象的变量<br>SyntaxError Python代码非法，代码不能编译(个人认为这是语法错误，写错了）<br>TypeError 传入对象类型与要求的不符合<br>UnboundLocalError 试图访问一个还未被设置的局部变量，基本上是由于另有一个同名的全局变量，<br>导致你以为正在访问它<br>ValueError 传入一个调用者不期望的值，即使值的类型是正确的<br><br>常用异常<br></code></pre></div></td></tr></table></figure><p>Exception 万能异常</p><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4>   <figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">chu</span><span class="hljs-params">(a, b)</span>:</span><br><span class="hljs-keyword">return</span> a/b<br>ret = chu(<span class="hljs-number">10</span>, <span class="hljs-number">0</span>)<br>print(ret)<br><br><span class="hljs-comment">###ZeroDivisionError: division by zero</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">chu</span><span class="hljs-params">(a, b)</span>:</span><br><span class="hljs-keyword">return</span> a/b<br><span class="hljs-keyword">try</span>:<br>ret = chu(<span class="hljs-number">10</span>, <span class="hljs-number">0</span>)<br>print(ret)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>print(<span class="hljs-string">"除数不不能是0"</span>)<br>结果:<br>除数不不能是<span class="hljs-number">0</span><br><br><br><br><span class="hljs-keyword">try</span>:<br>print(<span class="hljs-string">"各种操作...."</span>)<br><span class="hljs-keyword">except</span> ZeroDivisionError <span class="hljs-keyword">as</span> e:<br>print(<span class="hljs-string">"除数不不能是0"</span>)<br><span class="hljs-keyword">except</span> FileNotFoundError <span class="hljs-keyword">as</span> e:<br>print(<span class="hljs-string">"⽂文件不不存在"</span>)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>print(<span class="hljs-string">"其他错误"</span>)<br></code></pre></div></td></tr></table></figure><h4 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h4><blockquote><p>MD5是一种不可逆的加密算法. 它是可靠的. 并且安全的. 在python中我们不需要手写<br>这一套算法. 只需要引入一个叫hashlib的模块就能搞定MD5的加密工作</p></blockquote><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><span class="hljs-comment">#引入模块</span><br><span class="hljs-keyword">import</span> hashlib<br><br><br><span class="hljs-comment">#1.创建一个md5对象</span><br>obj = hashlib.md5()<br><span class="hljs-comment">#obj = hashlib.md5(b"3I31") #加..</span><br><br><span class="hljs-comment">#2.把要加密的内容给md5</span><br>obj.update(<span class="hljs-string">"root"</span>.encode(<span class="hljs-string">"utf-8"</span>)) <span class="hljs-comment">#必须是字节</span><br><br><span class="hljs-comment"># 3.获取密文</span><br><br>val = obj.hexdigest()<br>print(val)<br><span class="hljs-keyword">import</span>  hashlib<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">my_md5</span><span class="hljs-params">(yal)</span>:</span><br>    obj = hashlib.md5()<br>    obj.update(yal.encode(<span class="hljs-string">"utf-8"</span>))<br>    val = obj.hexdigest()<br>    <span class="hljs-keyword">return</span> val<br><br><br><span class="hljs-comment">#注册的时候,用md5 进行加密,</span><br><br>name = input(<span class="hljs-string">"name"</span>)<br>passwd = input(<span class="hljs-string">"passwd"</span>)<br><br><span class="hljs-comment">#ps = my_md5(passwd)</span><br><br><span class="hljs-keyword">if</span> name == <span class="hljs-string">"man"</span> <span class="hljs-keyword">and</span> my_md5(passwd) == <span class="hljs-string">"63a9f0ea7bb98050796b649e85481845"</span>:<br>    print(<span class="hljs-string">'go'</span>)<br><span class="hljs-keyword">else</span>:<br>    print(<span class="hljs-string">"n"</span>)<br></code></pre></div></td></tr></table></figure><p>使用实例</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><span class="hljs-comment"># python 检测文件MD5值</span><br><span class="hljs-comment"># python version 2.6</span><br><br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br><br><span class="hljs-comment"># 简单的测试一个字符串的MD5值</span><br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">md5sum</span><span class="hljs-params">(obj)</span>:</span><br>    hash = hashlib.md5()<br>    hash.update(obj.encode(<span class="hljs-string">'utf-8'</span>))<br>    <span class="hljs-keyword">return</span> hash.hexdigest()<span class="hljs-comment">#字符</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">GetStrMd5</span><span class="hljs-params">(src)</span>:</span><br>    m0 = hashlib.md5()<br>    m0.update(src)<br>    print(m0.hexdigest())<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-comment"># 大文件的MD5值</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">GetFileMd5</span><span class="hljs-params">(filename)</span>:</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.isfile(filename):<br>        <span class="hljs-keyword">return</span><br>    myhash = hashlib.md5()<br>    f = open(filename, <span class="hljs-string">'rb'</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">True</span>:<br>        b = f.read(<span class="hljs-number">8096</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> b:<br>            <span class="hljs-keyword">break</span><br>        myhash.update(b)<br>    f.close()<br>    <span class="hljs-keyword">return</span> myhash.hexdigest()<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">CalcSha1</span><span class="hljs-params">(filepath)</span>:</span><br>    <span class="hljs-keyword">with</span> open(filepath, <span class="hljs-string">'rb'</span>) <span class="hljs-keyword">as</span> f:<br>        sha1obj = hashlib.sha1()<br>        sha1obj.update(f.read())<br>        hash = sha1obj.hexdigest()<br>        print(hash)<br>        <span class="hljs-keyword">return</span> hash<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">CalcMD5</span><span class="hljs-params">(filepath)</span>:</span><br>    <span class="hljs-keyword">with</span> open(filepath, <span class="hljs-string">'rb'</span>) <span class="hljs-keyword">as</span> f:<br>        md5obj = hashlib.md5()<br>        md5obj.update(f.read())<br>        hash = md5obj.hexdigest()<br>        print(hash)<br>        <span class="hljs-keyword">return</span> hash<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:<br>    <span class="hljs-keyword">if</span> len(sys.argv) == <span class="hljs-number">2</span>:<br>        hashfile = sys.argv[<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(hashfile):<br>            hashfile = os.path.join(os.path.dirname(__file__), hashfile)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(hashfile):<br>                print(<span class="hljs-string">"cannot found file"</span>)<br>            <span class="hljs-keyword">else</span>:<br>                CalcMD5(hashfile)<br>        <span class="hljs-keyword">else</span>:<br>            CalcMD5(hashfile)<br>            <span class="hljs-comment"># raw_input("pause")</span><br>    <span class="hljs-keyword">else</span>:<br>        print(<span class="hljs-string">"no filename"</span>)<br></code></pre></div></td></tr></table></figure><h4 id="日志处理"><a href="#日志处理" class="headerlink" title="日志处理"></a>日志处理</h4><ol><li>导入logging模块.</li><li>简单配置⼀一下logging</li><li>出现异常的时候(except). 向⽇日志⾥里里写错误信息.</li></ol><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br>logging.basicConfig(filename=<span class="hljs-string">'app.log'</span>,<br>                    format=<span class="hljs-string">'%(asctime)s - %(name)s - %(levelname)s - %(module)s: %(message)s'</span>,<br>                    datefmt=<span class="hljs-string">'%Y-%m-%d %H:%M:%S'</span>,<br>                    level=<span class="hljs-number">40</span>)    <span class="hljs-comment"># level 设置级别. 当你的信息的级别&gt;=level的时候才会写入日志文件, 默认30</span><br><br><span class="hljs-comment"># CRITICAL = 50</span><br><span class="hljs-comment"># FATAL = CRITICAL</span><br><span class="hljs-comment"># ERROR = 40</span><br><span class="hljs-comment"># WARNING = 30</span><br><span class="hljs-comment"># WARN = WARNING</span><br><span class="hljs-comment"># INFO = 20</span><br><span class="hljs-comment"># DEBUG = 10</span><br><span class="hljs-comment"># NOTSET = 0</span><br><span class="hljs-comment"># 写日志</span><br><span class="hljs-comment"># logging.critical("我是critical")</span><br><span class="hljs-comment"># logging.error("我是error")</span><br><span class="hljs-comment"># logging.warning("我是警告")</span><br><span class="hljs-comment"># logging.info("我是基本信息")</span><br><span class="hljs-comment"># logging.debug("我是调试")</span><br><span class="hljs-comment"># logging.log(2, "我是自定义")</span><br><br><br><span class="hljs-keyword">import</span> traceback<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">20</span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">raise</span> FileNotFoundError(<span class="hljs-string">"我是FileNotFountException"</span>)<br>        <span class="hljs-keyword">elif</span> i % <span class="hljs-number">3</span> == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">raise</span> StopIteration()<br>        <span class="hljs-keyword">elif</span> i % <span class="hljs-number">3</span> == <span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">raise</span> KeyError()<br><br>    <span class="hljs-keyword">except</span> FileNotFoundError <span class="hljs-keyword">as</span> e:<br>        val = traceback.format_exc()  <span class="hljs-comment"># 获取堆栈信息</span><br>        logging.error(val)<br>    <span class="hljs-keyword">except</span> StopIteration <span class="hljs-keyword">as</span> e:<br>        val = traceback.format_exc()<br>        logging.error(val)<br>    <span class="hljs-keyword">except</span> KeyError <span class="hljs-keyword">as</span> e:<br>        val = traceback.format_exc()<br>        logging.error(val)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        val = traceback.format_exc()<br>        logging.error(val)<br></code></pre></div></td></tr></table></figure><h4 id="多文件日志处理"><a href="#多文件日志处理" class="headerlink" title="多文件日志处理"></a>多文件日志处理</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><span class="hljs-comment"># 创建⼀个操作⽇志的对象logger（依赖FileHandler）</span><br>file_handler = logging.FileHandler(<span class="hljs-string">'l1.log'</span>, <span class="hljs-string">'a'</span>, encoding=<span class="hljs-string">'utf-8'</span>)<br><span class="hljs-comment"># 设置日志文件内容的格式</span><br>file_handler.setFormatter(logging.Formatter(fmt=<span class="hljs-string">"%(asctime)s - %(name)s - %(levelname)s -%(module)s: %(message)s"</span>))<br>logger1 = logging.Logger(<span class="hljs-string">'A'</span>, level=<span class="hljs-number">40</span>)<br>logger1.addHandler(file_handler)<br><span class="hljs-comment"># 记录日志</span><br>logger1.error(<span class="hljs-string">'我是A系统'</span>)<br><br><br><br><span class="hljs-comment"># 再创建⼀个操作⽇志的对象logger（依赖FileHandler）</span><br>file_handler2 = logging.FileHandler(<span class="hljs-string">'l2.log'</span>, <span class="hljs-string">'a'</span>, encoding=<span class="hljs-string">'utf-8'</span>)<br>file_handler2.setFormatter(logging.Formatter(fmt=<span class="hljs-string">"%(asctime)s - %(name)s -%(levelname)s -%(module)s: %(message)s"</span>))<br>logger2 = logging.Logger(<span class="hljs-string">'B'</span>, level=<span class="hljs-number">40</span>)<br>logger2.addHandler(file_handler2)<br><span class="hljs-comment"># 记录日志</span><br>logger2.error(<span class="hljs-string">'我是B系统'</span>)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python:面对对象成员(2)</title>
    <link href="/2018/09/26/Python%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E6%88%90%E5%91%98(2)/"/>
    <url>/2018/09/26/Python%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E6%88%90%E5%91%98(2)/</url>
    
    <content type="html"><![CDATA[<h3 id="核能来袭-成员"><a href="#核能来袭-成员" class="headerlink" title="核能来袭-成员"></a>核能来袭-成员</h3><h4 id="一-类的成员"><a href="#一-类的成员" class="headerlink" title="一.类的成员"></a>一.类的成员</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> 类名:</span><br><span class="hljs-comment"># ⽅方法</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, 参数<span class="hljs-number">1</span>, 参数<span class="hljs-number">2.</span>...)</span>:</span><br><span class="hljs-comment"># 属性变量量</span><br>self.属性<span class="hljs-number">1</span> = 参数<span class="hljs-number">1</span><br>self.属性<span class="hljs-number">2</span> = 参数<span class="hljs-number">2</span><br>....<br><span class="hljs-comment"># ⽅方法</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">method</span><span class="hljs-params">(self)</span>:</span><br>pas<br></code></pre></div></td></tr></table></figure><blockquote><p>在上面代码中<code>__init__</code>和<code>method</code> 都属于类的成员方法. 又称为实例⽅方法. 总之这样的东西需要用对象来访问. ⽽而上方的<code>self</code> .属性1 = 参数1 这个代码的含义是给对象设置属性信息. 含义是这个对象的xxx属性是xxxx. 这种东西又被称之为成员变量量或者实例变量量, 再或者被称之为字段. 都是一个意思.</p></blockquote><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">   Province+---------^-------------------------+<br>          ^----------+                         |<br>+-----------------+  |                         |<br>|                 |  +-----------------+       |obj=Province(北 京 )<br>| +---------------+                    |       |<br>| |country=中   国 |-----&gt;#静 态 字 段        |    --+-v------------------<br>| +---------------+                    |     |  name = 北 京           |<br>|                 |                    |     |                         |<br>|                 |                    |     +-----------------------+<br>+-----------------+                    |     | 类 对 象 指 针             |<br>|                 |                    |     |                       |<br>|                 |                    |     +-----------------------+<br>|                 |                    |<br>|                 |                    |        obj2 = Province(河 北 省 )<br>|                 |                    |<br>| def __init__(...)                    |      +------------------------+<br>|     ...         |                    |      |  name = 河 北 省          |<br>| def func(...)   |                    |      |                        |<br>|     ..          |                    +^-----+ +----------------------+<br>|                 |                           |  类 对 象 指 针           |<br>|                 |                           |                        |<br>|                 |                           +------------------------+<br>|                 |<br>|                 |<br>|                 |<br>|                 |<br>+-----------------+<br></code></pre></div></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>:</span><br>    country = <span class="hljs-string">"中国"</span>  <br>    <span class="hljs-comment">#类变量. 不属于对象, 对象可以访问.</span><br>    <span class="hljs-comment">#静态变量(静态字段)</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, name, num, gender, birthday)</span>:</span><br>        <span class="hljs-comment"># 成员变量(实例变量)</span><br>        self.name = name<br>        self.num = num<br>        self.gender = gender<br>        self.birthday = birthday<br><br>    <span class="hljs-comment"># 对象来访问（成员方法）（实例方法）</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">marray</span><span class="hljs-params">(self, duifang)</span>:</span><br>        print(<span class="hljs-string">"人会结婚%s"</span> % duifang)  <span class="hljs-comment">#普通字段</span><br><br>alex = Person(<span class="hljs-string">"李连杰"</span>, <span class="hljs-number">10086</span>, <span class="hljs-string">"男"</span>, <span class="hljs-string">"昨天"</span>)<br>alex.country = <span class="hljs-string">"澳大利亚"</span> <span class="hljs-comment"># 注意。 这里和类变量没由一毛钱关系, 给alex单独加一个属性叫country = ”澳大利亚“</span><br><br>wusir = Person(<span class="hljs-string">"12"</span>, <span class="hljs-number">10010</span>, <span class="hljs-string">"女"</span>, <span class="hljs-string">"今天"</span>)<br><br>print(alex.country) <span class="hljs-comment"># 澳大利亚 # 拿到的是自己的。成员实例变量 字段</span><br>print(wusir.country) <span class="hljs-comment"># 中国</span><br>print(Person.country)   <span class="hljs-comment"># 中国</span><br><br>Person.country<span class="hljs-comment"># 直接访问静态字段</span><br><br><span class="hljs-comment"># 总结：类变量，用类名去操作. 规范.</span><br><br><span class="hljs-comment">#静态字段在内存中只保存一份</span><br><span class="hljs-comment">#普通字段在每个对象中都要保存一份</span><br></code></pre></div></td></tr></table></figure><blockquote><p>应用场景： 通过类创建对象时，如果每个对象都具有相同的字段，那么就使用静态字段</p></blockquote><h4 id="二-类的成员-方法"><a href="#二-类的成员-方法" class="headerlink" title="二.类的成员-方法"></a>二.类的成员-方法</h4><ol><li><p>成员方法(实例方法)</p></li><li><p>静态方法</p></li><li><p>类方法</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Computer</span>:</span><br><span class="hljs-comment"># 实例方法(成员方法)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">play</span><span class="hljs-params">(self)</span>:</span><br>print(<span class="hljs-string">"我的电脑可以玩⼉"</span>)<br>c = Computer()<br>c.play() <span class="hljs-comment"># 对象直接去调用实例方法</span><br></code></pre></div></td></tr></table></figure><blockquote><ol><li>成员方法(实例方法：由<strong>对象</strong>调用；至少一个<code>self</code> 参数；执行普通方法时，自动将调用该方法的<strong>对象</strong>赋值给<strong>self</strong>；</li><li>类方法：由<strong>类</strong>调用； 至少一个<code>cls</code> 参数；执行类方法时，自动将调用该方法的<strong>类</strong>复制给<strong>cls</strong>；</li><li>静态方法：由<strong>类</strong>调用；无默认参数；</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-comment"># 实例方法需要传递类的对象 self</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">think</span><span class="hljs-params">(self)</span>:</span><br>        print(<span class="hljs-string">"人能思考"</span>)<br><br>    <span class="hljs-comment"># 静态方法不需要传递对象或者类</span><br><span class="hljs-meta">    @staticmethod # 静态方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">jisuan</span><span class="hljs-params">(a, b)</span>:</span><br>        print(<span class="hljs-string">"我来过这里"</span>)<br>        <span class="hljs-keyword">return</span> a + b<br><br>    <span class="hljs-comment"># 类方法: 第一个参数传递的是类名</span><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">clsMethod</span><span class="hljs-params">(cls)</span>:</span> <span class="hljs-comment"># cls表示的类</span><br>        p = cls() <span class="hljs-comment"># 可以动态的创建对象.</span><br>        print(<span class="hljs-string">"我是一个类方法"</span>, p)<br><br><br>p = Person()<br>p.think()<br><br>Person.think(p)<br><br><span class="hljs-comment"># 静态方法的调用：</span><br><br>c = Person.jisuan(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>) <span class="hljs-comment">#  类名可以访问</span><br>print(c)<br><br>p = Person()<br>d = p.jisuan(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>) <span class="hljs-comment"># 用对象也可以访问</span><br>print(d)<br><br><span class="hljs-comment"># 记住, 静态的内容用类名访问</span><br><br><span class="hljs-comment">#类方法的调用</span><br><br>Person.clsMethod() <span class="hljs-comment"># 类方法默认第一个参数接收的是类名</span><br></code></pre></div></td></tr></table></figure><blockquote><p><strong>相同点：</strong>对于所有的方法而言，均属于类（非对象）中，所以，在内存中也只保存一份。</p><p><strong>不同点：</strong>方法调用者不同、调用方法时自动传入的参数不同。</p></blockquote></li></ol><h4 id="三-属性"><a href="#三-属性" class="headerlink" title="三.属性"></a>三.属性</h4><p><img src="/images/python/class/class_member.png" srcset="/img/loading.gif" lazyload alt></p><p>那么属性就非常简单了，因为Python中的属性其实是<strong>成员方法</strong>的变种。</p>   <figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><br>​```python<br><span class="hljs-comment"># ############### 定义 ###############</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-comment"># 定义属性</span><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">prop</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">pass</span><br><span class="hljs-comment"># ############### 调用 ###############</span><br>foo_obj = Foo()<br><br>foo_obj.func()<br>foo_obj.prop   <span class="hljs-comment">#调用属性</span><br>注意:<br><span class="hljs-number">1.</span> 方法参数只能有一个self<br><span class="hljs-number">2.</span> 方法上方要写@property<br><span class="hljs-number">3.</span> 调⽤用的时候, 我们不需要写括号. 直接当成属性变量来用就可以了了.<br><span class="hljs-number">4.</span> 这种套路路只能取值. 不能设置值<br></code></pre></div></td></tr></table></figure><blockquote><p>由属性的定义和调用要注意一下几点：</p><ul><li>定义时，在普通方法的基础上添加  <code>@property</code>  装饰器；</li><li>定义时，属性<strong>仅有一个</strong> <code>self</code>  参数</li><li>调用时，无需<strong>括号</strong><br>​           方法：foo_obj.func()<br>​           属性：foo_obj.prop</li></ul></blockquote><h4 id="四-私有"><a href="#四-私有" class="headerlink" title="四.私有"></a>四.私有</h4><blockquote><p>类的所有成员在上一步骤中已经做了详细的介绍，对于每一个类的成员而言都有两种形式：</p></blockquote><ul><li><p>公有成员，在任何地方都能访问</p></li><li><p>私有成员，只有在类的内部才能方法,私有成员命名时,前两个字符是 下划线 <code>__foo</code></p></li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tiger</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, name, waibiao, qingzhenglianjiedezuofeng, qingfu, money, fangchan)</span>:</span><br>        self.name = name<br>        self.waibiao = waibiao<br>        self.qingzhenglianjiedezuofeng = qingzhenglianjiedezuofeng<br>        self.__qingfu = qingfu<br>        self.__money = money<br>        self.__fangchan = fangchan<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">buy</span><span class="hljs-params">(self)</span>:</span><br>        print(<span class="hljs-string">"我有%s"</span> % self.__money)<br>        self.__sel() <br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__sel</span><span class="hljs-params">(self)</span>:</span><br>        print(<span class="hljs-string">"我要卖掉%s"</span> % self.__fangchan)<br><br><br>lh = Tiger(<span class="hljs-string">"alex"</span>, <span class="hljs-string">"正直"</span>, <span class="hljs-string">"非常刚正不阿, 666"</span>, <span class="hljs-string">"小潘潘"</span>, <span class="hljs-number">10000000000</span>, <span class="hljs-number">5</span>)<br>print(lh.qingzhenglianjiedezuofeng)<br>print(lh.name)<br>print(lh.waibiao)<br>lh.buy()<br><span class="hljs-comment"># lh.__sel()</span><br><span class="hljs-comment"># print(lh.__money)</span><br></code></pre></div></td></tr></table></figure><p><strong>私有成员和公有成员的访问限制不同</strong>：</p><h6 id="静态字段"><a href="#静态字段" class="headerlink" title="静态字段"></a>静态字段</h6><ul><li>公有静态字段：类可以访问；类内部可以访问；派生类中可以访问</li><li>私有静态字段：仅类内部可以访问；</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span>:</span><br><br>    name = <span class="hljs-string">"公有静态字段"</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">print</span> C.name<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D</span><span class="hljs-params">(C)</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">print</span> C.name<br><br><br>C.name         <span class="hljs-comment"># 类访问</span><br><br>obj = C()<br>obj.func()     <span class="hljs-comment"># 类内部可以访问</span><br><br>obj_son = D()<br>obj_son.show() <span class="hljs-comment"># 派生类中可以访问</span><br></code></pre></div></td></tr></table></figure><p>私有静态字段</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span>:</span><br><br>    __name = <span class="hljs-string">"公有静态字段"</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">print</span> C.__name<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D</span><span class="hljs-params">(C)</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">print</span> C.__name<br><br><br>C.__name       <span class="hljs-comment"># 类访问            ==&gt; 错误</span><br><br>obj = C()<br>obj.func()     <span class="hljs-comment"># 类内部可以访问     ==&gt; 正确</span><br><br>obj_son = D()<br>obj_son.show() <span class="hljs-comment"># 派生类中可以访问   ==&gt; 错误</span><br></code></pre></div></td></tr></table></figure><h6 id="普通字段"><a href="#普通字段" class="headerlink" title="普通字段"></a>普通字段</h6><ul><li>公有普通字段：对象可以访问；类内部可以访问；派生类中可以访问</li><li>私有普通字段：仅类内部可以访问；</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span>:</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span><br>        self.foo = <span class="hljs-string">"公有字段"</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">print</span> self.foo 　<span class="hljs-comment">#　类内部访问</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D</span><span class="hljs-params">(C)</span>:</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">print</span> self.foo　＃　派生类中访问<br><br>obj = C()<br><br>obj.foo     <span class="hljs-comment"># 通过对象访问</span><br>obj.func()  <span class="hljs-comment"># 类内部访问</span><br><br>obj_son = D();<br>obj_son.show()  <span class="hljs-comment"># 派生类中访问</span><br></code></pre></div></td></tr></table></figure><p>私有普通字段</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span>:</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span><br>        self.__foo = <span class="hljs-string">"私有字段"</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">print</span> self.foo 　<span class="hljs-comment">#　类内部访问</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D</span><span class="hljs-params">(C)</span>:</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">print</span> self.foo　＃　派生类中访问<br><br>obj = C()<br><br>obj.__foo     <span class="hljs-comment"># 通过对象访问    ==&gt; 错误</span><br>obj.func()  <span class="hljs-comment"># 类内部访问        ==&gt; 正确</span><br><br>obj_son = D();<br>obj_son.show()  <span class="hljs-comment"># 派生类中访问  ==&gt; 错误</span><br></code></pre></div></td></tr></table></figure><p>方法、属性的访问于上述方式相似，即：私有成员只能在类内部使用</p><p><em>ps：非要访问私有属性的话，可以通过 对象._类__属性名</em>  </p>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python:初始面对对象(1)</title>
    <link href="/2018/09/26/Python%E5%88%9D%E5%A7%8B%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1(1)/"/>
    <url>/2018/09/26/Python%E5%88%9D%E5%A7%8B%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1(1)/</url>
    
    <content type="html"><![CDATA[<h4 id="初始面对对象"><a href="#初始面对对象" class="headerlink" title="初始面对对象"></a>初始面对对象</h4><ul><li><h5 id="面对对象和面对过程"><a href="#面对对象和面对过程" class="headerlink" title="面对对象和面对过程"></a>面对对象和面对过程</h5><ol><li><blockquote><p> ⾯面向过程: ⼀一切以事物的流程为核心. 核心是”过程”⼆二字, 过程是指解决问题的步骤,即, 先干什么, 后干什么. 基于该思想编写程序就好比在编写⼀一套流⽔线. 是⼀一种机械式的编程思维</p><p> 根据业务逻辑从上到下写垒代码</p></blockquote><ul><li>优点: 负责的问题流程化, 编写相对简单</li><li>缺点: 可扩展性差</li></ul></li><li><blockquote><p>⾯面向对象:Object Oriented Programming，OOP， ⼀一切以对象为中⼼心.<br>什么是对象? 不好解释. 先解释解释什么是车? 有轱辘, 有方向盘, 有发动机, 会跑的<br>是车. 好. 在解释⼀一个. 什么是人. 有名字, 年龄, 爱好, 会唱歌跳舞思考的是人. 我们给这两个东西下了了⼀一个简单的定义. 总结: 具有相同属性和动作的结合体叫对象. 面向对象思维, 要自己建立对象. 自己建立场景. 你是就是面向对象世界中的上帝. 你想让车干嘛就干嘛. 你想让人干嘛人就能干嘛.</p><p>对函数进行分类和封装，让开发“更快更好更强…”</p></blockquote><ul><li><strong>优点: 可扩展性强</strong></li><li>缺点: 编程的复杂度⾼高于⾯面向过程</li></ul></li></ol></li><li><p>类(<code>Class</code>)和实例(<code>Instance</code>)是面向对象最重要的概念。</p><blockquote><p>类与对象的关系: 类是对事物的总结. 抽象的概念. 类用来描述对象. 对象是类的实例<br>化的结果. 对象能执行哪些方法. 都由类来决定. 类中定义了什么. 对象就拥有什么</p></blockquote><ul><li>类和对象是面向对象中的两个重要概念</li></ul><ol><li>类：类有静态属性和静态方法，类无法访问动态属性和动态方法；</li><li>对象：对象有动态属性和动态方法，对象可以访问静态属性和静态方法；</li></ol><p>在python中定义一个类</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cars</span>:</span><br>    block<br></code></pre></div></td></tr></table></figure></li><li><p>现在我们来定义一辆车,把车特征信息写进类定义中,在python中 通过特殊的<code>__init__</code>方法实现.</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#定义一辆车</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span>:</span><br>    <span class="hljs-comment">#出厂设置(__int__) 构造方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,color,pai,pailinag,own)</span>:</span> <span class="hljs-comment">#表示当前类的对象</span><br>        <span class="hljs-comment">#print("造车")</span><br>        <span class="hljs-comment">#print(self)</span><br>        <span class="hljs-comment">#绑定属性.</span><br>        self.color1 =  color<br>        self.pai = pai<br>        self.pailing = pailinag<br>        self.own = own<br>    <span class="hljs-comment">#车能跑,跑就是一个动作,要写函数(方法)</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span><span class="hljs-params">(self)</span>:</span> <span class="hljs-comment">#self: 当前类的对象.</span><br>        print(<span class="hljs-string">"%s车飞起来了"</span>% self.color1)<br>        print(self)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tiaogao</span><span class="hljs-params">(self)</span>:</span><br>        print(<span class="hljs-string">"有一台%s车在疯狂调高"</span>% self.color1)<br>         c1 = Car(<span class="hljs-string">"红色"</span>,<span class="hljs-string">"川B9BB95"</span>,<span class="hljs-string">"2.0L"</span>,<span class="hljs-string">'manotu'</span>) <span class="hljs-comment"># 自动调用int函数(方法) #c1是对Car()的实例化</span><br>c1.run() <span class="hljs-comment">#对象.方法</span><br><br>c1.tiaogao()<br><br>print(c1)<br><br>print(c1.dict)<br><br>print(c1.color1)<br><br>c1.color1= <span class="hljs-string">"绿色"</span><br><br>print(c1.color1)<br><br>  <span class="hljs-comment">#</span><br><br><span class="hljs-comment">#</span><br>c2 = Car(<span class="hljs-string">"宝蓝色"</span>,<span class="hljs-string">"川B66666"</span>,<span class="hljs-string">"3.0T"</span>,<span class="hljs-string">"baozi"</span>) <br><br>c2.run() <span class="hljs-comment">#执行run方法</span><br>print(c2)<br></code></pre></div></td></tr></table></figure><p> <em>ps：类中的函数第一个参数必须是<code>self</code> </em> </p></li></ul><p> 类中定义的函数叫做 <em>“方法”</em></p><h4 id="面对对象的三大特征"><a href="#面对对象的三大特征" class="headerlink" title="面对对象的三大特征"></a>面对对象的三大特征</h4><blockquote><p><strong>封装 </strong>  <strong>继承</strong> <strong>多态</strong></p></blockquote><h5 id="一-封装"><a href="#一-封装" class="headerlink" title="一.封装"></a>一.封装</h5><blockquote><p>封装: 把具有相同属性和功能的内容封装在一个对象中</p></blockquote><p>  在使用面向对象的封装特性时，需要：</p><ul><li><p>将内容封装到对象</p></li><li><p>从对象调用被封装的内容</p><ol><li>将内容封装到某处</li></ol><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><br><br><span class="hljs-comment">#创建类</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,name,age)</span>:</span> <span class="hljs-comment">#称为构建方法,根据类创建对象时自动执行</span><br>        self.name = name<br>        self.age =age<br>        <br><span class="hljs-comment">#根据类Foo创建对象</span><br><span class="hljs-comment">#自动执行Foo类的__init__方法</span><br><span class="hljs-comment">#将amntou 和18 分别封装到obj1 self 的name 和age 属性中</span><br>obj1 = Foo(<span class="hljs-string">"amntou"</span>,<span class="hljs-number">18</span>)<br><br>obj2 = Foo(<span class="hljs-string">"baozi"</span>,<span class="hljs-number">20</span>)<br></code></pre></div></td></tr></table></figure></li></ul><ol start="2"><li><p>调用被封装的内容时，有两种情况：</p><ul><li>通过对象直接调用</li><li>通过self间接调用</li></ul><ol><li>通过对象直接调用  <strong>对象.属性名 </strong></li></ol></li></ol><div class="hljs code-wrapper"><pre><code>   <figure class="highlight python"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,name,age)</span>:</span> <br>        self.name = name<br>        self.age =age<br>obj1 = Foo(<span class="hljs-string">"amntou"</span>,<span class="hljs-number">18</span>)<br>print(obj1.name) <span class="hljs-comment">#直接调用obj1对象name属性</span><br>obj2 = Foo(<span class="hljs-string">"baozi"</span>,<span class="hljs-number">20</span>)<br>print(obj2.age) <span class="hljs-comment"># 直接调obj2对象 age属性</span><br></code></pre></div></td></tr></table></figure>   ​   ​   ​   2. 通过self间接调用被封装的内容执行类中的方法时，需要通过self间接调用被封装的内容<figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>:</span><br> <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, name, age)</span>:</span><br>        self.name = name<br>        self.age = age<br> <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">detail</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">print</span> self.name<br>        <span class="hljs-keyword">print</span> self.age<br> <br>obj1 = Foo(<span class="hljs-string">'wupeiqi'</span>, <span class="hljs-number">18</span>)<br>obj1.detail()  <span class="hljs-comment"># Python默认会将obj1传给self参数，即：obj1.detail(obj1)，所以，此时方法内部的 self ＝ obj1，即：self.name 是 wupeiqi ；self.age 是 18</span><br> <br>obj2 = Foo(<span class="hljs-string">'alex'</span>, <span class="hljs-number">73</span>)<br>obj2.detail()  <span class="hljs-comment"># Python默认会将obj2传给self参数，即：obj1.detail(obj2)，所以，此时方法内部的 self ＝ obj2，即：self.name 是 alex ； self.age 是 78</span><br></code></pre></div></td></tr></table></figure>&gt; ** 综上所述，对于面向对象的封装来说，其实就是使用构造方法将内容封装到 对象 中，然后通过对象直接或者self间接获取被封装的内容。 **</code></pre><h5 id="二-继承"><a href="#二-继承" class="headerlink" title="二 继承"></a>二 继承</h5><blockquote><p>继承，面向对象中的继承和现实生活中的继承相同，即：子可以继承父的内容。</p></blockquote><p>  ​</p>  <figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span>:</span> <span class="hljs-comment">#在此代码段中,为父类</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">eat</span><span class="hljs-params">(self)</span>:</span><br>        print(<span class="hljs-string">"%s吃"</span>% self.name)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dirnk</span><span class="hljs-params">(self)</span>:</span><br>        print(<span class="hljs-string">"%s喝"</span>% self.name)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sleep</span><span class="hljs-params">(self)</span>:</span><br>        print(<span class="hljs-string">"%s睡"</span>% self.name)<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span><span class="hljs-params">(Animal)</span>:</span><span class="hljs-comment"># 在类名括号中写入另一个类名表示继承另一个类</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,name)</span>:</span><br>        self.name = name<br>        self.breed = <span class="hljs-string">"猫"</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cry</span><span class="hljs-params">(self)</span>:</span><br>        print(<span class="hljs-string">"喵喵叫"</span>)<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span><span class="hljs-params">(Animal)</span>:</span> <span class="hljs-comment"># 在类名括号中写入另一个类名表示继承另一个类</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,name)</span>:</span><br>        self.name = name<br>        self.breed = <span class="hljs-string">"狗"</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cry</span><span class="hljs-params">(self)</span>:</span><br>        print(<span class="hljs-string">"汪汪"</span>)<br><br><br>cat = Cat(<span class="hljs-string">"福禄丸"</span>)<br>cat.eat()<br>cat.cry()<br>cat.dirnk()<br>dog = Dog(<span class="hljs-string">"帕克"</span>)<br>dog.cry()<br>dog.dirnk()<br></code></pre></div></td></tr></table></figure><blockquote><p><strong>所以，对于面向对象的继承来说，其实就是将多个类共有的方法提取到父类中，子类仅需继承父类而不必一一实现每个方法。</strong></p></blockquote>  <figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">class 父类<br>def 父类中的方法(self): #子类继承父类,即拥有了父类中所以方法<br>     #<br>class 子类(父类):<br>  pass<br>zi = 子类() #创建子类对象<br>zi.父类中的方法() #执行从父类中继承的方法<br></code></pre></div></td></tr></table></figure><blockquote><ol><li><p>python的类可以继承多个类,java 和c#中则只能继承一个类</p></li><li><p>python的类继承了多累,寻找方法的方式为两种分别是<strong>深度优先</strong> 和 <strong>广度优先</strong></p><ul><li><strong>如果是经典类MRO为DFS（深度优先搜索（子节点顺序：从左到右）</strong></li></ul></li></ol><ul><li><strong>如果是新式类MRO为BFS（广度优先搜索（子节点顺序：从左到右））</strong></li><li>Python 至少有两种不同的 MRO：<ul><li>经典类（classic class）的深度遍历。</li><li>Python 2.2 的新式类 MRO</li><li>Python 2.3 的新式类的C3 算法。它也是 Python 3 唯一支持的方式。</li></ul></li></ul></blockquote><p>  <a href="http://xymlife.com/2016/05/22/python_mro/" target="_blank" rel="noopener">mor算法参考博客</a></p>  <figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#经典类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C1</span>:</span><br><span class="hljs-keyword">pass</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C2</span><span class="hljs-params">(C1)</span>:</span>  C2是经典类<br>  <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-comment"># 新式类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">N1</span><span class="hljs-params">(object)</span>:</span><br>  <span class="hljs-keyword">pass</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">N1</span><span class="hljs-params">(N1)</span>:</span><br>  <span class="hljs-keyword">pass</span><br></code></pre></div></td></tr></table></figure><h4 id="三-多态"><a href="#三-多态" class="headerlink" title="三 多态"></a>三 多态</h4>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python base 速写</title>
    <link href="/2018/09/26/python-base%E9%80%9F%E5%86%99/"/>
    <url>/2018/09/26/python-base%E9%80%9F%E5%86%99/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/fedora00001.png" srcset="/img/loading.gif" lazyload alt="u11231"></p> <a id="more"></a><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"># _*_ coding: utf-8 _*_<br><br>"""类型和运算----类型和运算----类型和运算----类型和运算----类型和运算----类型和运算----类型和运算----类型和运算----类型和运算----类型和运算----类型和运算"""<br><br>#-- 寻求帮助:<br>    dir(obj)            # 简单的列出对象obj所包含的方法名称，返回一个字符串列表<br>    help(obj.func)      # 查询obj.func的具体介绍和用法<br>    <br>#-- 测试类型的三种方法，推荐第三种<br>    if type(L) == type([]):<br>        print("L is list")<br>    if type(L) == list:<br>        print("L is list")<br>    if isinstance(L, list):<br>        print("L is list")<br><br>        <br>#-- Python数据类型：哈希类型、不可哈希类型<br>    # 哈希类型，即在原地不能改变的变量类型，不可变类型。可利用hash函数查看其hash值，也可以作为字典的key<br>    "数字类型：int, float, decimal.Decimal, fractions.Fraction, complex"<br>    "字符串类型：str, bytes"<br>    "元组：tuple"<br>    "冻结集合：frozenset"<br>    "布尔类型：True, False"<br>    "None"<br>    # 不可hash类型：原地可变类型：list、dict和set。它们不可以作为字典的key。<br><br>#-- 数字常量<br>    1234, -1234, 0, 999999999                    # 整数<br>    1.23, 1., 3.14e-10, 4E210, 4.0e+210          # 浮点数<br>    0o177, 0x9ff, 0X9FF, 0b101010                # 八进制、十六进制、二进制数字<br>    3+4j, 3.0+4.0j, 3J                           # 复数常量，也可以用complex(real, image)来创建<br>    hex(I), oct(I), bin(I)                       # 将十进制数转化为十六进制、八进制、二进制表示的“字符串”<br>    int(string, base)                            # 将字符串转化为整数，base为进制数<br>    # 2.x中，有两种整数类型：一般整数（32位）和长整数（无穷精度）。可以用l或L结尾，迫使一般整数成为长整数<br>    float('inf'), float('-inf'), float('nan')    # 无穷大, 无穷小, 非数<br>    <br>#-- 数字的表达式操作符<br>    yield x                                      # 生成器函数发送协议<br>    lambda args: expression                      # 生成匿名函数<br>    x if y else z                                # 三元选择表达式<br>    x and y, x or y, not x                       # 逻辑与、逻辑或、逻辑非<br>    x in y, x not in y                           # 成员对象测试<br>    x is y, x is not y                           # 对象实体测试<br>    x&lt;y, x&lt;=y, x&gt;y, x&gt;=y, x==y, x!=y             # 大小比较，集合子集或超集值相等性操作符<br>    1 &lt; a &lt; 3                                    # Python中允许连续比较<br>    x|y, x&amp;y, x^y                                # 位或、位与、位异或<br>    x&lt;&lt;y, x&gt;&gt;y                                   # 位操作：x左移、右移y位<br>    +, -, *, /, //, %, **                        # 真除法、floor除法：返回不大于真除法结果的整数值、取余、幂运算<br>    -x, +x, ~x                                   # 一元减法、识别、按位求补（取反）<br>    x[i], x[i:j:k]                               # 索引、分片<br>    int(3.14), float(3)                          # 强制类型转换<br>    <br>#-- 整数可以利用bit_length函数测试所占的位数<br>    a = 1;       a.bit_length()    # 1<br>    a = 1024;    a.bit_length()    # 11<br>    <br>#-- repr和str显示格式的区别<br>    """<br>    repr格式：默认的交互模式回显，产生的结果看起来它们就像是代码。<br>    str格式：打印语句，转化成一种对用户更加友好的格式。<br>    """<br>    <br>#-- 数字相关的模块<br>    # math模块<br>    # Decimal模块：小数模块<br>        import decimal<br>        from decimal import Decimal<br>        Decimal("0.01") + Decimal("0.02")        # 返回Decimal("0.03")<br>        decimal.getcontext().prec = 4            # 设置全局精度为4 即小数点后边4位<br>    # Fraction模块：分数模块<br>        from fractions import Fraction<br>        x = Fraction(4, 6)                       # 分数类型 4/6<br>        x = Fraction("0.25")                     # 分数类型 1/4 接收字符串类型的参数<br><br>#-- 集合set<br>    """<br>    set是一个无序不重复元素集, 基本功能包括关系测试和消除重复元素。<br>    set支持union(联合), intersection(交), difference(差)和symmetric difference(对称差集)等数学运算。<br>    set支持x in set, len(set), for x in set。<br>    set不记录元素位置或者插入点, 因此不支持indexing, slicing, 或其它类序列的操作<br>    """<br>    s = set([3,5,9,10])                          # 创建一个数值集合，返回&#123;3, 5, 9, 10&#125;<br>    t = set("Hello")                             # 创建一个字符的集合，返回&#123;'l', 'H', 'e', 'o'&#125;<br>    a = t | s;    t.union(s)                     # t 和 s的并集<br>    b = t &amp; s;    t.intersection(s)              # t 和 s的交集<br>    c = t – s;    t.difference(s)                # 求差集（项在t中, 但不在s中）<br>    d = t ^ s;    t.symmetric_difference(s)      # 对称差集（项在t或s中, 但不会同时出现在二者中）<br>    t.add('x');   t.remove('H')                  # 增加/删除一个item<br>    s.update([10,37,42])                         # 利用[......]更新s集合<br>    x in s,  x not in s                          # 集合中是否存在某个值<br>    s.issubset(t);      s &lt;= t                   # 测试是否 s 中的每一个元素都在 t 中<br>    s.issuperset(t);    s &gt;= t                   # 测试是否 t 中的每一个元素都在 s 中 <br>    s.copy(); <br>    s.discard(x);                                # 删除s中x<br>    s.clear()                                    # 清空s<br>    &#123;x**2 for x in [1, 2, 3, 4]&#125;                 # 集合解析，结果：&#123;16, 1, 4, 9&#125;<br>    &#123;x for x in 'spam'&#125;                          # 集合解析，结果：&#123;'a', 'p', 's', 'm'&#125;<br>    <br>#-- 集合frozenset，不可变对象<br>    """<br>    set是可变对象，即不存在hash值，不能作为字典的键值。同样的还有list等(tuple是可以作为字典key的)<br>    frozenset是不可变对象，即存在hash值，可作为字典的键值<br>    frozenset对象没有add、remove等方法，但有union/intersection/difference等方法<br>    """<br>    a = set([1, 2, 3])<br>    b = set()<br>    b.add(a)                     # error: set是不可哈希类型<br>    b.add(frozenset(a))          # ok，将set变为frozenset，可哈希<br><br>#-- 布尔类型bool<br>    type(True)                   # 返回&lt;class 'bool'&gt;<br>    isinstance(False, int)       # bool类型属于整型，所以返回True<br>    True == 1; True is 1         # 输出(True, False)<br>    <br>#-- 动态类型简介<br>    """<br>    变量名通过引用，指向对象。<br>    Python中的“类型”属于对象，而不是变量，每个对象都包含有头部信息，比如"类型标示符" "引用计数器"等<br>    """<br>    #共享引用及在原处修改：对于可变对象，要注意尽量不要共享引用！<br>    #共享引用和相等测试：<br>        L = [1], M = [1], L is M            # 返回False<br>        L = M = [1, 2, 3], L is M           # 返回True，共享引用<br>    #增强赋值和共享引用：普通+号会生成新的对象，而增强赋值+=会在原处修改<br>        L = M = [1, 2]<br>        L = L + [3, 4]                      # L = [1, 2, 3, 4], M = [1, 2]<br>        L += [3, 4]                         # L = [1, 2, 3, 4], M = [1, 2, 3, 4]<br><br>#-- 常见字符串常量和表达式<br>    S = ''                                  # 空字符串<br>    S = "spam’s"                            # 双引号和单引号相同<br>    S = "s\np\ta\x00m"                      # 转义字符<br>    S = """spam"""                          # 三重引号字符串，一般用于函数说明<br>    S = r'\temp'                            # Raw字符串，不会进行转义，抑制转义<br>    S = b'Spam'                             # Python3中的字节字符串<br>    S = u'spam'                             # Python2.6中的Unicode字符串<br>    s1+s2, s1*3, s[i], s[i:j], len(s)       # 字符串操作<br>    'a %s parrot' % 'kind'                  # 字符串格式化表达式<br>    'a &#123;1&#125; &#123;0&#125; parrot'.format('kind', 'red')# 字符串格式化方法<br>    for x in s: print(x)                    # 字符串迭代，成员关系<br>    [x*2 for x in s]                        # 字符串列表解析<br>    ','.join(['a', 'b', 'c'])               # 字符串输出，结果：a,b,c<br>    <br>#-- 内置str处理函数：<br>    str1 = "stringobject"<br>    str1.upper(); str1.lower(); str1.swapcase(); str1.capitalize(); str1.title()        # 全部大写，全部小写、大小写转换，首字母大写，每个单词的首字母都大写<br>    str1.ljust(width)                       # 获取固定长度，左对齐，右边不够用空格补齐<br>    str1.rjust(width)                       # 获取固定长度，右对齐，左边不够用空格补齐<br>    str1.center(width)                      # 获取固定长度，中间对齐，两边不够用空格补齐<br>    str1.zfill(width)                       # 获取固定长度，右对齐，左边不足用0补齐<br>    str1.find('t',start,end)                # 查找字符串，可以指定起始及结束位置搜索<br>    str1.rfind('t')                         # 从右边开始查找字符串<br>    str1.count('t')                         # 查找字符串出现的次数<br>    #上面所有方法都可用index代替，不同的是使用index查找不到会抛异常，而find返回-1<br>    str1.replace('old','new')               # 替换函数，替换old为new，参数中可以指定maxReplaceTimes，即替换指定次数的old为new<br>    str1.strip();                           # 默认删除空白符<br>    str1.strip('d');                        # 删除str1字符串中开头、结尾处，位于 d 删除序列的字符<br>    str1.lstrip();<br>    str1.lstrip('d');                       # 删除str1字符串中开头处，位于 d 删除序列的字符<br>    str1.rstrip();<br>    str1.rstrip('d')                        # 删除str1字符串中结尾处，位于 d 删除序列的字符<br>    str1.startswith('start')                # 是否以start开头<br>    str1.endswith('end')                    # 是否以end结尾<br>    str1.isalnum(); str1.isalpha(); str1.isdigit(); str1.islower(); str1.isupper()      # 判断字符串是否全为字符、数字、小写、大写<br><br>#-- 三重引号编写多行字符串块，并且在代码折行处嵌入换行字符\n<br>    mantra = """hello world<br>            hello python<br>            hello my friend"""<br>    # mantra为"""hello world \n hello python \n hello my friend"""<br>    <br>#-- 索引和分片：<br>    S[0], S[len(S)–1], S[-1]                # 索引<br>    S[1:3], S[1:], S[:-1], S[1:10:2]        # 分片，第三个参数指定步长，如`S[1:10:2]`是从1位到10位没隔2位获取一个字符。<br><br>#-- 字符串转换工具：<br>    int('42'), str(42)                      # 返回(42, '42')<br>    float('4.13'), str(4.13)                # 返回(4.13, '4.13')<br>    ord('s'), chr(115)                      # 返回(115, 's')<br>    int('1001', 2)                          # 将字符串作为二进制数字，转化为数字，返回9<br>    bin(13), oct(13), hex(13)               # 将整数转化为二进制/八进制/十六进制字符串，返回('0b1101', '015', '0xd')<br>    <br>#-- 另类字符串连接<br>    name = "wang" "hong"                    # 单行，name = "wanghong"<br>    name = "wang" \<br>            "hong"                          # 多行，name = "wanghong"<br><br>#-- Python中的字符串格式化实现1--字符串格式化表达式<br>    """<br>    基于C语言的'print'模型，并且在大多数的现有的语言中使用。<br>    通用结构：%[(name)][flag][width].[precision]typecode<br>    """<br>    "this is %d %s bird" % (1, 'dead')                          # 一般的格式化表达式<br>    "%s---%s---%s" % (42, 3.14, [1, 2, 3])                      # 字符串输出：'42---3.14---[1, 2, 3]'<br>    "%d...%6d...%-6d...%06d" % (1234, 1234, 1234, 1234)         # 对齐方式及填充："1234...  1234...1234  ...001234"<br>    x = 1.23456789<br>    "%e | %f | %g" % (x, x, x)                                  # 对齐方式："1.234568e+00 | 1.234568 | 1.23457"<br>    "%6.2f*%-6.2f*%06.2f*%+6.2f" % (x, x, x, x)                 # 对齐方式：'  1.23*1.23  *001.23* +1.23'<br>    "%(name1)d---%(name2)s" % &#123;"name1":23, "name2":"value2"&#125;    # 基于字典的格式化表达式<br>    "%(name)s is %(age)d" % vars()                              # vars()函数调用返回一个字典，包含了所有本函数调用时存在的变量<br>    <br>#-- Python中的字符串格式化实现2--字符串格式化调用方法<br>    # 普通调用<br>    "&#123;0&#125;, &#123;1&#125; and &#123;2&#125;".format('spam', 'ham', 'eggs')            # 基于位置的调用<br>    "&#123;motto&#125; and &#123;pork&#125;".format(motto = 'spam', pork = 'ham')   # 基于Key的调用<br>    "&#123;motto&#125; and &#123;0&#125;".format('ham', motto = 'spam')             # 混合调用<br>    s3 = f"&#123;name&#125; 性格： &#123;xingge&#125;, 爱好: &#123;aihao&#125;" # f format<br>    # 添加键 属性 偏移量 (import sys)<br>    "my &#123;1[spam]&#125; runs &#123;0.platform&#125;".format(sys, &#123;'spam':'laptop'&#125;)                 # 基于位置的键和属性<br>    "&#123;config[spam]&#125; &#123;sys.platform&#125;".format(sys = sys, config = &#123;'spam':'laptop'&#125;)   # 基于Key的键和属性<br>    "first = &#123;0[0]&#125;, second = &#123;0[1]&#125;".format(['A', 'B', 'C'])                       # 基于位置的偏移量<br>    # 具体格式化<br>    "&#123;0:e&#125;, &#123;1:.3e&#125;, &#123;2:g&#125;".format(3.14159, 3.14159, 3.14159)   # 输出'3.141590e+00, 3.142e+00, 3.14159'<br>    "&#123;fieldname:format_spec&#125;".format(......)<br>    # 说明:<br>    """<br>        fieldname是指定参数的一个数字或关键字, 后边可跟可选的".name"或"[index]"成分引用<br>        format_spec ::=  [[fill]align][sign][#][0][width][,][.precision][type]<br>        fill        ::=  &lt;any character&gt;              #填充字符<br>        align       ::=  "&lt;" | "&gt;" | "=" | "^"        #对齐方式<br>        sign        ::=  "+" | "-" | " "              #符号说明<br>        width       ::=  integer                      #字符串宽度<br>        precision   ::=  integer                      #浮点数精度<br>        type        ::=  "b" | "c" | "d" | "e" | "E" | "f" | "F" | "g" | "G" | "n" | "o" | "s" | "x" | "X" | "%"<br>    """<br>    # 例子:<br>        '=&#123;0:10&#125; = &#123;1:10&#125;'.format('spam', 123.456)    # 输出'=spam       =    123.456'<br>        '=&#123;0:&gt;10&#125;='.format('test')                    # 输出'=      test='<br>        '=&#123;0:&lt;10&#125;='.format('test')                    # 输出'=test      ='<br>        '=&#123;0:^10&#125;='.format('test')                    # 输出'=   test   ='<br>        '&#123;0:X&#125;, &#123;1:o&#125;, &#123;2:b&#125;'.format(255, 255, 255)   # 输出'FF, 377, 11111111'<br>        'My name is &#123;0:&#123;1&#125;&#125;.'.format('Fred', 8)       # 输出'My name is Fred    .'  动态指定参数<br><br>#-- 常用列表常量和操作<br>    L = [[1, 2], 'string', &#123;&#125;]                        # 嵌套列表<br>    L = list('spam')                                  # 列表初始化<br>    L = list(range(0, 4))                             # 列表初始化<br>    list(map(ord, 'spam'))                            # 列表解析<br>    len(L)                                            # 求列表长度<br>    L.count(value)                                    # 求列表中某个值的个数<br>    L.append(obj)                                     # 向列表的尾部添加数据，比如append(2)，添加元素2<br>    L.insert(index, obj)                              # 向列表的指定index位置添加数据，index及其之后的数据后移<br>    L.extend(interable)                               # 通过添加iterable中的元素来扩展列表，比如extend([2])，添加元素2，注意和append的区别<br>    L.index(value, [start, [stop]])                   # 返回列表中值value的第一个索引<br>    L.pop([index])                                    # 删除并返回index处的元素，默认为删除并返回最后一个元素<br>    L.remove(value)                                   # 删除列表中的value值，只删除第一次出现的value的值<br>    L.reverse()                                       # 反转列表<br>    L.sort(cmp=None, key=None, reverse=False)         # 排序列表<br>    a = [1, 2, 3], b = a[10:]                         # 注意，这里不会引发IndexError异常，只会返回一个空的列表[]<br>    a = [], a += [1]                                  # 这里实在原有列表的基础上进行操作，即列表的id没有改变<br>    a = [], a = a + [1]                               # 这里最后的a要构建一个新的列表，即a的id发生了变化<br>    del a[::2]                                        # 去除偶数项(偶数索引的)，a = [1, 3, 5, 7]<br><br>    L = [x**2 for x in range(5)]                      # 列表解析<br>#-- 用切片来删除序列的某一段<br>    a = [1, 2, 3, 4, 5, 6, 7]<br>    a[1:4] = []                                       # a = [1, 5, 6, 7]<br>    a = [0, 1, 2, 3, 4, 5, 6, 7]<br>    del a[::2]                                        # 去除偶数项(偶数索引的)，a = [1, 3, 5, 7]<br>    <br>#-- 常用字典常量和操作<br>    D = &#123;&#125;<br>    D = &#123;'spam':2, 'tol':&#123;'ham':1&#125;&#125;                   # 嵌套字典<br>    D = dict.fromkeys(['s', 'd'], 8)                  # &#123;'s': 8, 'd': 8&#125;<br>    D = dict(name = 'tom', age = 12)                  # &#123;'age': 12, 'name': 'tom'&#125;<br>    D = dict([('name', 'tom'), ('age', 12)])          # &#123;'age': 12, 'name': 'tom'&#125;<br>    D = dict(zip(['name', 'age'], ['tom', 12]))       # &#123;'age': 12, 'name': 'tom'&#125;<br>    D.keys(); D.values(); D.items()                   # 字典键、值以及键值对<br>    D.get(key, default)                               # get函数<br>    D.update(D_other)                                 # 合并字典，如果存在相同的键值，D_other的数据会覆盖掉D的数据<br>    D.pop(key, [D])                                   # 删除字典中键值为key的项，返回键值为key的值，如果不存在，返回默认值D，否则异常<br>    D.popitem()                                       # pop字典中随机的一项（一个键值对）<br>    D.setdefault(k[, d])                              # 设置D中某一项的默认值。如果k存在，则返回D[k]，否则设置D[k]=d，同时返回D[k]。<br>    del D                                             # 删除字典<br>    del D['key']                                      # 删除字典的某一项<br>    if key in D:   if key not in D:                   # 测试字典键是否存在<br>    # 字典注意事项：（1）对新索引赋值会添加一项（2）字典键不一定非得是字符串，也可以为任何的不可变对象<br>    # 不可变对象：调用对象自身的任意方法，也不会改变该对象自身的内容，这些方法会创建新的对象并返回。<br>    # 字符串、整数、tuple都是不可变对象，dict、set、list都是可变对象<br>    D[(1,2,3)] = 2                                    # tuple作为字典的key<br><br>#-- 字典解析<br>    D = &#123;k:8 for k in ['s', 'd']&#125;                     # &#123;'s': 8, 'd': 8&#125;<br>    D = &#123;k:v for (k, v) in zip(['name', 'age'], ['tom', 12])&#125;       # &#123;'age': 12, 'name': tom&#125;<br>    <br>#-- 字典的特殊方法__missing__：当查找找不到key时，会执行该方法<br>    class Dict(dict):<br>        def __missing__(self, key):<br>            self[key] = []<br>            return self[key]<br>    dct = dict()<br>    dct["foo"].append(1)    # 这有点类似于collections.defalutdict<br>    dct["foo"]              # [1]<br>    <br>#-- 元组和列表的唯一区别在于元组是不可变对象，列表是可变对象<br>    a = [1, 2, 3]           # a[1] = 0, OK<br>    a = (1, 2, 3)           # a[1] = 0, Error<br>    a = ([1, 2])            # a[0][1] = 0, OK<br>    a = [(1, 2)]            # a[0][1] = 0, Error<br>    <br>#-- 元组的特殊语法: 逗号和圆括号<br>    D = (12)                # 此时D为一个整数 即D = 12<br>    D = (12, )              # 此时D为一个元组 即D = (12, )<br>    <br>#-- 文件基本操作<br>    output = open(r'C:\spam', 'w')          # 打开输出文件，用于写<br>    input = open('data', 'r')               # 打开输入文件，用于读。打开的方式可以为'w', 'r', 'a', 'wb', 'rb', 'ab'等<br>    fp.read([size])                         # size为读取的长度，以byte为单位<br>    fp.readline([size])                     # 读一行，如果定义了size，有可能返回的只是一行的一部分<br>    fp.readlines([size])                    # 把文件每一行作为一个list的一个成员，并返回这个list。其实它的内部是通过循环调用readline()来实现的。如果提供size参数，size是表示读取内容的总长。<br>    fp.readable()                           # 是否可读<br>    fp.write(str)                           # 把str写到文件中，write()并不会在str后加上一个换行符<br>    fp.writelines(seq)                      # 把seq的内容全部写到文件中(多行一次性写入)<br>    fp.writeable()                          # 是否可写<br>    fp.close()                              # 关闭文件。<br>    fp.flush()                              # 把缓冲区的内容写入硬盘<br>    fp.fileno()                             # 返回一个长整型的”文件标签“<br>    fp.isatty()                             # 文件是否是一个终端设备文件（unix系统中的）<br>    fp.tell()                               # 返回文件操作标记的当前位置，以文件的开头为原点<br>    fp.next()                               # 返回下一行，并将文件操作标记位移到下一行。把一个file用于for … in file这样的语句时，就是调用next()函数来实现遍历的。<br>    fp.seek(offset[,whence])                # 将文件打开操作标记移到offset的位置。whence为0表示从头开始计算，1表示以当前位置为原点计算。2表示以文件末尾为原点进行计算。<br>    fp.seekable()                           # 是否可以seek<br>    fp.truncate([size])                     # 把文件裁成规定的大小，默认的是裁到当前文件操作标记的位置。<br>    for line in open('data'): <br>        print(line)                         # 使用for语句，比较适用于打开比较大的文件<br>    with open('data') as file:<br>        print(file.readline())              # 使用with语句，可以保证文件关闭<br>    with open('data') as file:<br>        lines = file.readlines()            # 一次读入文件所有行，并关闭文件<br>    open('f.txt', encoding = 'latin-1')     # Python3.x Unicode文本文件<br>    open('f.bin', 'rb')                     # Python3.x 二进制bytes文件<br>    # 文件对象还有相应的属性：buffer closed encoding errors line_buffering name newlines等<br>    <br>#-- 其他<br>    # Python中的真假值含义：1. 数字如果非零，则为真，0为假。 2. 其他对象如果非空，则为真<br>    # 通常意义下的类型分类：1. 数字、序列、映射。 2. 可变类型和不可变类型<br><br><br>"""语法和语句----语法和语句----语法和语句----语法和语句----语法和语句----语法和语句----语法和语句----语法和语句----语法和语句----语法和语句----语法和语句"""<br>#-- 引用与拷贝<br>    #没有限制条件的分片表达式 (l[:]) 能够复制序列.<br>    #字典copy方法(x.copy) 能够复制字典<br>    #有些内置函数 list 能够生成拷贝(list(l))<br>    #copy能够完整拷贝<br>    <br>    #浅拷贝<br>    L = [1,2,3]<br>    D = &#123;"a":1,"b":2&#125;<br>    A = L[:]                                #浅拷贝,无法复制嵌套结构<br>    B = D.copy()                            #同上<br><br>    #完全拷贝<br>    #标准的copy模块import copy 语句<br>    #x = copy.deepcoy(y)<br>    #<br># --  比较 相等性 和真值<br>    #" == " 操作符测试值得相等性.<br>    #" is " 表达式测试对象一致性 <br><br>#-- 赋值语句的形式<br>    spam = 'spam'                          # 基本形式<br>    spam, ham = 'spam', 'ham'              # 元组赋值形式<br>    [spam, ham] = ['s', 'h']               # 列表赋值形式<br>    a, b, c, d = 'abcd'                    # 序列赋值形式<br>    a, *b, c = 'spam'                      # 序列解包形式（Python3.x中才有）<br>    spam = ham = 'no'                      # 多目标赋值运算，涉及到共享引用<br>    spam += 42                             # 增强赋值，涉及到共享引用<br><br>#-- 序列赋值 序列解包<br>    [a, b, c] = (1, 2, 3)                  # a = 1, b = 2, c = 3<br>    a, b, c, d = "spam"                    # a = 's', b = 'p', c = 'a', d = 'm'<br>    a, b, c = range(3)                     # a = 0, b = 1, c = 2<br>    a, *b = [1, 2, 3, 4]                   # a = 1, b = [2, 3, 4]<br>    *a, b = [1, 2, 3, 4]                   # a = [1, 2, 3], b = 4<br>    a, *b, c = [1, 2, 3, 4]                # a = 1, b = [2, 3], c = 4<br>    # 带有*时 会优先匹配*之外的变量 如<br>    a, *b, c = [1, 2]                      # a = 1, c = 2, b = []<br><br>#-- print函数原型<br>    print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)<br>    # 流的重定向<br>    print('hello world')                   # 等于sys.stdout.write('hello world')<br>    temp = sys.stdout                      # 原有流的保存<br>    sys.stdout = open('log.log', 'a')      # 流的重定向<br>    print('hello world')                   # 写入到文件log.log<br>    sys.stdout.close()<br>    sys.stdout = temp                      # 原有流的复原<br>    <br>#-- Python中and或or总是返回对象(左边的对象或右边的对象) 且具有短路求值的特性<br>    #  a为0返回b ,a非零返回a<br>    1 or 2 or 3                            # 返回 1<br>    #  a为0返回a,a非零返回b<br>    1 and 2 and 3                          # 返回 3<br><br>#-- if/else三元表达符（if语句在行内）<br>    A = 1 if X else 2<br>    A = 1 if X else (2 if Y else 3)<br>    # 也可以使用and-or语句（一条语句实现多个if-else）<br>    a = 6<br>    result = (a &gt; 20 and "big than 20" or a &gt; 10 and "big than 10" or a &gt; 5 and "big than 5")    # 返回"big than 5"<br><br>#-- Python的while语句或者for语句可以带else语句 当然也可以带continue/break/pass语句<br>    while a &gt; 1:<br>        anything<br>    else:<br>        anything<br>    # else语句会在循环结束后执行，除非在循环中执行了break，同样的还有for语句<br>    for i in range(5):<br>        anything<br>    else:<br>        anything<br><br>#-- for循环的元组赋值<br>    for (a, b) in [(1, 2), (3, 4)]:                   # 最简单的赋值<br>    for ((a, b), c) in [((1, 2), 3), ((4, 5), 6)]:    # 自动解包赋值<br>    for ((a, b), c) in [((1, 2), 3), ("XY", 6)]:      # 自动解包 a = X, b = Y, c = 6<br>    for (a, *b) in [(1, 2, 3), (4, 5, 6)]:            # 自动解包赋值<br><br>#-- 列表解析语法<br>    M = [[1,2,3], [4,5,6], [7,8,9]]<br>    res = [sum(row) for row in M]                     # G = [6, 15, 24] 一般的列表解析 生成一个列表<br>    res = [c * 2 for c in 'spam']                     # ['ss', 'pp', 'aa', 'mm']<br>    res = [a * b for a in [1, 2] for b in [4, 5]]     # 多解析过程 返回[4, 5, 8, 10]<br>    res = [a for a in [1, 2, 3] if a &lt; 2]             # 带判断条件的解析过程<br>    res = [a if a &gt; 0 else 0 for a in [-1, 0, 1]]     # 带判断条件的高级解析过程<br>    # 两个列表同时解析：使用zip函数<br>    for teama, teamb in zip(["Packers", "49ers"], ["Ravens", "Patriots"]):<br>        print(teama + " vs. " + teamb)<br>    # 带索引的列表解析：使用enumerate函数<br>    for index, team in enumerate(["Packers", "49ers", "Ravens", "Patriots"]):<br>        print(index, team)                            # 输出0, Packers \n 1, 49ers \n ......<br>    <br>#-- 生成器表达式<br>    G = (sum(row) for row in M)                       # 使用小括号可以创建所需结果的生成器generator object<br>    next(G), next(G), next(G)                         # 输出(6, 15, 24)<br>    G = &#123;sum(row) for row in M&#125;                       # G = &#123;6, 15, 24&#125; 解析语法还可以生成集合和字典<br>    G = &#123;i:sum(M[i]) for i in range(3)&#125;               # G = &#123;0: 6, 1: 15, 2: 24&#125;<br><br>#-- 文档字符串:出现在Module的开端以及其中函数或类的开端 使用三重引号字符串<br>    """<br>    module document<br>    """<br>    def func():<br>        """<br>        function document<br>        """<br>        print()<br>    class Employee(object):<br>        """<br>        class document<br>        """<br>        print()<br>    print(func.__doc__)                # 输出函数文档字符串<br>    print(Employee.__doc__)            # 输出类的文档字符串<br>    <br>#-- 命名惯例:<br>    """<br>    以单一下划线开头的变量名(_X)不会被from module import*等语句导入<br>    前后有两个下划线的变量名(__X__)是系统定义的变量名，对解释器有特殊意义<br>    以两个下划线开头但不以下划线结尾的变量名(__X)是类的本地(私有)变量<br>    """<br><br>#-- 列表解析 in成员关系测试 map sorted zip enumerate内置函数等都使用了迭代协议<br>    'first line' in open('test.txt')   # in测试 返回True或False<br>    list(map(str.upper, open('t')))    # map内置函数<br>    sorted(iter([2, 5, 8, 3, 1]))      # sorted内置函数<br>    list(zip([1, 2], [3, 4]))          # zip内置函数 [(1, 3), (2, 4)]<br>    #lst = [el for i in names for el in i if el.count("e") &gt;= 2 ]<br>#print(lst)<br><br>#-- del语句: 手动删除某个变量<br>    del X<br><br>#-- 获取列表的子表的方法:<br>    x = [1,2,3,4,5,6]<br>    x[:3]                              # 前3个[1,2,3]<br>    x[1:5]                             # 中间4个[2,3,4,5]<br>    x[-3:]                             # 最后3个[4,5,6]<br>    x[::2]                             # 奇数项[1,3,5]<br>    x[1::2]                            # 偶数项[2,4,6]<br>    <br>#-- 手动迭代：iter和next<br>    L = [1, 2]<br>    I = iter(L)                        # I为L的迭代器<br>    I.next()                           # 返回1<br>    I.next()                           # 返回2<br>    I.next()                           # Error:StopIteration<br>    <br>#-- Python中的可迭代对象<br>    """<br>    1.range迭代器<br>    2.map、zip和filter迭代器<br>    3.字典视图迭代器：D.keys()), D.items()等<br>    4.文件类型<br>    """<br><br><br>"""函数语法规则----函数语法规则----函数语法规则----函数语法规则----函数语法规则----函数语法规则----函数语法规则----函数语法规则----函数语法规则----函数语法规则"""<br><br>#-- 函数相关的语句和表达式<br>    myfunc('spam')                     # 函数调用<br>    def myfunc():                      # 函数定义<br>    return None                        # 函数返回值<br>    global a                           # 全局变量<br>    nonlocal x                         # 在函数或其他作用域中使用外层（非全局）变量<br>    yield x                            # 生成器函数返回<br>    lambda                             # 匿名函数<br>    <br>#-- Python函数变量名解析:LEGB原则，即:<br>    <br>    local(functin) --&gt; encloseing function locals --&gt; global(module) --&gt; build-in(python)<br>    #当前作用域局部变量-&gt;外层作用域变量-&gt;当前模块中的全局变量-&gt;python内置变量 。<br>    说明:以下边的函数maker为例 则相对于action而言 X为Local N为Encloseing<br>    global #  在局部引入全局变量<br>    nonlocal # 在局部, 引入离他最近的那一层的变量<br>    <br><br>#-- 嵌套函数举例:工厂函数<br>    def maker(N):<br>        def action(X):<br>            return X ** N<br>        return action<br>    f = maker(2)                       # pass 2 to N<br>    f(3)                               # 9, pass 3 to X<br><br>#-- 嵌套函数举例:lambda实例<br>    def maker(N):<br>        action = (lambda X: X**N)<br>        return action<br>    f = maker(2)                       # pass 2 to N<br>    f(3)                               # 9, pass 3 to X<br><br>#-- nonlocal和global语句的区别<br>    # nonlocal应用于一个嵌套的函数的作用域中的一个名称 例如:<br>    start = 100<br>    def tester(start):<br>        def nested(label):<br>            nonlocal start             # 指定start为tester函数内的local变量 而不是global变量start<br>            print(label, start)<br>            start += 3<br>        return nested<br>    # global为全局的变量 即def之外的变量<br>    def tester(start):<br>        def nested(label):<br>            global start               # 指定start为global变量start<br>            print(label, start)<br>            start += 3<br>        return nested    <br>    <br>#-- 函数参数，不可变参数通过“值”传递，可变参数通过“引用”传递<br>    def f(a, b, c): print(a, b, c)<br>    f(1, 2, 3)                         # 参数位置匹配<br>    f(1, c = 3, b = 2)                 # 参数关键字匹配<br>    def f(a, b=1, c=2): print(a, b, c)<br>    f(1)                               # 默认参数匹配<br>    f(1, 2)                            # 默认参数匹配<br>    f(a = 1, c = 3)                    # 关键字参数和默认参数的混合<br>    # Keyword-Only参数:出现在*args之后 必须用关键字进行匹配<br>    def keyOnly(a, *b, c): print('')   # c就为keyword-only匹配 必须使用关键字c = value匹配<br>    def keyOnly(a, *, b, c): ......    # b c为keyword-only匹配 必须使用关键字匹配<br>    def keyOnly(a, *, b = 1): ......   # b有默认值 或者省略 或者使用关键字参数b = value<br><br>#-- 可变参数匹配: * 和 **<br>    def f(*args): print(args)          # 在元组中收集不匹配的位置参数<br>    f(1, 2, 3)                         # 输出(1, 2, 3)<br>    def f(**args): print(args)         # 在字典中收集不匹配的关键字参数<br>    f(a = 1, b = 2)                    # 输出&#123;'a':1, 'b':2&#125;<br>    def f(a, *b, **c): print(a, b, c)  # 两者混合使用<br>    f(1, 2, 3, x=4, y=5)               # 输出1, (2, 3), &#123;'x':4, 'y':5&#125;<br>    <br>#-- 函数调用时的参数解包: * 和 ** 分别解包元组和字典<br>    func(1, *(2, 3))  &lt;==&gt;  func(1, 2, 3)<br>    func(1, **&#123;'c':3, 'b':2&#125;)  &lt;==&gt;  func(1, b = 2, c = 3)<br>    func(1, *(2, 3), **&#123;'c':3, 'b':2&#125;)  &lt;==&gt;  func(1, 2, 3, b = 2, c = 3)<br>    <br>#-- 函数属性:(自己定义的)函数可以添加属性<br>    def func():.....<br>    func.count = 1                     # 自定义函数添加属性<br>    print.count = 1                    # Error 内置函数不可以添加属性<br>    <br>#-- 函数注解: 编写在def头部行 主要用于说明参数范围、参数类型、返回值类型等<br>    def func(a:'spam', b:(1, 10), c:float) -&gt; int :<br>        print(a, b, c)<br>    func.__annotations__               # &#123;'c':&lt;class 'float'&gt;, 'b':(1, 10), 'a':'spam', 'return':&lt;class 'int'&gt;&#125;<br>    # 编写注解的同时 还是可以使用函数默认值 并且注解的位置位于=号的前边<br>    def func(a:'spam'='a', b:(1, 10)=2, c:float=3) -&gt; int :<br>        print(a, b, c)<br><br>#-- 匿名函数:lambda<br>    f = lambda x, y, z : x + y + z     # 普通匿名函数，使用方法f(1, 2, 3)<br>    f = lambda x = 1, y = 1: x + y     # 带默认参数的lambda函数<br>    def action(x):                     # 嵌套lambda函数<br>        return (lambda y : x + y)<br>    f = lambda: a if xxx() else b      # 无参数的lambda函数，使用方法f()<br><br>#-- lambda函数与map filter reduce函数的结合<br>    list(map((lambda x: x + 1), [1, 2, 3]))              # [2, 3, 4]<br>    list(filter((lambda x: x &gt; 0), range(-4, 5)))        # [1, 2, 3, 4]<br>    functools.reduce((lambda x, y: x + y), [1, 2, 3])    # 6<br>    functools.reduce((lambda x, y: x * y), [2, 3, 4])    # 24<br>    <br>#-- 生成器函数:yield VS return<br>    def gensquare(N):<br>        for i in range(N):<br>            yield i** 2                # 状态挂起 可以恢复到此时的状态<br>    for i in gensquare(5):             # 使用方法<br>        print(i, end = ' ')            # [0, 1, 4, 9, 16]<br>    x = gensquare(2)                   # x是一个生成对象<br>    next(x)                            # 等同于x.__next__() 返回0<br>    next(x)                            # 等同于x.__next__() 返回1<br>    next(x)                            # 等同于x.__next__() 抛出异常StopIteration<br>    <br>#-- 生成器表达式:小括号进行列表解析<br>    G = (x ** 2 for x in range(3))     # 使用小括号可以创建所需结果的生成器generator object<br>    next(G), next(G), next(G)          # 和上述中的生成器函数的返回值一致<br>    #（1）生成器(生成器函数/生成器表达式)是单个迭代对象<br>    G = (x ** 2 for x in range(4))<br>    I1 = iter(G)                       # 这里实际上iter(G) = G<br>    next(I1)                           # 输出0<br>    next(G)                            # 输出1<br>    next(I1)                           # 输出4<br>    #（2）生成器不保留迭代后的结果<br>    gen = (i for i in range(4))<br>    2 in gen                           # 返回True<br>    3 in gen                           # 返回True<br>    1 in gen                           # 返回False，其实检测2的时候，1已经就不在生成器中了，即1已经被迭代过了，同理2、3也不在了<br><br>#-- 本地变量是静态检测的<br>    X = 22                             # 全局变量X的声明和定义<br>    def test():<br>        print(X)                       # 如果没有下一语句 则该句合法 打印全局变量X<br>        X = 88                         # 这一语句使得上一语句非法 因为它使得X变成了本地变量 上一句变成了打印一个未定义的本地变量(局部变量)<br>        if False:                      # 即使这样的语句 也会把print语句视为非法语句 因为:<br>            X = 88                     # Python会无视if语句而仍然声明了局部变量X<br>    def test():                        # 改进<br>        global X                       # 声明变量X为全局变量<br>        print(X)                       # 打印全局变量X<br>        X = 88                         # 改变全局变量X<br>        <br>#-- 函数的默认值是在函数定义的时候实例化的 而不是在调用的时候 例子:<br>    def foo(numbers=[]):               # 这里的[]是可变的<br>        numbers.append(9)    <br>        print(numbers)<br>    foo()                              # first time, like before, [9]<br>    foo()                              # second time, not like before, [9, 9]<br>    foo()                              # third time, not like before too, [9, 9, 9]<br>    # 改进:<br>    def foo(numbers=None):<br>        if numbers is None: numbers = []<br>        numbers.append(9)<br>        print(numbers)<br>    # 另外一个例子 参数的默认值为不可变的:<br>    def foo(count=0):                  # 这里的0是数字, 是不可变的<br>        count += 1<br>        print(count)<br>    foo()                              # 输出1<br>    foo()                              # 还是输出1<br>    foo(3)                             # 输出4<br>    foo()                              # 还是输出1<br>    <br><br>"""函数例子----函数例子----函数例子----函数例子----函数例子----函数例子----函数例子----函数例子----函数例子----函数例子----函数例子----函数例子----函数例子"""<br><br>    """数学运算类"""<br>    abs(x)                              # 求绝对值，参数可以是整型，也可以是复数，若参数是复数，则返回复数的模<br>    complex([real[, imag]])             # 创建一个复数<br>    divmod(a, b)                        # 分别取商和余数，注意：整型、浮点型都可以<br>    float([x])                          # 将一个字符串或数转换为浮点数。如果无参数将返回0.0<br>    int([x[, base]])                    # 将一个字符串或浮点数转换为int类型，base表示进制<br>    long([x[, base]])                   # 将一个字符串或浮点数转换为long类型<br>    pow(x, y)                           # 返回x的y次幂<br>    range([start], stop[, step])        # 产生一个序列，默认从0开始<br>    round(x[, n])                       # 四舍五入<br>    sum(iterable[, start])              # 对集合求和<br>    oct(x)                              # 将一个数字转化为8进制字符串<br>    hex(x)                              # 将一个数字转换为16进制字符串<br>    chr(i)                              # 返回给定int类型对应的ASCII字符<br>    unichr(i)                           # 返回给定int类型的unicode<br>    ord(c)                              # 返回ASCII字符对应的整数<br>    bin(x)                              # 将整数x转换为二进制字符串<br>    bool([x])                           # 将x转换为Boolean类型<br>    <br>    """集合类操作"""<br>    basestring()                        # str和unicode的超类，不能直接调用，可以用作isinstance判断<br>    format(value [, format_spec])       # 格式化输出字符串，格式化的参数顺序从0开始，如“I am &#123;0&#125;,I like &#123;1&#125;”<br>    enumerate(sequence[, start=0])      # 返回一个可枚举的对象，注意它有第二个参数<br>    iter(obj[, sentinel])               # 生成一个对象的迭代器，第二个参数表示分隔符<br>    max(iterable[, args...][key])       # 返回集合中的最大值<br>    min(iterable[, args...][key])       # 返回集合中的最小值<br>    dict([arg])                         # 创建数据字典<br>    list([iterable])                    # 将一个集合类转换为另外一个集合类<br>    set()                               # set对象实例化<br>    frozenset([iterable])               # 产生一个不可变的set<br>    tuple([iterable])                   # 生成一个tuple类型<br>    str([object])                       # 转换为string类型<br>    sorted(iterable[, cmp[, key[, reverse]]])             # 集合排序<br>        L = [('b',2),('a',1),('c',3),('d',4)]<br>        sorted(L, key=lambda x: x[1], reverse=True)       # 使用Key参数和reverse参数<br>        sorted(L, key=lambda x: (x[0], x[1]))             # 使用key参数进行多条件排序，即如果x[0]相同，则比较x[1]<br><br>    """逻辑判断"""<br>    all(iterable)                       # 集合中的元素都为真的时候为真，特别的，若为空串返回为True<br>    any(iterable)                       # 集合中的元素有一个为真的时候为真，特别的，若为空串返回为False<br>    cmp(x, y)                           # 如果x &lt; y ,返回负数；x == y, 返回0；x &gt; y,返回正数<br><br>    """IO操作"""<br>    file(filename [, mode [, bufsize]]) # file类型的构造函数。<br>    input([prompt])                     # 获取用户输入，推荐使用raw_input，因为该函数将不会捕获用户的错误输入，意思是自行判断类型<br>    # 在 Built-in Functions 里有一句话是这样写的：Consider using the raw_input() function for general input from users.<br>    raw_input([prompt])                 # 设置输入，输入都是作为字符串处理<br>    open(name[, mode[, buffering]])     # 打开文件，与file有什么不同？推荐使用open<br>    <br>    """其他"""<br>    callable(object)                    # 检查对象object是否可调用<br>    classmethod(func)                   # 用来说明这个func是个类方法<br>    staticmethod(func)                  # 用来说明这个func为静态方法<br>    dir([object])                       # 不带参数时，返回当前范围内的变量、方法和定义的类型列表；带参数时，返回参数的属性、方法列表。<br>    help(obj)                           # 返回obj的帮助信息<br>    eval(expression)                    # 计算表达式expression的值，并返回<br>    exec(str)                           # 将str作为Python语句执行<br>    execfile(filename)                  # 用法类似exec()，不同的是execfile的参数filename为文件名，而exec的参数为字符串。<br>    filter(function, iterable)          # 构造一个序列，等价于[item for item in iterable if function(item)]，function返回值为True或False的函数<br>        list(filter(bool, range(-3, 4)))# 返回[-3, -2, -1, 1, 2, 3], 没有0<br>    <br>    #反射<br>    hasattr(object, name)               # 判断对象object是否包含名为name的特性\成员<br>    getattr(object, name [, defalut])   # 获取一个类的属性<br>    setattr(object, name, value)        # 设置属性值value . 注意. 这里的value可以是值, 也可以是函数或者方法<br>    delattr(object, name)               # 删除object对象名为name的属性<br>    #反射<br>    #<br>    globals()                           # 返回一个描述当前全局符号表的字典<br>    hash(object)                        # 如果对象object为哈希表类型，返回对象object的哈希值<br>    id(object)                          # 返回对象的唯一标识，一串数字<br>    isinstance(object, classinfo)       # 判断object是否是class的实例<br>        isinstance(1, int)              # 判断是不是int类型<br>        isinstance(1, (int, float))     # isinstance的第二个参数接受一个元组类型<br>    issubclass(class, classinfo)        # 判断class是否为classinfo的子类<br>    locals()                            # 返回当前的变量列表<br>    map(function, iterable, ...)        # 遍历每个元素，执行function操作<br>        list(map(abs, range(-3, 4)))    # 返回[3, 2, 1, 0, 1, 2, 3]<br>    next(iterator[, default])           # 类似于iterator.next()<br>    property([fget[, fset[, fdel[, doc]]]])           # 属性访问的包装类，设置后可以通过c.x=value等来访问setter和getter<br>    reduce(function, iterable[, initializer])         # 合并操作，从第一个开始是前两个参数，然后是前两个的结果与第三个合并进行处理，以此类推<br>        def add(x,y):return x + y <br>        reduce(add, range(1, 11))                     # 返回55 (注:1+2+3+4+5+6+7+8+9+10 = 55)<br>        reduce(add, range(1, 11), 20)                 # 返回75<br>    reload(module)                      # 重新加载模块<br>    repr(object)                        # 将一个对象变幻为可打印的格式<br>    slice(start, stop[, step])          # 产生分片对象<br>    type(object)                        # 返回该object的类型<br>    vars([object])                      # 返回对象的变量名、变量值的字典<br>        a = Class();                    # Class为一个空类<br>        a.name = 'qi', a.age = 9<br>        vars(a)                         # &#123;'name':'qi', 'age':9&#125;<br>    zip([iterable, ...])                # 返回对应数组<br>        list(zip([1, 2, 3], [4, 5, 6])) # [(1, 4), (2, 5), (3, 6)]<br>        a = [1, 2, 3],  b = ["a", "b", "c"]<br>        z = zip(a, b)                   # 压缩：[(1, "a"), (2, "b"), (3, "c")]<br>        zip(*z)                         # 解压缩：[(1, 2, 3), ("a", "b", "c")]<br>    unicode(string, encoding, errors)   # 将字符串string转化为unicode形式，string为encoded string。<br><br>    <br>"""模块Moudle----模块Moudle----模块Moudle----模块Moudle----模块Moudle----模块Moudle----模块Moudle----模块Moudle----模块Moudle----模块Moudle----模块Moudle"""<br><br>#-- Python模块搜索路径:<br>    """<br>    (1)程序的主目录    (2)PYTHONPATH目录 (3)标准链接库目录 (4)任何.pth文件的内容<br>    """<br>    <br>#-- 查看全部的模块搜索路径<br>    import sys<br>    sys.path<br>    sys.argv                            # 获得脚本的参数<br>    sys.builtin_module_names            # 查找内建模块<br>    sys.platform                        # 返回当前平台 出现如： "win32" "linux" "darwin"等<br>    sys.modules                         # 查找已导入的模块<br>    sys.modules.keys()<br>    sys.stdout                          # stdout 和 stderr 都是类文件对象，但是它们都是只写的。它们都没有 read 方法，只有 write 方法<br>    sys.stdout.write("hello")<br>    sys.stderr<br>    sys.stdin   <br><br>#-- 模块的使用代码<br>    import module1, module2             # 导入module1 使用module1.printer()<br>    from module1 import printer         # 导入module1中的printer变量 使用printer()<br>    from module1 import *               # 导入module1中的全部变量 使用不必添加module1前缀<br><br>#-- 重载模块reload: 这是一个内置函数 而不是一条语句<br>    from imp import reload<br>    reload(module)<br>    <br>#-- 模块的包导入:使用点号(.)而不是路径(dir1\dir2)进行导入<br>    import dir1.dir2.mod                # d导入包(目录)dir1中的包dir2中的mod模块 此时dir1必须在Python可搜索路径中<br>    from dir1.dir2.mod import *         # from语法的包导入<br><br>#-- __init__.py包文件:每个导入的包中都应该包含这么一个文件<br>    """<br>    该文件可以为空<br>    首次进行包导入时 该文件会自动执行<br>    高级功能:在该文件中使用__all__列表来定义包(目录)以from*的形式导入时 需要导入什么<br>    """<br>    <br>#-- 包相对导入:使用点号(.) 只能使用from语句<br>    from . import spam                  # 导入当前目录下的spam模块（Python2: 当前目录下的模块, 直接导入即可）<br>    from .spam import name              # 导入当前目录下的spam模块的name属性（Python2: 当前目录下的模块, 直接导入即可，不用加.）<br>    from .. import spam                 # 导入当前目录的父目录下的spam模块<br>    <br>#-- 包相对导入与普通导入的区别<br>    from string import *                # 这里导入的string模块为sys.path路径上的 而不是本目录下的string模块(如果存在也不是)<br>    from .string import *               # 这里导入的string模块为本目录下的(不存在则导入失败) 而不是sys.path路径上的<br>    <br>#-- 模块数据隐藏:最小化from*的破坏<br>    _X                                  # 变量名前加下划线可以防止from*导入时该变量名被复制出去<br>    __all__ = ['x', 'x1', 'x2']         # 使用__all__列表指定from*时复制出去的变量名(变量名在列表中为字符串形式)<br><br>#-- 可以使用__name__进行模块的单元测试:当模块为顶层执行文件时值为'__main__' 当模块被导入时为模块名<br>    if __name__ == '__main__':<br>        doSomething<br>    # 模块属性中还有其他属性，例如：<br>    __doc__                             # 模块的说明文档<br>    __file__                            # 模块文件的文件名，包括全路径<br>    __name__                            # 主文件或者被导入文件<br>    __package__                         # 模块所在的包<br>        <br>#-- import语句from语句的as扩展<br>    import modulename as name<br>    from modulename import attrname as name<br>    <br>#-- 得到模块属性的几种方法 假设为了得到name属性的值<br>    M.name<br>    M.__dict__['name']<br>    sys.modules['M'].name<br>    getattr(M, 'name')<br>    <br><br>"""类与面向对象----类与面向对象----类与面向对象----类与面向对象----类与面向对象----类与面向对象----类与面向对象----类与面向对象----类与面向对象----类与面向对象"""<br><br>#-- 最普通的类<br>    class C1(C2, C3):<br>        spam = 42                       # 数据属性<br>        def __init__(self, name):       # 函数属性:构造函数<br>            self.name = name<br>        def __del__(self):              # 函数属性:析构函数<br>            print("goodbey ", self.name)    <br>    I1 = C1('bob')<br>    <br>#-- Python的类没有基于参数的函数重载<br>    class FirstClass(object):<br>        def test(self, string):<br>            print(string)<br>        def test(self):                 # 此时类中只有一个test函数 即后者test(self) 它覆盖掉前者带参数的test函数<br>            print("hello world")<br><br>#-- 子类扩展超类: 尽量调用超类的方法<br>    class Manager(Person):<br>        def giveRaise(self, percent, bonus = .10):<br>            self.pay = int(self.pay*(1 + percent + bonus))     # 不好的方式 复制粘贴超类代码<br>            Person.giveRaise(self, percent + bonus)            # 好的方式 尽量调用超类方法<br><br>#-- 类内省工具<br>    bob = Person('bob')<br>    bob.__class__                       # &lt;class 'Person'&gt;<br>    bob.__class__.__name__              # 'Person'<br>    bob.__dict__                        # &#123;'pay':0, 'name':'bob', 'job':'Manager'&#125;<br>    <br>#-- 返回1中 数据属性spam是属于类 而不是对象<br>    I1 = C1('bob'); I2 = C2('tom')      # 此时I1和I2的spam都为42 但是都是返回的C1的spam属性<br>    C1.spam = 24                        # 此时I1和I2的spam都为24<br>    I1.spam = 3                         # 此时I1新增自有属性spam 值为3 I2和C1的spam还都为24<br>    <br>#-- 类方法调用的两种方式<br>    instance.method(arg...)         #对象访问,方法<br>    class.method(instance, arg...)  #类名访问,函数<br>    <br>#-- 抽象超类的实现方法<br>    # (1)某个函数中调用未定义的函数 子类中定义该函数<br>        def delegate(self):<br>            self.action()               # 本类中不定义action函数 所以使用delegate函数时就会出错<br>    # (2)定义action函数 但是返回异常<br>        def action(self):<br>            raise NotImplementedError("action must be defined")<br>    # (3)上述的两种方法还都可以定义实例对象 实际上可以利用@装饰器语法生成不能定义的抽象超类<br>        from abc import ABCMeta, abstractmethod<br>        class Super(metaclass = ABCMeta):<br>            @abstractmethod<br>            def action(self): pass<br>        x = Super()                     # 返回 TypeError: Can't instantiate abstract class Super with abstract methods action<br>    <br>#-- # OOP和继承: "is-a"的关系<br>    class A(B):<br>        pass<br>    a = A()<br>    isinstance(a, B)                    # 返回True, A是B的子类 a也是B的一种<br>    # OOP和组合: "has-a"的关系<br>    pass<br>    # OOP和委托: "包装"对象 在Python中委托通常是以"__getattr__"钩子方法实现的, 这个方法会拦截对不存在属性的读取<br>    # 包装类(或者称为代理类)可以使用__getattr__把任意读取转发给被包装的对象<br>    class wrapper(object):<br>        def __init__(self, object):<br>            self.wrapped = object<br>        def __getattr(self, attrname):<br>            print('Trace: ', attrname)<br>            return getattr(self.wrapped, attrname)<br>    # 注:这里使用getattr(X, N)内置函数以变量名字符串N从包装对象X中取出属性 类似于X.__dict__[N]<br>    x = wrapper([1, 2, 3])<br>    x.append(4)                         # 返回 "Trace: append" [1, 2, 3, 4]<br>    x = wrapper(&#123;'a':1, 'b':2&#125;)<br>    list(x.keys())                      # 返回 "Trace: keys" ['a', 'b']<br><br>#-- 类的伪私有属性:使用__attr<br>    class C1(object):<br>        def __init__(self, name):<br>            self.__name = name          # 此时类的__name属性为伪私有属性 原理 它会自动变成self._C1__name = name<br>        def __str__(self):<br>            return 'self.name = %s' % self.__name<br>    I = C1('tom')<br>    print(I)                            # 返回 self.name = tom<br>    I.__name = 'jeey'                   # 这里无法访问 __name为伪私有属性<br>    I._C1__name = 'jeey'                # 这里可以修改成功 self.name = jeey<br>    <br>#-- 类方法是对象:无绑定类方法对象 / 绑定实例方法对象<br>    class Spam(object):<br>        def doit(self, message):<br>            print(message)<br>        def selfless(message)<br>            print(message)<br>    obj = Spam()<br>    x = obj.doit                        # 类的绑定方法对象 实例 + 函数<br>    x('hello world')<br>    x = Spam.doit                       # 类的无绑定方法对象 类名 + 函数<br>    x(obj, 'hello world')<br>    x = Spam.selfless                   # 类的无绑定方法函数 在3.0之前无效<br>    x('hello world')<br><br>#-- 获取对象信息: 属性和方法<br>    a = MyObject()<br>    dir(a)                              # 使用dir函数<br>    hasattr(a, 'x')                     # 测试是否有x属性或方法 即a.x是否已经存在<br>    setattr(a, 'y', 19)                 # 设置属性或方法 等同于a.y = 19<br>    getattr(a, 'z', 0)                  # 获取属性或方法 如果属性不存在 则返回默认值0<br>    #这里有个小技巧，setattr可以设置一个不能访问到的属性，即只能用getattr获取<br>    setattr(a, "can't touch", 100)      # 这里的属性名带有空格，不能直接访问<br>    getattr(a, "can't touch", 0)        # 但是可以用getattr获取<br><br>#-- 为类动态绑定属性或方法: MethodType方法<br>    # 一般创建了一个class的实例后, 可以给该实例绑定任何属性和方法, 这就是动态语言的灵活性<br>    class Student(object):<br>        pass<br>    s = Student()<br>    s.name = 'Michael'                  # 动态给实例绑定一个属性<br>    def set_age(self, age):             # 定义一个函数作为实例方法<br>        self.age = age<br>    from types import MethodType<br>    s.set_age = MethodType(set_age, s)  # 给实例绑定一个方法 类的其他实例不受此影响<br>    s.set_age(25)                       # 调用实例方法<br>    Student.set_age = MethodType(set_age, Student)    # 为类绑定一个方法 类的所有实例都拥有该方法<br><br>    <br>"""类的高级话题----类的高级话题----类的高级话题----类的高级话题----类的高级话题----类的高级话题----类的高级话题----类的高级话题----类的高级话题----类的高级话题"""<br>    <br>#-- 多重继承: "混合类", 搜索方式"从下到上 从左到右 广度优先"<br>    class A(B, C):<br>        pass<br><br>#-- 类的继承和子类的初始化<br>    # 1.子类定义了__init__方法时，若未显示调用基类__init__方法，python不会帮你调用。<br>    # 2.子类未定义__init__方法时，python会自动帮你调用首个基类的__init__方法，注意是首个。<br>    # 3.子类显示调用基类的初始化函数：<br>    class FooParent(object):<br>        def __init__(self, a):<br>            self.parent = 'I\'m the Parent.'<br>            print('Parent:a=' + str(a))<br>        def bar(self, message):<br>            print(message + ' from Parent')<br>    class FooChild(FooParent):<br>        def __init__(self, a):<br>            FooParent.__init__(self, a)<br>            print('Child:a=' + str(a))<br>        def bar(self, message):<br>            FooParent.bar(self, message)<br>            print(message + ' from Child')<br>    fooChild = FooChild(10)<br>    fooChild.bar('HelloWorld')<br>    <br>#-- #实例方法 / 静态方法 / 类方法<br>    class Methods(object):<br>        def imeth(self, x): print(self, x)      # 实例方法：传入的是实例和数据，操作的是实例的属性<br>        def smeth(x): print(x)                  # 静态方法：只传入数据 不传入实例，操作的是类的属性而不是实例的属性<br>        def cmeth(cls, x): print(cls, x)        # 类方法：传入的是类对象和数据<br>        smeth = staticmethod(smeth)             # 调用内置函数，也可以使用@staticmethod<br>        cmeth = classmethod(cmeth)              # 调用内置函数，也可以使用@classmethod<br>    obj = Methods()<br>    obj.imeth(1)                                # 实例方法调用 &lt;__main__.Methods object...&gt; 1<br>    Methods.imeth(obj, 2)                       # &lt;__main__.Methods object...&gt; 2<br>    Methods.smeth(3)                            # 静态方法调用 3<br>    obj.smeth(4)                                # 这里可以使用实例进行调用<br>    Methods.cmeth(5)                            # 类方法调用 &lt;class '__main__.Methods'&gt; 5<br>    obj.cmeth(6)                                # &lt;class '__main__.Methods'&gt; 6<br>    <br>#-- 函数装饰器:是它后边的函数的运行时的声明 由@符号以及后边紧跟的"元函数"(metafunction)组成<br>        @staticmethod<br>        def smeth(x): print(x)<br>    # 等同于:<br>        def smeth(x): print(x)<br>        smeth = staticmethod(smeth)<br>    # 同理<br>        @classmethod<br>        def cmeth(cls, x): print(x)<br>    # 等同于<br>        def cmeth(cls, x): print(x)<br>        cmeth = classmethod(cmeth)<br>    <br>#-- 类修饰器:是它后边的类的运行时的声明 由@符号以及后边紧跟的"元函数"(metafunction)组成<br>        def decorator(aClass):.....<br>        @decorator<br>        class C(object):....<br>    # 等同于:<br>        class C(object):....<br>        C = decorator(C)<br><br>#-- 限制class属性: __slots__属性<br>    class Student(object):<br>        __slots__ = ('name', 'age')             # 限制Student及其实例只能拥有name和age属性<br>    # __slots__属性只对当前类起作用, 对其子类不起作用<br>    # __slots__属性能够节省内存<br>    # __slots__属性可以为列表list，或者元组tuple<br>    <br>#-- 类属性高级话题: @property<br>    # 假设定义了一个类:C，该类必须继承自object类，有一私有变量_x<br>    class C(object):<br>        def __init__(self):<br>            self.__x = None<br>    # 第一种使用属性的方法<br>        def getx(self):<br>            return self.__x<br>        def setx(self, value):<br>            self.__x = value<br>        def delx(self):<br>            del self.__x<br>        x = property(getx, setx, delx, '')<br>    # property函数原型为property(fget=None,fset=None,fdel=None,doc=None)<br>    # 使用<br>    c = C()<br>    c.x = 100                         # 自动调用setx方法<br>    y = c.x                           # 自动调用getx方法<br>    del c.x                           # 自动调用delx方法<br>    # 第二种方法使用属性的方法<br>        @property<br>        def x(self):<br>            return self.__x<br>        @x.setter<br>        def x(self, value):<br>           self.__x = value<br>        @x.deleter<br>        def x(self):<br>           del self.__x<br>    # 使用<br>    c = C()<br>    c.x = 100                         # 自动调用setter方法<br>    y = c.x                           # 自动调用x方法<br>    del c.x                           # 自动调用deleter方法<br>    <br>#-- 定制类: 重写类的方法<br>    # (1)__str__方法、__repr__方法: 定制类的输出字符串<br>    # (2)__iter__方法、next方法: 定制类的可迭代性<br>    class Fib(object):<br>        def __init__(self):<br>            self.a, self.b = 0, 1     # 初始化两个计数器a，b<br>        def __iter__(self):<br>            return self               # 实例本身就是迭代对象，故返回自己<br>        def next(self):<br>            self.a, self.b = self.b, self.a + self.b<br>            if self.a &gt; 100000:       # 退出循环的条件<br>                raise StopIteration()<br>            return self.a             # 返回下一个值<br>    for n in Fib():<br>        print(n)                      # 使用<br>    # (3)__getitem__方法、__setitem__方法: 定制类的下标操作[] 或者切片操作slice<br>    class Indexer(object):<br>        def __init__(self):<br>            self.data = &#123;&#125;<br>        def __getitem__(self, n):             # 定义getitem方法<br>            print('getitem:', n)                <br>            return self.data[n]<br>        def __setitem__(self, key, value):    # 定义setitem方法<br>            print('setitem:key = &#123;0&#125;, value = &#123;1&#125;'.format(key, value))<br>            self.data[key] = value<br>    test = Indexer()<br>    test[0] = 1;   test[3] = '3'              # 调用setitem方法<br>    print(test[0])                            # 调用getitem方法<br>    # (4)__getattr__方法: 定制类的属性操作<br>    class Student(object):<br>        def __getattr__(self, attr):          # 定义当获取类的属性时的返回值<br>            if attr=='age':<br>                return 25                     # 当获取age属性时返回25<br>        raise AttributeError('object has no attribute: %s' % attr)<br>        # 注意: 只有当属性不存在时 才会调用该方法 且该方法默认返回None 需要在函数最后引发异常<br>    s = Student()<br>    s.age                                     # s中age属性不存在 故调用__getattr__方法 返回25<br>    # (5)__call__方法: 定制类的'可调用'性<br>    class Student(object):<br>        def __call__(self):                   # 也可以带参数<br>            print('Calling......')<br>    s = Student()<br>    s()                                       # s变成了可调用的 也可以带参数<br>    callable(s)                               # 测试s的可调用性 返回True<br>    #    (6)__len__方法：求类的长度<br>    def __len__(self):<br>        return len(self.data)<br>    <br>#-- 动态创建类type()<br>    # 一般创建类 需要在代码中提前定义<br>        class Hello(object):<br>            def hello(self, name='world'):<br>                print('Hello, %s.' % name)<br>        h = Hello()<br>        h.hello()                             # Hello, world<br>        type(Hello)                           # Hello是一个type类型 返回&lt;class 'type'&gt;<br>        type(h)                               # h是一个Hello类型 返回&lt;class 'Hello'&gt;<br>    # 动态类型语言中 类可以动态创建 type函数可用于创建新类型<br>        def fn(self, name='world'):           # 先定义函数<br>            print('Hello, %s.' % name)<br>        Hello = type('Hello', (object,), dict(hello=fn))    # 创建Hello类 type原型: type(name, bases, dict)<br>        h = Hello()                           # 此时的h和上边的h一致<br><br><br>"""异常相关----异常相关----异常相关----异常相关----异常相关----异常相关----异常相关----异常相关----异常相关----异常相关----异常相关----异常相关----异常相关"""<br>    <br>#-- #捕获异常: <br>        try:<br>        except:                               # 捕获所有的异常 等同于except Exception:<br>        except name:                          # 捕获指定的异常<br>        except name, value:                   # 捕获指定的异常和额外的数据(实例)<br>        except (name1, name2):<br>        except (name1, name2), value:<br>        except name4 as X:<br>        else:                                 # 如果没有发生异常<br>        finally:                              # 总会执行的部分<br>    # 引发异常: raise子句(raise IndexError)<br>        raise &lt;instance&gt;                      # raise instance of a class, raise IndexError()<br>        raise &lt;class&gt;                         # make and raise instance of a class, raise IndexError<br>        raise                                 # reraise the most recent exception<br><br>#-- Python3.x中的异常链: raise exception from otherException<br>    except Exception as X:<br>        raise IndexError('Bad') from X<br>        <br>#-- assert子句: assert &lt;test&gt;, &lt;data&gt;<br>    assert x &lt; 0, 'x must be negative'<br>    <br>#-- with/as环境管理器:作为常见的try/finally用法模式的替代方案<br>    with expression [as variable], expression [as variable]:<br>    # 例子:<br>        with open('test.txt') as myfile:<br>            for line in myfile: print(line)<br>    # 等同于:<br>        myfile = open('test.txt')<br>        try:<br>            for line in myfile: print(line)<br>        finally:<br>            myfile.close()<br><br>#-- 用户自定义异常: class Bad(Exception):.....<br>    """<br>    Exception超类 / except基类即可捕获到其所有子类<br>    Exception超类有默认的打印消息和状态 当然也可以定制打印显示:<br>    """<br>    class MyBad(Exception):<br>        def __str__(self):<br>            return '定制的打印消息'<br>    try:<br>        MyBad()<br>    except MyBad as x:<br>        print(x)<br>    <br>#-- 用户定制异常数据<br>    class FormatError(Exception):<br>        def __init__(self, line ,file):<br>            self.line = line<br>            self.file = file<br>    try:<br>        raise FormatError(42, 'test.py')<br>    except FormatError as X:<br>        print('Error at ', X.file, X.line)<br>    # 用户定制异常行为(方法):以记录日志为例<br>    class FormatError(Exception):<br>        logfile = 'formaterror.txt'<br>        def __init__(self, line ,file):<br>            self.line = line<br>            self.file = file<br>        def logger(self):<br>            open(self.logfile, 'a').write('Error at ', self.file, self.line)<br>    try:<br>        raise FormatError(42, 'test.py')<br>    except FormatError as X:<br>        X.logger()<br><br>#-- 关于sys.exc_info:允许一个异常处理器获取对最近引发的异常的访问<br>    try:<br>        ......<br>    except:<br>        # 此时sys.exc_info()返回一个元组(type, value, traceback)<br>        # type:正在处理的异常的异常类型<br>        # value:引发的异常的实例<br>        # traceback:堆栈信息<br>        <br>#-- 异常层次<br>    BaseException<br>    +-- SystemExit<br>    +-- KeyboardInterrupt<br>    +-- GeneratorExit<br>    +-- Exception<br>        +-- StopIteration<br>        +-- ArithmeticError<br>        +-- AssertionError<br>        +-- AttributeError<br>        +-- BufferError<br>        +-- EOFError<br>        +-- ImportError<br>        +-- LookupError<br>        +-- MemoryError<br>        +-- NameError<br>        +-- OSError<br>        +-- ReferenceError<br>        +-- RuntimeError<br>        +-- SyntaxError<br>        +-- SystemError<br>        +-- TypeError<br>        +-- ValueError<br>        +-- Warning<br><br>    <br>"""Unicode和字节字符串---Unicode和字节字符串----Unicode和字节字符串----Unicode和字节字符串----Unicode和字节字符串----Unicode和字节字符串----Unicode和字节字符串"""<br><br>#-- Python的字符串类型<br>    """Python2.x"""<br>    # 1.str表示8位文本和二进制数据<br>    # 2.unicode表示宽字符Unicode文本<br>    """Python3.x"""<br>    # 1.str表示Unicode文本（8位或者更宽）<br>    # 2.bytes表示不可变的二进制数据<br>    # 3.bytearray是一种可变的bytes类型<br><br>#-- 字符编码方法<br>    """ASCII"""                   # 一个字节，只包含英文字符，0到127，共128个字符，利用函数可以进行字符和数字的相互转换<br>    ord('a')                      # 字符a的ASCII码为97，所以这里返回97<br>    chr(97)                       # 和上边的过程相反，返回字符'a'<br>    """Latin-1"""                 # 一个字节，包含特殊字符，0到255，共256个字符，相当于对ASCII码的扩展<br>    chr(196)                      # 返回一个特殊字符：Ä<br>    """Unicode"""                 # 宽字符，一个字符包含多个字节，一般用于亚洲的字符集，比如中文有好几万字<br>    """UTF-8"""                   # 可变字节数，小于128的字符表示为单个字节，128到0X7FF之间的代码转换为两个字节，0X7FF以上的代码转换为3或4个字节<br>    # 注意：可以看出来，ASCII码是Latin-1和UTF-8的一个子集<br>    # 注意：utf-8是unicode的一种实现方式，unicode、gbk、gb2312是编码字符集<br>    <br>#-- 查看Python中的字符串编码名称，查看系统的编码<br>    import encodings<br>    help(encoding)<br>    import sys<br>    sys.platform                  # 'win64'<br>    sys.getdefaultencoding()      # 'utf-8'<br>    sys.getdefaultencoding()      # 返回当前系统平台的编码类型<br>    sys.getsizeof(object)         # 返回object占有的bytes的大小<br>    <br>#-- 源文件字符集编码声明: 添加注释来指定想要的编码形式 从而改变默认值 注释必须出现在脚本的第一行或者第二行<br>    """说明：其实这里只会检查#和coding:utf-8，其余的字符都是为了美观加上的"""<br>    # _*_ coding: utf-8 _*_<br>    # coding = utf-8<br>    <br>#-- #编码: 字符串 --&gt; 原始字节       #解码: 原始字节 --&gt; 字符串<br><br>#-- Python3.x中的字符串应用<br>    s = '...'                     # 构建一个str对象，不可变对象<br>    b = b'...'                    # 构建一个bytes对象，不可变对象<br>    s[0], b[0]                    # 返回('.', 113)<br>    s[1:], b[1:]                  # 返回('..', b'..')<br>    B = B"""<br>        xxxx<br>        yyyy<br>        """<br>    # B = b'\nxxxx\nyyyy\n'<br>    # 编码，将str字符串转化为其raw bytes形式：<br>        str.encode(encoding = 'utf-8', errors = 'strict')<br>        bytes(str, encoding)<br>    # 编码例子：<br>        S = 'egg'<br>        S.encode()                    # b'egg'<br>        bytes(S, encoding = 'ascii')  # b'egg'<br>    # 解码，将raw bytes字符串转化为str形式：<br>        bytes.decode(encoding = 'utf-8', errors = 'strict')<br>        str(bytes_or_buffer[, encoding[, errors]])<br>    # 解码例子：<br>        B = b'spam'<br>        B.decode()                # 'spam'<br>        str(B)                    # "b'spam'"，不带编码的str调用，结果为打印该bytes对象<br>        str(B, encoding = 'ascii')# 'spam'，带编码的str调用，结果为转化该bytes对象<br>    <br>#-- Python2.x的编码问题<br>    u = u'汉'<br>    print repr(u)                 # u'\xba\xba'<br>    s = u.encode('UTF-8')<br>    print repr(s)                 # '\xc2\xba\xc2\xba'<br>    u2 = s.decode('UTF-8')<br>    print repr(u2)                # u'\xba\xba'<br>    # 对unicode进行解码是错误的<br>    s2 = u.decode('UTF-8')        # UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-1: ordinal not in range(128)<br>    # 同样，对str进行编码也是错误的<br>    u2 = s.encode('UTF-8')        # UnicodeDecodeError: 'ascii' codec can't decode byte 0xc2 in position 0: ordinal not in range(128)<br><br>#-- bytes对象<br>    B = b'abc'<br>    B = bytes('abc', 'ascii')<br>    B = bytes([97, 98, 99])<br>    B = 'abc'.encode()<br>    # bytes对象的方法调用基本和str类型一致 但:B[0]返回的是ASCII码值97, 而不是b'a'<br>    <br>#-- #文本文件: 根据Unicode编码来解释文件内容，要么是平台的默认编码，要么是指定的编码类型<br>    # 二进制文件：表示字节值的整数的一个序列 open('bin.txt', 'rb')<br>    <br>#-- Unicode文件<br>    s = 'A\xc4B\xe8C'             # s = 'A?BèC'  len(s) = 5<br>    #手动编码<br>        l = s.encode('latin-1')   # l = b'A\xc4B\xe8C'  len(l) = 5<br>        u = s.encode('utf-8')     # u = b'A\xc3\x84B\xc3\xa8C'  len(u) = 7<br>    #文件输出编码<br>        open('latindata', 'w', encoding = 'latin-1').write(s)<br>        l = open('latindata', 'rb').read()                        # l = b'A\xc4B\xe8C'  len(l) = 5<br>        open('uft8data', 'w', encoding = 'utf-8').write(s)<br>        u = open('uft8data', 'rb').read()                         # u = b'A\xc3\x84B\xc3\xa8C'  len(u) = 7<br>    #文件输入编码<br>        s = open('latindata', 'r', encoding = 'latin-1').read()   # s = 'A?BèC'  len(s) = 5<br>        s = open('latindata', 'rb').read().decode('latin-1')      # s = 'A?BèC'  len(s) = 5<br>        s = open('utf8data', 'r', encoding = 'utf-8').read()      # s = 'A?BèC'  len(s) = 5<br>        s = open('utf8data', 'rb').read().decode('utf-8')         # s = 'A?BèC'  len(s) = 5<br>        <br><br>"""其他----其他----其他----其他----其他----其他----其他----其他----其他----其他----其他----其他----其他----其他----其他----其他----其他----其他----其他"""<br><br>#-- Python实现任意深度的赋值 例如a[0] = 'value1'; a[1][2] = 'value2'; a[3][4][5] = 'value3'<br>    class MyDict(dict):<br>        def __setitem__(self, key, value):                 # 该函数不做任何改动 这里只是为了输出<br>            print('setitem:', key, value, self)<br>            super().__setitem__(key, value)<br>        def __getitem__(self, item):                       # 主要技巧在该函数<br>            print('getitem:', item, self)                  # 输出信息<br>            # 基本思路: a[1][2]赋值时 需要先取出a[1] 然后给a[1]的[2]赋值<br>            if item not in self:                           # 如果a[1]不存在 则需要新建一个dict 并使得a[1] = dict<br>                temp = MyDict()                            # 新建的dict: temp<br>                super().__setitem__(item, temp)            # 赋值a[1] = temp<br>                return temp                                # 返回temp 使得temp[2] = value有效<br>            return super().__getitem__(item)               # 如果a[1]存在 则直接返回a[1]<br>    # 例子:<br>        test = MyDict()<br>        test[0] = 'test'<br>        print(test[0])<br>        test[1][2] = 'test1'<br>        print(test[1][2])<br>        test[1][3] = 'test2'<br>        print(test[1][3])<br><br>#-- Python中的多维数组<br>    lists = [0] * 3                                        # 扩展list，结果为[0, 0, 0]<br>    lists = [[]] * 3                                       # 多维数组，结果为[[], [], []]，但有问题，往下看<br>    lists[0].append(3)                                     # 期望看到的结果[[3], [], []]，实际结果[[3], [3], [3]]，原因：list*n操作，是浅拷贝，如何避免？往下看<br>    lists = [[] for i in range(3)]                         # 多维数组，结果为[[], [], []]<br>    lists[0].append(3)                                     # 结果为[[3], [], []]<br>    lists[1].append(6)                                     # 结果为[[3], [6], []]<br>    lists[2].append(9)                                     # 结果为[[3], [6], [9]]<br>    lists = [[[] for j in range(4)] for i in range(3)]     # 3行4列，且每一个元素为[]<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python内置函数filter，map，lambda,递归</title>
    <link href="/2018/09/20/python%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0filter%EF%BC%8Cmap%EF%BC%8Clambda,%E9%80%92%E5%BD%92/"/>
    <url>/2018/09/20/python%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0filter%EF%BC%8Cmap%EF%BC%8Clambda,%E9%80%92%E5%BD%92/</url>
    
    <content type="html"><![CDATA[<h4 id="lambda匿名函数"><a href="#lambda匿名函数" class="headerlink" title="lambda匿名函数"></a>lambda匿名函数</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 计算n的n次⽅</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span><span class="hljs-params">(n)</span>:</span>   <br><span class="hljs-keyword">return</span> n**n<br>print(func(<span class="hljs-number">10</span>))<br><br><br>f = <span class="hljs-keyword">lambda</span> n: n**n<br>print(f(<span class="hljs-number">10</span>))<br></code></pre></div></td></tr></table></figure><p>lambda表⽰的是匿名函数. 不需要⽤def来声明, ⼀句话就可以声明出⼀个函数</p><p>语法 = lambda 参数：返回值</p><p>注意：</p><ol><li>函数的参数可以是多个，逗号隔开</li><li>匿名函数不管多复杂，只能写一行，逻辑运行后直接返回数据。</li><li>返回值和正常函数一样。</li></ol><h4 id="sorted-排序函数"><a href="#sorted-排序函数" class="headerlink" title="sorted()排序函数"></a>sorted()排序函数</h4><p>语法：sorted(Iterable, key=None,reverse=False)</p><p>​    Iterable：可迭代对象</p><p>​    key：排序规则（排序函数）sorted内部会将可迭代对象中每一个元素传递给一个参数，根据函数结果进行排序</p><p>​    reverse ：是否是倒叙，reverse=True 倒叙 ，reverse=False 正序</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><span class="hljs-comment">#自带的排序功能</span><br>lst = [<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">78</span>,<span class="hljs-number">91</span>,<span class="hljs-number">14</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br>lst.sort() <span class="hljs-comment"># lst自带的排序功能</span><br>li = sorted(lst)<br>print(li)<br>lst = [<span class="hljs-string">"馒头"</span>,<span class="hljs-string">"包子"</span>,<span class="hljs-string">"欧阳大锤"</span>,<span class="hljs-string">"小笼包"</span>,<span class="hljs-string">"赵四"</span>,<span class="hljs-string">"刘能"</span>,<span class="hljs-string">"头"</span>]<br>li = sorted(lst)<br><br><span class="hljs-comment">#结合函数进行排序</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span><span class="hljs-params">(name)</span>:</span><br>   <span class="hljs-keyword">return</span> len(name) <span class="hljs-comment"># 返回一个数字</span><br><br>li = sorted(lst,key=func)<br>print(li)<br><span class="hljs-comment">#结合lambda</span><br>lst = [<span class="hljs-string">"馒头"</span>,<span class="hljs-string">"包子"</span>,<span class="hljs-string">"欧阳大锤"</span>,<span class="hljs-string">"小笼包"</span>,<span class="hljs-string">"赵四"</span>,<span class="hljs-string">"刘能"</span>,<span class="hljs-string">"头"</span>]<br><br>li = sorted(lst,key=<span class="hljs-keyword">lambda</span> name:len(name)%<span class="hljs-number">3</span>)<br>print(li)<br><br><br><br>lst = [&#123;<span class="hljs-string">"id"</span>: <span class="hljs-number">1</span>, <span class="hljs-string">"name"</span>: <span class="hljs-string">'alex'</span>, <span class="hljs-string">"age"</span>: <span class="hljs-number">18</span>&#125;,<br>      &#123;<span class="hljs-string">"id"</span>: <span class="hljs-number">2</span>, <span class="hljs-string">"name"</span>: <span class="hljs-string">'wusir'</span>, <span class="hljs-string">"age"</span>: <span class="hljs-number">16</span>&#125;,<br>      &#123;<span class="hljs-string">"id"</span>: <span class="hljs-number">3</span>, <span class="hljs-string">"name"</span>: <span class="hljs-string">'taibai'</span>, <span class="hljs-string">"age"</span>: <span class="hljs-number">17</span>&#125;]<br>按照年龄对学⽣信息进⾏排序<br>print(lst[<span class="hljs-number">0</span>][<span class="hljs-string">"age"</span>])<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">age2</span><span class="hljs-params">(lst)</span>:</span><br>   <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(lst)):<br>      <span class="hljs-keyword">return</span> lst[i][<span class="hljs-string">"age"</span>]想<br>li = sorted(lst,key=age2)<br><br>print(li)<span class="hljs-comment">## </span><br><br><span class="hljs-comment">#流程:把迭代对象的每一项传递给函数,函数返回一个数字,根据这个数字完成排序</span><br><br><span class="hljs-comment">#通过lambda</span><br><br>li = sorted(lst,key=<span class="hljs-keyword">lambda</span> dic:dic[<span class="hljs-string">'age'</span>])<br><br>li = sorted(lst,key=<span class="hljs-keyword">lambda</span> age2:age2[<span class="hljs-string">'age'</span>])<br><br><br><br><br> 按照年龄对学⽣信息进⾏排序<br><span class="hljs-comment"># def func(dic):</span><br><span class="hljs-comment">#     return dic['age']</span><br><span class="hljs-comment"># l2 = sorted(lst, key=func) # 流程: 把可迭代对象的每一项传递给函数. 函数返回一个数字. 根据这个数字完成排序</span><br><span class="hljs-comment"># print(l2)</span><br><span class="hljs-comment"># l3 = sorted(lst, key=lambda dic: dic['age'])</span><br><span class="hljs-comment"># l4 = sorted(lst, key=lambda dic: len(dic['name']))</span><br><span class="hljs-comment"># l4 = sorted(lst, key=lambda dic: ascii(dic['name'][0]))  # ord()</span><br><span class="hljs-comment"># print(l4)</span><br></code></pre></div></td></tr></table></figure><h4 id="filter-筛选函数"><a href="#filter-筛选函数" class="headerlink" title="filter()筛选函数"></a>filter()筛选函数</h4><p>语法：filter(funciton， Iterable)</p><p>​    function:用来筛选的函数，filter会自动把iterable（可迭代对象）的元素传递给function，然后function返回True或False判断是否保留此项数据</p><p>​    Iterabel：可迭代对象</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br>lst = [<span class="hljs-number">23</span>,<span class="hljs-number">28</span>,<span class="hljs-number">15</span>,<span class="hljs-number">27</span>,<span class="hljs-number">25</span>,<span class="hljs-number">23</span>]<br><span class="hljs-comment">#通过函数</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span><span class="hljs-params">(age)</span>:</span><br>   <span class="hljs-keyword">return</span> age &gt; <span class="hljs-number">18</span><br>fu = filter(func,lst )<br>print(lsit(fu))<br><span class="hljs-comment">#匿名函数</span><br>f = filter(<span class="hljs-keyword">lambda</span> age:age&gt;<span class="hljs-number">18</span>,lst)<br><br>print(f)<span class="hljs-comment">#&lt;filter object at 0x1099c5710&gt;</span><br><br>print(<span class="hljs-string">"__iter__"</span> <span class="hljs-keyword">in</span> dir(f))<br>print(f.__next__())<br>print(f.__next__())<br>print(f.__next__())<br><span class="hljs-keyword">for</span> el <span class="hljs-keyword">in</span> f:<br>   print(el)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span><span class="hljs-params">(age)</span>:</span><br>    <span class="hljs-keyword">return</span> age &gt; <span class="hljs-number">18</span> <span class="hljs-keyword">and</span> age %<span class="hljs-number">2</span> ==<span class="hljs-number">0</span><br><br><br>f1 = filter(<span class="hljs-keyword">lambda</span> age:age&gt;<span class="hljs-number">18</span> <span class="hljs-keyword">and</span> age %<span class="hljs-number">2</span> ==<span class="hljs-number">0</span>,lst)<br>print(sorted(f))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> f1:<br>   print(i)<br><br><br><br><br><span class="hljs-comment">#筛选年龄大于等于17岁</span><br>lst = [&#123;<span class="hljs-string">"id"</span>: <span class="hljs-number">1</span>, <span class="hljs-string">"name"</span>: <span class="hljs-string">'alex'</span>, <span class="hljs-string">"age"</span>: <span class="hljs-number">18</span>&#125;,<br>       &#123;<span class="hljs-string">"id"</span>: <span class="hljs-number">2</span>, <span class="hljs-string">"name"</span>: <span class="hljs-string">'wusir'</span>, <span class="hljs-string">"age"</span>: <span class="hljs-number">16</span>&#125;,<br>       &#123;<span class="hljs-string">"id"</span>: <span class="hljs-number">3</span>, <span class="hljs-string">"name"</span>: <span class="hljs-string">'taibai'</span>, <span class="hljs-string">"age"</span>: <span class="hljs-number">17</span>&#125;]<br><br><br>f2= filter(<span class="hljs-keyword">lambda</span> dic:dic[<span class="hljs-string">"age"</span>] &gt;=<span class="hljs-number">17</span> ,lst)<br>f2= filter(<span class="hljs-keyword">lambda</span> dic:dic[<span class="hljs-string">"age"</span>] &gt;=<span class="hljs-number">17</span> ,lst)<br><br><span class="hljs-comment">#for i in f2:</span><br><span class="hljs-comment">#       print(i)</span><br><br><span class="hljs-comment"># # 筛选出年龄大于等于17岁的人</span><br>print(list(sorted(filter(<span class="hljs-keyword">lambda</span> dic: dic[<span class="hljs-string">'age'</span>] &gt;= <span class="hljs-number">17</span>, lst), key=<span class="hljs-keyword">lambda</span> dic: dic[<span class="hljs-string">'age'</span>]))<br></code></pre></div></td></tr></table></figure><h4 id="map-映射函数"><a href="#map-映射函数" class="headerlink" title="map()映射函数"></a>map()映射函数</h4><p>​    语法:map(funtction,iterable) 可以对每一个元素依次只想function（item)，执行结果组成一个list返回</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br>lst = [<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>]<br>ll = [i*i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> lst]<br>print(ll)<br>m = map(<span class="hljs-keyword">lambda</span> x:x**<span class="hljs-number">2</span>,lst) <span class="hljs-comment">#m = map(lambda x:x*x,lst)</span><br>print(list(m))<br><br>lst = [<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>]<br>ll = [i*i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> lst]<br>print(ll)<br><br>ll2 = map(<span class="hljs-keyword">lambda</span> x:x*x,lst)<br>print(list(ll2))<br><br><span class="hljs-comment">#另外map也支持多个sequence，这就要求function也支持相应数量的参数输入：</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(x, y)</span>:</span> <span class="hljs-keyword">return</span> x+y<br><span class="hljs-meta">&gt;&gt;&gt; </span>map(add, range(<span class="hljs-number">8</span>), range(<span class="hljs-number">8</span>))<br>[<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>, <span class="hljs-number">14</span>]<br><br><span class="hljs-comment"># 计算两个列表相同位置的数据的和</span><br>lst1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>lst2 = [<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">10</span>]<br>print(list(map(<span class="hljs-keyword">lambda</span> x,y:x+y,lst1,lst2)))<br></code></pre></div></td></tr></table></figure><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><p>在函数中调⽤函数本⾝. 就是递归</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span><span class="hljs-params">()</span>:</span>     <br>print(<span class="hljs-string">"我是谁"</span>)     <br>func() <br>func()<br></code></pre></div></td></tr></table></figure><p>在python中递归的深度最⼤到998 </p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foo</span><span class="hljs-params">(n)</span>:</span>     <br>print(n)     <br>n += <span class="hljs-number">1</span>     <br>foo(n) <br>foo(<span class="hljs-number">1</span>)<br></code></pre></div></td></tr></table></figure><p>递归的应⽤:<br>我们可以使⽤递归来遍历各种树形结构, 比如我们的⽂件夹系统. 可以使⽤递归来遍历该⽂件夹中的所有⽂件</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> os<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span><span class="hljs-params">(file_path,ceng)</span>:</span><br>    lst = os.listdir(file_path) <span class="hljs-comment">#获取到当前⽂件夹中的所有⽂件</span><br>    <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> lst: <span class="hljs-comment">#获取到当前⽂件夹中的所有⽂件</span><br>        full_path = os.path.join(file_path,file) <span class="hljs-comment"># 加⼊⽂件夹 获取到⽂件夹+⽂件</span><br>        <span class="hljs-keyword">if</span> os.path.isdir(full_path): <span class="hljs-comment"># 如果该路径下的⽂件是⽂件</span><br>            print(<span class="hljs-string">"\t"</span>*ceng,file)<br>            func(full_path,ceng +<span class="hljs-number">1</span>) <span class="hljs-comment"># 继续进⾏相同的操作</span><br>        <span class="hljs-keyword">else</span>:<br>            print(<span class="hljs-string">"\t"</span>*ceng,file) <span class="hljs-comment"># 递归出⼝. 最终在这⾥隐含着return</span><br><span class="hljs-comment">#递归遍历⽬录下所有⽂件read('../oldboy/', 0)</span><br>func(<span class="hljs-string">"./"</span>,<span class="hljs-number">0</span>)<br></code></pre></div></td></tr></table></figure><h4 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h4><p>···</p>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 深浅拷贝</title>
    <link href="/2018/09/17/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <url>/2018/09/17/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
    
    <content type="html"><![CDATA[<h5 id="共享引用和增强赋值"><a href="#共享引用和增强赋值" class="headerlink" title="共享引用和增强赋值"></a>共享引用和增强赋值</h5><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#共享引用及在原处修改：对于可变对象，要注意尽量不要共享引用！</span><br>    <span class="hljs-comment">#共享引用和相等测试：</span><br>        L = [<span class="hljs-number">1</span>], M = [<span class="hljs-number">1</span>], L <span class="hljs-keyword">is</span> M            <span class="hljs-comment"># 返回False</span><br>        L = M = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], L <span class="hljs-keyword">is</span> M           <span class="hljs-comment"># 返回True，共享引用</span><br><span class="hljs-comment">#增强赋值和共享引用：普通+号会生成新的对象，而增强赋值+=会在原处修改</span><br>        L = M = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]<br>        L = L + [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]                      <span class="hljs-comment"># L = [1, 2, 3, 4], M = [1, 2]</span><br>        L += [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]                         <span class="hljs-comment"># L = [1, 2, 3, 4], M = [1, 2, 3, 4]</span><br></code></pre></div></td></tr></table></figure><p>赋值简单的拷贝对象，两个id相同</p><p>转载自：会发光的二极管</p><p>原文链接：<a href="https://link.zhihu.com/?target=http%3A//www.jianshu.com/p/efa9dd51f5cc" target="_blank" rel="noopener">谈谈python中的深拷贝和浅拷贝</a></p><p>最近面试被问到python中深拷贝和浅拷贝的知识<br>这里进行下总结，以便今后复习<br>python中的深拷贝和浅拷贝和java里面的概念是一样的，所谓浅拷贝就是对引用的拷贝，所谓深拷贝就是对对象的资源的拷贝。<br>首先，对赋值操作我们要有以下认识：</p><ol><li>赋值是将一个对象的地址赋值给一个变量，让变量指向该地址（ 旧瓶装旧酒 ）。(共享引用)</li><li>修改不可变对象（<code>str</code>、<code>tuple</code>）需要开辟新的空间（不可变对象<strong>不能修改</strong>，<strong>只能替换</strong>）</li><li>修改可变对象（<code>list</code>等）不需要开辟新的空间</li></ol><ul><li>浅拷贝仅仅复制了容器中元素的地址</li></ul><p>  <code>b = a[:]</code>,<code>copy.copy(a)</code></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a=[<span class="hljs-string">'hello'</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]]<br><span class="hljs-meta">&gt;&gt;&gt; </span>b=a[:] <span class="hljs-comment">#b = copy.copy(a)</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>[id(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> a]<br>[<span class="hljs-number">55792504</span>, <span class="hljs-number">6444104</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>[id(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> b]<br>[<span class="hljs-number">55792504</span>, <span class="hljs-number">6444104</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>a[<span class="hljs-number">0</span>]=<span class="hljs-string">'world'</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a[<span class="hljs-number">1</span>].append(<span class="hljs-number">4</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>print(a)<br>[<span class="hljs-string">'world'</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]]<br><span class="hljs-meta">&gt;&gt;&gt; </span>print(b)<br>[<span class="hljs-string">'hello'</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]]<br></code></pre></div></td></tr></table></figure><p>这里可以看出，未修改前，a和b中元素的地址都是相同的，不可变的hello<br>和可变的list地址都一样，说明浅拷贝知识将容器内的元素的地址复制了一份。这可以通过修改后，b中字符串没改变，但是list元素随着a相应改变得到验证。</p><blockquote><p>浅拷贝是在另一块地址中创建一个新的变量或容器，但是容器内的元素的地址均是源对象的元素的地址的拷贝。也就是说新的容器中指向了旧的元素（ 新瓶装旧酒 ）。</p></blockquote><ul><li>深拷贝，完全拷贝了一个副本，容器内部元素地址都不一样</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> copy <span class="hljs-keyword">import</span> deepcopy<br><span class="hljs-meta">&gt;&gt;&gt; </span>a=[<span class="hljs-string">'hello'</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]]<br><span class="hljs-meta">&gt;&gt;&gt; </span>b=deepcopy(a)<br><span class="hljs-meta">&gt;&gt;&gt; </span>[id(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> a]<br>[<span class="hljs-number">55792504</span>, <span class="hljs-number">55645000</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>[id(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> b]<br>[<span class="hljs-number">55792504</span>, <span class="hljs-number">58338824</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>a[<span class="hljs-number">0</span>]=<span class="hljs-string">'world'</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a[<span class="hljs-number">1</span>].append(<span class="hljs-number">4</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><br><span class="hljs-meta">&gt;&gt;&gt; </span>print(a)<br>[<span class="hljs-string">'world'</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]]<br><span class="hljs-meta">&gt;&gt;&gt; </span>print(b)<br>[<span class="hljs-string">'hello'</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]]<br></code></pre></div></td></tr></table></figure><p>这里可以看出，深拷贝后，a和b的地址以及a和b中的元素地址均不同，这是完全拷贝的一个副本，修改a后，发现b没有发生任何改变，因为b是一个完全的副本，元素地址与a均不同，a修改不影响b。</p><blockquote><p>深拷贝是在另一块地址中创建一个新的变量或容器，同时容器内的元素的地址也是新开辟的，仅仅是值相同而已，是完全的副本。也就是说（ 新瓶装新酒 ）。</p></blockquote><p>转载自：会发光的二极管</p><p>原文链接：<a href="https://link.zhihu.com/?target=http%3A//www.jianshu.com/p/efa9dd51f5cc" target="_blank" rel="noopener">谈谈python中的深拷贝和浅拷贝</a></p><h2 id="自定义拷贝机制"><a href="#自定义拷贝机制" class="headerlink" title="自定义拷贝机制"></a>自定义拷贝机制</h2><p>使用 <code>_copy_</code> 和 <code>__deepcopy__</code> 可以完成对一个对象拷贝的定制。这里不展开了，有机会再探讨自定义拷贝。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>Python中对象的赋值都是进行对象引用（内存地址）传递</li><li>使用<code>copy.copy()</code>，<code>a = lis[:]</code>可以进行对象的<strong>浅拷贝</strong>，它复制了对象，但对于对象中的元素，依然使用<strong>原始的引用.</strong>,内存地址相同</li><li>如果需要复制一个<strong>容器对象</strong> <strong>（<code>list</code>，<code>dict</code>等）</strong>，以及它里面的所有元素（包含元素的子元素），可以使用<code>copy.deepcopy()</code>进行深拷贝，创建了新的对象。</li><li>对于非容器类型（如<code>str</code>,<strong>数字、字符串、和其他’原子’类型的对象</strong>）没有被拷贝一说</li><li>如果元祖变量只包含原子类型对象，则不能深拷贝，看下面的例子</li></ul><p>####</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> copy<br><br><span class="hljs-comment">#目的是更改数据后，原来的数据不变，而拷贝后的数据会随时更新！</span><br>dic = &#123;<br><span class="hljs-string">"cpu"</span>:[<span class="hljs-number">80</span>,],<br><span class="hljs-string">"mem"</span>:[<span class="hljs-number">80</span>,],<br><span class="hljs-string">"disk"</span>:[<span class="hljs-number">80</span>,]<br>&#125;<br>print(<span class="hljs-string">"before:"</span>,dic)<br><br><span class="hljs-comment">#new_dic = copy.copy(dic)     ##浅拷贝后的数据更新会把原来和新的字典内容的数据都更新！</span><br>shallow_cpy = copy.copy(dic) <span class="hljs-comment">#浅拷贝</span><br>shallow_cpy[<span class="hljs-string">'cpu'</span>] = <span class="hljs-number">532</span><br>print(<span class="hljs-string">'newshallow'</span>,shallow_cpy)<br>new_dic = copy.deepcopy(dic)   <span class="hljs-comment">##深拷贝只更新拷贝后的数据，而原来的数据保留不变！</span><br>new_dic[<span class="hljs-string">"cpu"</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">50</span><br>print(dic)<br>print(new_dic)<br></code></pre></div></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br>a[<span class="hljs-number">1</span>] = a<br>print(a[<span class="hljs-number">1</span>])<br><span class="hljs-comment">#打印结果</span><br> <br>[<span class="hljs-number">1</span>, [...]]<br></code></pre></div></td></tr></table></figure><p><a href="https://www.cnblogs.com/wilber2013/p/4645353.html" target="_blank" rel="noopener">图解深浅拷贝</a></p><p><a href="https://songlee24.github.io/2014/08/15/python-FAQ-02/" target="_blank" rel="noopener">区别</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python编码，文件编码的操作</title>
    <link href="/2018/09/12/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%EF%BC%88character%20encoding,fileoperate/"/>
    <url>/2018/09/12/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%EF%BC%88character%20encoding,fileoperate/</url>
    
    <content type="html"><![CDATA[<h1 id="Python2-amp-3-编码区别"><a href="#Python2-amp-3-编码区别" class="headerlink" title="Python2&amp;3 编码区别"></a>Python2&amp;3 编码区别</h1><h5 id="Python2-X中"><a href="#Python2-X中" class="headerlink" title="Python2.X中"></a>Python2.X中</h5><p>​    编码格式默认 <code>ASCII</code>，字符串存在两种格式， <code>str</code> ,<code>unicode</code></p><p>因为受系统的影响所以，Python 2.x在头部加上一行编码声明。</p><p>编码的转换,需要转换为<code>unicode</code>为中间,</p><p><code>s.decode(&#39;utf-8&#39;)</code></p><p>受系统</p><p>Win GB2312</p><p>Linux 默认UTF-8</p><h5 id="Python3-X中"><a href="#Python3-X中" class="headerlink" title="Python3.X中"></a>Python3.X中</h5><p>编码默认<code>unicode</code>，python3中默认<code>unicode</code>所以字符串被直接处理作为中文，在python2有的字节串是展示不出来的。</p><p> 不受系统的影响统一为unicode，py文件默认为UTF-8可以不用声明</p><h5 id="判断编码"><a href="#判断编码" class="headerlink" title="判断编码"></a>判断编码</h5><p>1、使用isinstance(s, str)来判断一个字符串是否为一般字符串（str为ascii类型的字符串，utf-8、utf-16、GB2312、GBK等都是ascii类型的字符串）；</p><p>2、使用type()或者.<strong>class</strong></p><h5 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h5><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> chardet<br><br> data =open(<span class="hljs-string">u"ff.txt"</span>, <span class="hljs-string">"rb"</span>).read() <br><br> chardet.detect(data) <br><br>&#123;<span class="hljs-string">'encoding'</span>: <span class="hljs-string">'GB2312'</span>, <span class="hljs-string">'confidence'</span>: <span class="hljs-number">0.99</span>, <span class="hljs-string">'language'</span>: <span class="hljs-string">'Chinese'</span>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="字符编码（character-encoding）"><a href="#字符编码（character-encoding）" class="headerlink" title="字符编码（character encoding）"></a>字符编码（<strong>character encodin</strong>g）</h4><p>8 bit = 1Byte(字节)</p><p>编码:</p><ul><li><p>ASCII.（American Standard Code for Information Interchange，汉字内码扩展规范）</p><p>8bit. 1Byte</p></li><li><p>GBK.（汉字内码扩展规范） 国标码. 2Byte +&gt;&gt; 1字符</p><p>GB2312（中国国家标准简体中文字符集） 16bit, 2byte 两个字节表示一个字符</p><p>GB18030 与GBK与GB2312不同的是，GB18030采用单字节、双字节和四字节三种方式对字符编码</p><p>GB2312 &lt; GBK &lt; GB18030</p></li><li><p>Unicode. 万国码. 32bit, 4byte ()</p></li><li>UTF-8. 可变长度的Unicode.<br>英文: 1byte<br>欧洲: 2byte<br>中文: 3byte</li><li>编码之后的数据bytes<br>bytes.decode() 解码</li></ul><h5 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h5><ul><li>encode: 将默认编码（unicode)转换为其他编码。</li><li>decode: 将默认或者指定编码字符串转换为 unicode。</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"> s = <span class="hljs-string">"he"</span> ; s<br>    <br>  <br>s.decode(); u <span class="hljs-comment"># UTF-8，gbk  -&gt; UNICODE </span><br><br>gb = s.encode(<span class="hljs-string">"gb2312"</span>);gb<span class="hljs-comment"># UTF-8 -&gt; GB2312</span><br>gb.decode(<span class="hljs-string">"gb2312"</span>)<span class="hljs-comment"># 可以将其转换成 UNICODE。</span><br><br>s.encode <span class="hljs-comment"># UNICODE -&gt; utf-8或gbk</span><br><span class="hljs-string">u'\u4e2d\u56fd\u4eba'</span><br>gb.decode(<span class="hljs-string">"gb2312"</span>).encode() <span class="hljs-comment">#然后再转换成 UTF-8</span><br></code></pre></div></td></tr></table></figure><p><a href="http://python.jobbole.com/88967/" target="_blank" rel="noopener">更多</a></p><h4 id="文件的操作"><a href="#文件的操作" class="headerlink" title="文件的操作"></a>文件的操作</h4><figure class="highlight livecodeserver"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">基于对位置的<br><br><span class="hljs-built_in">seek</span><br><br><span class="hljs-number">0</span>，以文件开头，不限定打开方式。其它的两种限定要以b模式打开<br><br><span class="hljs-number">1</span>， 相对于上次光标停留的位置<br><br><span class="hljs-number">2</span>，从文件未尾，倒序。位置要用负数表示<br>       文件操作<br>            <span class="hljs-built_in">open</span>(文件路径, mode=<span class="hljs-string">"模式"</span>, encoding=<span class="hljs-string">"编码"</span>)<br>            模式: r, w, <span class="hljs-keyword">a</span>, r+, w+, <span class="hljs-keyword">a</span>+, rb, wb, ab<br>            <span class="hljs-keyword">for</span>循环可以迭代文件句柄. 拿到的是一行一行的内容<br>            <span class="hljs-built_in">seek</span>()移动光标<br>            tell()查看光标位置<br><br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(xxxx) <span class="hljs-keyword">as</span> f:<br>                操作<br><br>            文件修改:<br>               从源文件中读取内容. 修改, 然后写入到新文件中. 删除源文件. 重命名新文件<br></code></pre></div></td></tr></table></figure><p>1B bytes (字节) = 8bit </p><p>Utf-8 中，中文1 字符 = 3 字节</p><p>seek（3）*<em>UTF-8中 <code>一个中文 3 个字节</code></em> 读取<code>1个字符</code></p><p>read(n) 读取<code>n个字符</code>，rb模式则读取的是<code>n个字节</code></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">with</span> open(<span class="hljs-string">'te.txt'</span>,<span class="hljs-string">'r'</span>) <span class="hljs-keyword">as</span> f1:<br>    connet = f1.read(<span class="hljs-number">1</span>) <span class="hljs-comment">#读取1个字节</span><br>    <span class="hljs-comment">#read(n) 读取n个字符，rb模式则读取的是n个字节</span><br>    f1.seek(<span class="hljs-number">3</span>) <span class="hljs-comment">#一个中文字三个字节</span><br>    conn2 = f1.read()<br>    print(connet)<br>    print(conn2)<br></code></pre></div></td></tr></table></figure><ol><li><p>seek(n) 光标移动到n位置, 注意, <strong>移动的单位是byte. 所以如果是UTF-8的中⽂文部分要</strong><br><strong>是3的倍数.</strong></p></li><li><p>通常我们使⽤用seek都是移动到开头或者结尾.<br> 移动到开头: seek(0)<br> 移动到结尾: seek(0,2) seek的第⼆二个参数表⽰示的是从哪个位置进⾏行行偏移, <strong>默认是0, 表</strong> </p><p><strong>⽰示开头, 1表⽰示当前位置, 2表⽰示结尾</strong> </p></li></ol><p><a href="https://www.douban.com/note/651149148/" target="_blank" rel="noopener">一字符</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker Cheat Sheet</title>
    <link href="/2018/05/20/Docker_cheat_sheet/"/>
    <url>/2018/05/20/Docker_cheat_sheet/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker-Cheat-Sheet"><a href="#Docker-Cheat-Sheet" class="headerlink" title="Docker Cheat Sheet"></a>Docker Cheat Sheet</h1><p><strong>想要一起来完善这份速查表吗？请看<a href="#贡献手册contributing">贡献手册</a>部分！</strong></p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#为何使用-docker">为何使用 Docker</a></li><li><a href="#系统环境">系统环境</a></li><li><a href="#安装">安装</a></li><li><a href="#容器container">容器(Containers)</a></li><li><a href="#镜像images">镜像(Images)</a></li><li><a href="#网络networks">网络(Networks)</a></li><li><a href="#仓管中心和仓库registry--repository">仓管中心和仓库(Registry &amp; Repository)</a></li><li><a href="#dockerfile">Dockerfile</a></li><li><a href="#层layers">层(Layers)</a></li><li><a href="#链接links">链接(Links)</a></li><li><a href="#卷标volumes">卷标(Volumes)</a></li><li><a href="#暴露端口exposing-ports">暴露端口(Exposing Ports)</a></li><li><a href="#最佳实践">最佳实践</a></li><li><a href="#安全security">安全</a></li><li><a href="#小贴士">小贴士</a></li><li><a href="#贡献手册contributing">贡献手册(Contributing)</a></li></ul><h2 id="为何使用-Docker"><a href="#为何使用-Docker" class="headerlink" title="为何使用 Docker"></a>为何使用 Docker</h2><p>“通过 Docker, 开发者可以使用任何语言任何工具创建任何应用。“Dockerized” 的应用是完全可移植的，能在任何地方运行 - 不管是同事的 OS X 和 Windows 笔记本，或是在云端运行的 Ubuntu QA 服务，还是在虚拟机运行的 Red Hat 产品数据中心。</p><p> Docker Hub 上有 13,000+ 的应用，开发者可以从中选取一个进行快速扩展开发。Docker 跟踪管理变更和依赖关系，让系统管理员能更容易理解开发人员是如何让应用运转起来的。而开发者可以通过 Docker Hub 的共有/私有仓库，构建他们的自动化编译，与其他合作者共享成果。</p><p>Docker 帮助开发者更快地构建和发布高质量的应用。” – <a href="https://www.docker.com/what-docker/#copy1" target="_blank" rel="noopener">什么是 Docker</a></p><h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><p>我用的是 <a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">Oh My Zsh</a> ，和 <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins#docker" target="_blank" rel="noopener">Docker 插件</a> ，它可以自动补全 docker 的命令。YMMV。</p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>3.10.x 内核是能运行 Docker 的<a href="https://docs.docker.com/engine/installation/binaries/#check-kernel-dependencies" target="_blank" rel="noopener">最低要求</a>。</p><h3 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h3><p>10.8 “Mountain Lion” 或者更新的版本。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Linux-1"><a href="#Linux-1" class="headerlink" title="Linux"></a>Linux</h3><p>Docker 提供了快速安装脚本：</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">curl -sSL http<span class="hljs-variable">s:</span>//<span class="hljs-built_in">get</span>.docker.<span class="hljs-keyword">com</span>/ | <span class="hljs-keyword">sh</span><br></code></pre></div></td></tr></table></figure><p>如果你不想执行一个不明不白的 shell 脚本，那么请看<a href="https://docs.docker.com/engine/installation/linux/" target="_blank" rel="noopener">安装教程</a>，选择你在用的发行版本。  </p><p>如果你是一个 Docker 超新手，那么我建议你先去看看<a href="https://docs.docker.com/engine/getstarted/" target="_blank" rel="noopener">系列教程</a>。</p><h3 id="Mac-OS-X"><a href="#Mac-OS-X" class="headerlink" title="Mac OS X"></a>Mac OS X</h3><p>下载和安装 <a href="https://docs.docker.com/toolbox/overview/" target="_blank" rel="noopener">Docker Toolbox</a>。<a href="https://docs.docker.com/docker-for-mac/" target="_blank" rel="noopener">Docker For Mac</a> 很赞，但是它的安装和 VirtualBox 不太一样。详情请查阅<a href="https://docs.docker.com/docker-for-mac/docker-toolbox/" target="_blank" rel="noopener">比较</a>。</p><blockquote><p><strong>注意</strong> 如果你已经有安装了 docker toolbox，那么你可能会考虑通过 <a href="https://docs.docker.com/machine/install-machine/" target="_blank" rel="noopener">Docker Machine</a> 安装包(不管是从 URL 或是 <code>docker-machine upgrade default</code>)升级，它确实会完成 docker-machine 的升级。但是它不会帮你升级 docker 版本 – <code>docker-machine</code> 变成了 <code>1.10.3</code> 而 <code>docker</code> 还是原来的 <code>1.8.3</code> 或者你之前的什么版本。</p><p>所以你最好是通过 Docker Toolbox DMG 文件来升级，它会一次性的帮你处理好所有的升级。</p></blockquote><p>安装好 Docker Toolbox 之后，通过 VirtualBox provider 安装带 Docker Machine 的 VM:</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker-machine create <span class="hljs-attribute">--driver</span>=virtualbox<span class="hljs-built_in"> default<br></span>docker-machine ls<br>eval <span class="hljs-string">"<span class="hljs-variable">$(docker-machine env default)</span>"</span><br></code></pre></div></td></tr></table></figure><p>然后启动 container:</p><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker <span class="hljs-keyword">run</span><span class="bash"> hello-world</span><br></code></pre></div></td></tr></table></figure><p>好了，你现在有了一个运行中的 Docker container 了。</p><p>如果你是一个 Docker 超新手，那么我建议你先去看看<a href="https://docs.docker.com/engine/getstarted/" target="_blank" rel="noopener">系列教程</a>。</p><h2 id="容器-Container"><a href="#容器-Container" class="headerlink" title="容器(Container)"></a>容器(Container)</h2><p><a href="http://etherealmind.com/basics-docker-containers-hypervisors-coreos/" target="_blank" rel="noopener">最基本的 Docker 进程</a>。容器(Container)之于虚拟机(Virtual Machine)就好比线程之于进程。或者你可以把他们想成是 chroots on steroids。</p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><ul><li><a href="https://docs.docker.com/engine/reference/commandline/create" target="_blank" rel="noopener"><code>docker create</code></a> 创建一个容器但是不启动。</li><li><a href="https://docs.docker.com/engine/reference/commandline/rename/" target="_blank" rel="noopener"><code>docker rename</code></a> 允许重命名容器。</li><li><a href="https://docs.docker.com/engine/reference/commandline/run" target="_blank" rel="noopener"><code>docker run</code></a> 在同一个操作中创建并启动一个容器。</li><li><a href="https://docs.docker.com/engine/reference/commandline/rm" target="_blank" rel="noopener"><code>docker rm</code></a> 删除容器。</li><li><a href="https://docs.docker.com/engine/reference/commandline/update/" target="_blank" rel="noopener"><code>docker update</code></a> 更新容器的资源限制。</li></ul><p>如果你想要一个临时容器，<code>docker run --rm</code> 会在容器停止之后删除它。</p><p>如果你想映射宿主(host)的一个文件夹到 docker 容器，<code>docker run -v $HOSTDIR:$DOCKERDIR</code>。参考 <a href="https://github.com/wsargent/docker-cheat-sheet/#volumes" target="_blank" rel="noopener">Volumes</a>。</p><p>如果你想同时删除和容器关联的 volumes ，那么在删除容器的时候必须包含 -v 选项，像这样 <code>docker rm -v</code>。</p><p>在 docker 1.10 中还有一个 <a href="https://docs.docker.com/engine/admin/logging/overview/" target="_blank" rel="noopener">logging driver</a>，每个容器可以独立使用。如果你想执行 docker 并带上自定义日志驱动，这样 <code>docker run --log-driver=syslog</code></p><h3 id="启动和停止"><a href="#启动和停止" class="headerlink" title="启动和停止"></a>启动和停止</h3><ul><li><a href="https://docs.docker.com/engine/reference/commandline/start" target="_blank" rel="noopener"><code>docker start</code></a> 启动容器。</li><li><a href="https://docs.docker.com/engine/reference/commandline/stop" target="_blank" rel="noopener"><code>docker stop</code></a> 停止运行中的容器。</li><li><a href="https://docs.docker.com/engine/reference/commandline/restart" target="_blank" rel="noopener"><code>docker restart</code></a> 停止之后再启动容器。</li><li><a href="https://docs.docker.com/engine/reference/commandline/pause/" target="_blank" rel="noopener"><code>docker pause</code></a> 暂停运行中的容器，将其 “冻结” 在当前状态。</li><li><a href="https://docs.docker.com/engine/reference/commandline/unpause/" target="_blank" rel="noopener"><code>docker unpause</code></a> 结束容器暂停状态。</li><li><a href="https://docs.docker.com/engine/reference/commandline/wait" target="_blank" rel="noopener"><code>docker wait</code></a> 阻塞，到运行中的容器停止为止。</li><li><a href="https://docs.docker.com/engine/reference/commandline/kill" target="_blank" rel="noopener"><code>docker kill</code></a> 向运行中容器发送 SIGKILL 指令。</li><li><a href="https://docs.docker.com/engine/reference/commandline/attach" target="_blank" rel="noopener"><code>docker attach</code></a> 链接到运行中容器。</li></ul><p>如果你想整合容器到<a href="https://docs.docker.com/engine/admin/host_integration/" target="_blank" rel="noopener">宿主进程管理(host process manager)</a>，那么以 <code>-r=false</code> 启动守护进程(daemon)然后使用 <code>docker start -a</code>。</p><p>如果你想通过宿主暴露容器的端口(ports)，请看<a href="#exposing-ports">暴露端口</a>一节。</p><p>故障 docker 实例的重启策略在<a href="http://container42.com/2014/09/30/docker-restart-policies/" target="_blank" rel="noopener">这里</a>。</p><h4 id="CPU-限制"><a href="#CPU-限制" class="headerlink" title="CPU 限制"></a>CPU 限制</h4><p>你可以限制 CPU，包括使用所有 CPU 的百分比，或者使用特定内核数。</p><p>比如，你可以设置 <a href="https://docs.docker.com/engine/reference/run/#/cpu-share-constraint" target="_blank" rel="noopener"><code>cpu-shares</code></a> 。这个设置看起来有点奇怪 – 1024 的意思是 100% CPU，因此如果你希望容器使用全体 CPU 内核的 50%，应将其设置为 512。更多信息，请查阅 <a href="https://goldmann.pl/blog/2014/09/11/resource-management-in-docker/#_cpu" target="_blank" rel="noopener">https://goldmann.pl/blog/2014/09/11/resource-management-in-docker/#_cpu</a> :</p><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker <span class="hljs-built_in">run</span> -ti <span class="hljs-comment">--c 512 agileek/cpuset-test</span><br></code></pre></div></td></tr></table></figure><p>你可以只对某些 CPU 内核使用 <a href="https://docs.docker.com/engine/reference/run/#/cpuset-constraint" target="_blank" rel="noopener"><code>cpuset-cpus</code></a>]。请参阅 <a href="https://agileek.github.io/docker/2014/08/06/docker-cpuset/" target="_blank" rel="noopener">https://agileek.github.io/docker/2014/08/06/docker-cpuset/</a> 获取更多细节以及一些不错的视频:</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker <span class="hljs-builtin-name">run</span> -ti <span class="hljs-attribute">--cpuset-cpus</span>=0,4,6 agileek/cpuset-test<br></code></pre></div></td></tr></table></figure><p>注意，Docker 在容器内仍然可以<strong>看到</strong>所有的 CPU – 虽然它只是用了其中一部分。请查阅 <a href="https://github.com/docker/docker/issues/20770" target="_blank" rel="noopener">https://github.com/docker/docker/issues/20770</a> 获取更多细节。</p><h4 id="内存限制"><a href="#内存限制" class="headerlink" title="内存限制"></a>内存限制</h4><p>你同样可以在 Docker 设置<a href="https://docs.docker.com/engine/reference/run/#/user-memory-constraints" target="_blank" rel="noopener">内存限制</a> :</p><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker <span class="hljs-built_in">run</span> -<span class="hljs-keyword">it</span> -m <span class="hljs-number">300</span>M ubuntu:<span class="hljs-number">14.04</span> /bin/bash<br></code></pre></div></td></tr></table></figure><h4 id="能力-Capabilities"><a href="#能力-Capabilities" class="headerlink" title="能力(Capabilities)"></a>能力(Capabilities)</h4><p>Linux 的 capability 可以通过使用 <code>cap-add</code> 和 <code>cap-drop</code> 设置。请参阅 <a href="https://docs.docker.com/engine/reference/run/#/runtime-privilege-and-linux-capabilities" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/run/#/runtime-privilege-and-linux-capabilities</a> 获取更多细节。这有助于提高安全性。</p><p>如需要挂载基于 FUSE 文件系统，你需要同时结合 –cap-add 和 –device 使用:</p><figure class="highlight jboss-cli"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker run <span class="hljs-params">--rm</span> -it <span class="hljs-params">--cap-add</span> SYS_ADMIN <span class="hljs-params">--device</span> <span class="hljs-string">/dev/fuse</span> sshfs<br></code></pre></div></td></tr></table></figure><p>授予对单个设备访问权限:</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker <span class="hljs-builtin-name">run</span> -it <span class="hljs-attribute">--device</span>=/dev/ttyUSB0 debian bash<br></code></pre></div></td></tr></table></figure><p>授予所有设备访问权限:</p><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker <span class="hljs-built_in">run</span> -<span class="hljs-keyword">it</span> <span class="hljs-comment">--privileged -v /dev/bus/usb:/dev/bus/usb debian bash</span><br></code></pre></div></td></tr></table></figure><p>有关容器特权的更多详情请参考<a href="https://docs.docker.com/engine/reference/run/#/runtime-privilege-and-linux-capabilities" target="_blank" rel="noopener">这里</a></p><h3 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h3><ul><li><a href="https://docs.docker.com/engine/reference/commandline/ps" target="_blank" rel="noopener"><code>docker ps</code></a> 查看运行中的所有容器。</li><li><a href="https://docs.docker.com/engine/reference/commandline/logs" target="_blank" rel="noopener"><code>docker logs</code></a> 从容器中获取日志。(你也可以使用自定义日志驱动，不过在 1.10 中，它只支持 <code>json-file</code> 和 <code>journald</code>)</li><li><a href="https://docs.docker.com/engine/reference/commandline/inspect" target="_blank" rel="noopener"><code>docker inspect</code></a> 查看某个容器的所有信息(包括 IP 地址)。</li><li><a href="https://docs.docker.com/engine/reference/commandline/events" target="_blank" rel="noopener"><code>docker events</code></a> 从容器中获取事件(events)。</li><li><a href="https://docs.docker.com/engine/reference/commandline/port" target="_blank" rel="noopener"><code>docker port</code></a> 查看容器的公开端口。</li><li><a href="https://docs.docker.com/engine/reference/commandline/top" target="_blank" rel="noopener"><code>docker top</code></a> 查看容器中活动进程。</li><li><a href="https://docs.docker.com/engine/reference/commandline/stats" target="_blank" rel="noopener"><code>docker stats</code></a> 查看容器的资源使用情况统计信息。</li><li><a href="https://docs.docker.com/engine/reference/commandline/diff" target="_blank" rel="noopener"><code>docker diff</code></a> 查看容器的 FS 中有变化文件信息。</li></ul><p><code>docker ps -a</code> 查看所有容器，包括正在运行的和已停止的。</p><p><code>docker stats --all</code> 显示正在运行的容器列表 </p><h3 id="导入-导出"><a href="#导入-导出" class="headerlink" title="导入 / 导出"></a>导入 / 导出</h3><ul><li><a href="https://docs.docker.com/engine/reference/commandline/cp" target="_blank" rel="noopener"><code>docker cp</code></a> 在容器和本地文件系统之间复制文件或文件夹。</li><li><a href="https://docs.docker.com/engine/reference/commandline/export" target="_blank" rel="noopener"><code>docker export</code></a> 将容器的文件系统切换为压缩包(tarball archive stream)输出到 STDOUT。</li></ul><h3 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h3><ul><li><a href="https://docs.docker.com/engine/reference/commandline/exec" target="_blank" rel="noopener"><code>docker exec</code></a> 在容器中执行命令。</li></ul><p>比如，进入正在运行的容器，在名为 foo 的容器中打开一个新的 shell 进程: <code>docker exec -it foo /bin/bash</code>.</p><h2 id="镜像-Images"><a href="#镜像-Images" class="headerlink" title="镜像(Images)"></a>镜像(Images)</h2><p>镜像是<a href="https://docs.docker.com/engine/understanding-docker/#how-does-a-docker-image-work" target="_blank" rel="noopener">docker 容器的模板</a>。</p><h3 id="生命周期-1"><a href="#生命周期-1" class="headerlink" title="生命周期"></a>生命周期</h3><ul><li><a href="https://docs.docker.com/engine/reference/commandline/images" target="_blank" rel="noopener"><code>docker images</code></a> 查看所有镜像。</li><li><a href="https://docs.docker.com/engine/reference/commandline/import" target="_blank" rel="noopener"><code>docker import</code></a> 从压缩文件中创建镜像。</li><li><a href="https://docs.docker.com/engine/reference/commandline/build" target="_blank" rel="noopener"><code>docker build</code></a> 从 Dockerfile 创建镜像。</li><li><a href="https://docs.docker.com/engine/reference/commandline/commit" target="_blank" rel="noopener"><code>docker commit</code></a> 为容器创建镜像，如果容器正在运行则会临时暂停。</li><li><a href="https://docs.docker.com/engine/reference/commandline/rmi" target="_blank" rel="noopener"><code>docker rmi</code></a> 删除镜像。</li><li><a href="https://docs.docker.com/engine/reference/commandline/load" target="_blank" rel="noopener"><code>docker load</code></a> 通过 STDIN 从压缩包加载镜像，包括镜像和标签(images and tags) (0.7 起).</li><li><a href="https://docs.docker.com/engine/reference/commandline/save" target="_blank" rel="noopener"><code>docker save</code></a> 通过 STDOUT 保存镜像到压缩包，包括所有的父层，标签和版本(parent layers, tags &amp; versions) (0.7 起).</li></ul><h3 id="信息-1"><a href="#信息-1" class="headerlink" title="信息"></a>信息</h3><ul><li><a href="https://docs.docker.com/engine/reference/commandline/history" target="_blank" rel="noopener"><code>docker history</code></a> 查看镜像历史记录。</li><li><a href="https://docs.docker.com/engine/reference/commandline/tag" target="_blank" rel="noopener"><code>docker tag</code></a> 给镜像命名打标(tags) (本地或者仓库)。</li></ul><h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><p>虽然你可以用 <code>docker rmi</code> 命令来删除指定的镜像，但是这里有个称为 <a href="https://github.com/spotify/docker-gc" target="_blank" rel="noopener">docker-gc</a> 的工具，它可以以一种安全的方式，清理掉那些不再被任何容器使用的镜像。</p><h3 id="加载-保存镜像"><a href="#加载-保存镜像" class="headerlink" title="加载/保存镜像"></a>加载/保存镜像</h3><p>从文件中加载镜像:<br><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker load &lt; my_image<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span><br></code></pre></div></td></tr></table></figure></p><p>保存既有镜像:<br><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker save my_image:my_tag <span class="hljs-string">| gzip &gt; my_image.tar.gz</span><br></code></pre></div></td></tr></table></figure></p><h3 id="导入-导出容器"><a href="#导入-导出容器" class="headerlink" title="导入/导出容器"></a>导入/导出容器</h3><p>从文件中将容器作为镜像导入:<br><figure class="highlight elm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-title">cat</span> my_container.tar.gz | docker <span class="hljs-keyword">import</span> - my_image:my_tag<br></code></pre></div></td></tr></table></figure></p><p>导出既有容器:<br><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker <span class="hljs-builtin-name">export</span> my_container | gzip &gt; my_container.tar.gz<br></code></pre></div></td></tr></table></figure></p><h3 id="加载被保存的镜像和导入作为镜像导出的容器之间的不同"><a href="#加载被保存的镜像和导入作为镜像导出的容器之间的不同" class="headerlink" title="加载被保存的镜像和导入作为镜像导出的容器之间的不同"></a>加载被保存的镜像和导入作为镜像导出的容器之间的不同</h3><p>通过 <code>load</code> 命令来加载镜像，会创建一个新的镜像，并继承原镜像的所有历史。<br>通过 <code>import</code> 将容器作为镜像导入，也会创建一个新的镜像，但并不包含原镜像的历史，因此生成的镜像会比使用加载方式生成的镜像要小。</p><h2 id="网络-Networks"><a href="#网络-Networks" class="headerlink" title="网络(Networks)"></a>网络(Networks)</h2><p>Docker 有<a href="https://docs.docker.com/engine/userguide/networking/" target="_blank" rel="noopener">网络(networks)</a>功能。我并不是很了解它，所以这是一个扩展本文的好地方。这里有篇笔记指出，这是一种可以不使用端口来达成 docker 容器间通信的好方法。详情查阅<a href="https://docs.docker.com/engine/userguide/networking/work-with-networks/" target="_blank" rel="noopener">通过网络来工作</a>。</p><h3 id="生命周期-2"><a href="#生命周期-2" class="headerlink" title="生命周期"></a>生命周期</h3><ul><li><a href="https://docs.docker.com/engine/reference/commandline/network_create/" target="_blank" rel="noopener"><code>docker network create</code></a></li><li><a href="https://docs.docker.com/engine/reference/commandline/network_rm/" target="_blank" rel="noopener"><code>docker network rm</code></a></li></ul><h3 id="信息-2"><a href="#信息-2" class="headerlink" title="信息"></a>信息</h3><ul><li><a href="https://docs.docker.com/engine/reference/commandline/network_ls/" target="_blank" rel="noopener"><code>docker network ls</code></a></li><li><a href="https://docs.docker.com/engine/reference/commandline/network_inspect/" target="_blank" rel="noopener"><code>docker network inspect</code></a></li></ul><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><ul><li><a href="https://docs.docker.com/engine/reference/commandline/network_connect/" target="_blank" rel="noopener"><code>docker network connect</code></a></li><li><a href="https://docs.docker.com/engine/reference/commandline/network_disconnect/" target="_blank" rel="noopener"><code>docker network disconnect</code></a></li></ul><p>你可以为<a href="https://blog.jessfraz.com/post/ips-for-all-the-things/" target="_blank" rel="noopener">容器指定 IP 地址</a>:</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-comment"># 使用你自己的子网和网关创建一个桥接网络</span><br>docker<span class="hljs-built_in"> network </span>create --subnet 203.0.113.0/24 --gateway 203.0.113.254 iptastic<br><br><span class="hljs-comment"># 基于以上创建的网络，运行一个nginx容器并指定ip</span><br>$ docker <span class="hljs-builtin-name">run</span> --rm -it --net iptastic --ip 203.0.113.2 nginx<br><br><span class="hljs-comment"># 在其他地方使用curl访问这个ip（假设这是一个公网ip）</span><br>$ curl 203.0.113.2<br></code></pre></div></td></tr></table></figure><h2 id="仓管中心和仓库-Registry-amp-Repository"><a href="#仓管中心和仓库-Registry-amp-Repository" class="headerlink" title="仓管中心和仓库(Registry &amp; Repository)"></a>仓管中心和仓库(Registry &amp; Repository)</h2><p>仓库(repository)是<em>被托管(hosted)</em>的已命名镜像(tagged images)集合，这组镜像用于构建容器文件系统。</p><p>仓管中心(registry)是一个<em>托管服务(host)</em> – 一个服务，用于存储仓库和提供 HTTP API，以便<a href="https://docs.docker.com/engine/tutorials/dockerrepos/" target="_blank" rel="noopener">管理上传和下载仓库</a>。</p><p>Docker.com 把它自己的<a href="https://hub.docker.com/" target="_blank" rel="noopener">索引</a>托管到了它的仓管中心，那里有数量众多的仓库。不过话虽如此，这个仓管中心<a href="https://titanous.com/posts/docker-insecurity" target="_blank" rel="noopener">并没有很好的验证镜像</a>，所以如果你很担心安全问题的话，请尽量避免使用它。</p><ul><li><a href="https://docs.docker.com/engine/reference/commandline/login" target="_blank" rel="noopener"><code>docker login</code></a> 登入仓管中心。</li><li><a href="https://docs.docker.com/engine/reference/commandline/logout" target="_blank" rel="noopener"><code>docker logout</code></a> 登出仓管中心。</li><li><a href="https://docs.docker.com/engine/reference/commandline/search" target="_blank" rel="noopener"><code>docker search</code></a> 从仓管中心检索镜像。</li><li><a href="https://docs.docker.com/engine/reference/commandline/pull" target="_blank" rel="noopener"><code>docker pull</code></a> 从仓管中心拉去镜像到本地。</li><li><a href="https://docs.docker.com/engine/reference/commandline/push" target="_blank" rel="noopener"><code>docker push</code></a> 从本地推送镜像到仓管中心。</li></ul><h3 id="本地仓管中心"><a href="#本地仓管中心" class="headerlink" title="本地仓管中心"></a>本地仓管中心</h3><p>你可以创立一个本地的仓管中心，通过使用 <a href="https://github.com/docker/distribution" target="_blank" rel="noopener">docker distribution</a> 工程，细节请查看 <a href="https://github.com/docker/docker.github.io/blob/master/registry/deploying.md" target="_blank" rel="noopener">本地发布(local deploy)</a> 介绍。  </p><p>也可以参考 <a href="https://groups.google.com/a/dockerproject.org/forum/#!forum/distribution" target="_blank" rel="noopener">邮件列表</a>。</p><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p><a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noopener">配置文件</a>。当你执行 <code>docker build</code> 的时候会根据该配置文件设置 Docker 容器。远优于使用 <code>docker commit</code>。</p><p>下面是一些常用的编写 Dockerfile 的编辑器和语法高亮模块︰</p><ul><li>如果你使用 <a href="http://jedit.org" target="_blank" rel="noopener">jEdit</a>，我为 <a href="https://github.com/wsargent/jedit-docker-mode" target="_blank" rel="noopener">Dockerfile</a> 做了个语法高亮模块。</li><li><a href="https://packagecontrol.io/packages/Dockerfile%20Syntax%20Highlighting" target="_blank" rel="noopener">Sublime Text 2</a></li><li><a href="https://atom.io/packages/language-docker" target="_blank" rel="noopener">Atom</a></li><li><a href="https://github.com/ekalinin/Dockerfile.vim" target="_blank" rel="noopener">Vim</a></li><li><a href="https://github.com/spotify/dockerfile-mode" target="_blank" rel="noopener">Emacs</a></li><li><a href="https://github.com/docker/docker/tree/master/contrib/syntax/textmate" target="_blank" rel="noopener">TextMate</a></li><li>如果要找更全面的关于编辑器或者 IDE 的内容，请看 <a href="https://domeide.github.io/" target="_blank" rel="noopener">当 Docker 遇上 IDE</a></li></ul><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><ul><li><a href="https://docs.docker.com/engine/reference/builder/#dockerignore-file" target="_blank" rel="noopener">.dockerignore</a></li><li><a href="https://docs.docker.com/engine/reference/builder/#from" target="_blank" rel="noopener">FROM</a> 为其他指令设置基础镜像(Base Image)。</li><li><a href="https://docs.docker.com/engine/reference/builder/#maintainer" target="_blank" rel="noopener">MAINTAINER</a> 为生成的镜像设置作者字段。</li><li><a href="https://docs.docker.com/engine/reference/builder/#run" target="_blank" rel="noopener">RUN</a> 在当前镜像的基础上生成一个新层并执行命令。</li><li><a href="https://docs.docker.com/engine/reference/builder/#cmd" target="_blank" rel="noopener">CMD</a> 设置容器默认执行命令。</li><li><a href="https://docs.docker.com/engine/reference/builder/#expose" target="_blank" rel="noopener">EXPOSE</a> 告知 Docker 容器在运行时所要监听的网络端口。注意：并没有实际上将端口设置为可访问。</li><li><a href="https://docs.docker.com/engine/reference/builder/#env" target="_blank" rel="noopener">ENV</a> 设置环境变量。</li><li><a href="https://docs.docker.com/engine/reference/builder/#add" target="_blank" rel="noopener">ADD</a> 将文件，文件夹或者远程文件复制到容器中。缓存无效。尽量用 <code>COPY</code> 代替 <code>ADD</code>。</li><li><a href="https://docs.docker.com/engine/reference/builder/#copy" target="_blank" rel="noopener">COPY</a> 将文件或文件夹复制到容器中。</li><li><a href="https://docs.docker.com/engine/reference/builder/#entrypoint" target="_blank" rel="noopener">ENTRYPOINT</a> 将一个容器设置为可执行。</li><li><a href="https://docs.docker.com/engine/reference/builder/#volume" target="_blank" rel="noopener">VOLUME</a> 为外部挂载卷标或其他容器设置挂载点(mount point)。</li><li><a href="https://docs.docker.com/engine/reference/builder/#user" target="_blank" rel="noopener">USER</a> 设置执行 RUN / CMD / ENTRYPOINT 命令的用户名。</li><li><a href="https://docs.docker.com/engine/reference/builder/#workdir" target="_blank" rel="noopener">WORKDIR</a> 设置工作目录。</li><li><a href="https://docs.docker.com/engine/reference/builder/#arg" target="_blank" rel="noopener">ARG</a> 定义编译时(build-time)变量。</li><li><a href="https://docs.docker.com/engine/reference/builder/#onbuild" target="_blank" rel="noopener">ONBUILD</a> 添加触发指令，当该镜像被作为其他镜像的基础镜像时该指令会被触发。</li><li><a href="https://docs.docker.com/engine/reference/builder/#stopsignal" target="_blank" rel="noopener">STOPSIGNAL</a> 设置通过系统向容器发出退出指令。</li><li><a href="https://docs.docker.com/engine/userguide/labels-custom-metadata/" target="_blank" rel="noopener">LABEL</a> 将键值对元数据(key/value metadata)应用到你的镜像，容器，或者守护进程。 </li></ul><h3 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h3><ul><li><a href="http://flux7.com/blogs/docker/docker-tutorial-series-part-3-automation-is-the-word-using-dockerfile/" target="_blank" rel="noopener">Flux7’s Dockerfile Tutorial</a></li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><ul><li><a href="https://docs.docker.com/engine/reference/builder/#dockerfile-examples" target="_blank" rel="noopener">Examples</a></li><li><a href="https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/" target="_blank" rel="noopener">Best practices for writing Dockerfiles</a></li><li><a href="http://crosbymichael.com/" target="_blank" rel="noopener">Michael Crosby</a> 还有更多的 <a href="http://crosbymichael.com/dockerfile-best-practices.html" target="_blank" rel="noopener">Dockerfiles best practices</a> / <a href="http://crosbymichael.com/dockerfile-best-practices-take-2.html" target="_blank" rel="noopener">take 2</a></li><li><a href="http://jonathan.bergknoff.com/journal/building-good-docker-images" target="_blank" rel="noopener">Building Good Docker Images</a> / <a href="http://jonathan.bergknoff.com/journal/building-better-docker-images" target="_blank" rel="noopener">Building Better Docker Images</a></li><li><a href="https://speakerdeck.com/garethr/managing-container-configuration-with-metadata" target="_blank" rel="noopener">Managing Container Configuration with Metadata</a></li></ul><h2 id="层-Layers"><a href="#层-Layers" class="headerlink" title="层(Layers)"></a>层(Layers)</h2><p>Docker 的版本化文件系统是基于层的。就像<a href="https://docs.docker.com/engine/userguide/storagedriver/imagesandcontainers/" target="_blank" rel="noopener">git的提交或文件变更系统</a>一样。</p><p>注意: 如果你使用 <a href="https://en.wikipedia.org/wiki/Aufs" target="_blank" rel="noopener">aufs</a> 作为你的文件系统，当删除一个容器的时候，Docker 并不一定能成功删除的文件卷标！更多详细信息请参阅 <a href="https://github.com/docker/docker/pull/8484" target="_blank" rel="noopener">PR 8484</a>。</p><h2 id="链接-Links"><a href="#链接-Links" class="headerlink" title="链接(Links)"></a>链接(Links)</h2><p>链接(Links)<a href="https://docs.docker.com/userguide/dockerlinks/" target="_blank" rel="noopener">通过 TCP/IP 端口</a>实现了 Docker 容器之间的通讯。<a href="https://docs.docker.com/examples/running_redis_service/" target="_blank" rel="noopener">链接到 Redis</a> 和 <a href="https://blogs.atlassian.com/2013/11/docker-all-the-things-at-atlassian-automation-and-wiring/" target="_blank" rel="noopener">Atlassian</a> 是两个可用的例子。你还可以<a href="https://docs.docker.com/engine/userguide/networking/default_network/dockerlinks/#/updating-the-etchosts-file" target="_blank" rel="noopener">通过 hostname 关联链接</a>。</p><p>注意: 如果你希望容器之间<strong>只</strong>通过链接进行通讯，在启动 docker 守护进程的时候请添加参数 <code>-icc=false</code> 来禁用内部进程通讯。</p><p>如果你有一个名为 CONTAINER 的容器(通过 <code>docker run --name CONTAINER</code> 指定) 并且在 Dockerfile 中，它的端口暴露为:</p><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">1337</span><br></code></pre></div></td></tr></table></figure><p>然后，我们创建另外一个名为 LINKED 的容器:</p><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker <span class="hljs-built_in">run</span> -d <span class="hljs-comment">--link CONTAINER:ALIAS --name LINKED user/wordpress</span><br></code></pre></div></td></tr></table></figure><p>然后 CONTAINER 的端口和别名将会以如下的环境变量出现在 LINKED 中:</p><figure class="highlight gams"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta"><span class="hljs-meta-keyword">$ALIAS</span>_PORT_1337_TCP_PORT</span><br><span class="hljs-meta"><span class="hljs-meta-keyword">$ALIAS</span>_PORT_1337_TCP_ADDR</span><br></code></pre></div></td></tr></table></figure><p>之后你就可以通过这种方式来链接它了。</p><p>要删除链接，通过命令 <code>docker rm --link</code>。</p><p>通常，docker 服务之间的链接，是”服务发现”的一个子集，如果你打算在生产中大规模使用 Docker，这将是一个很大的问题。请参阅<a href="https://www.digitalocean.com/community/tutorials/the-docker-ecosystem-service-discovery-and-distributed-configuration-stores" target="_blank" rel="noopener">The Docker Ecosystem: Service Discovery and Distributed Configuration Stores</a>获得更多细节。</p><h2 id="卷标-Volumes"><a href="#卷标-Volumes" class="headerlink" title="卷标(Volumes)"></a>卷标(Volumes)</h2><p>Docker 的卷标(volumes)是一个<a href="https://docs.docker.com/engine/tutorials/dockervolumes/" target="_blank" rel="noopener">free-floating 文件系统</a>。它们不应该链接到特定的容器上。好的做法是如果可能，应当把卷标挂载到<a href="https://medium.com/@ramangupta/why-docker-data-containers-are-good-589b3c6c749e" target="_blank" rel="noopener">纯数据容器(data-only containers)</a>上。</p><h3 id="生命周期-3"><a href="#生命周期-3" class="headerlink" title="生命周期"></a>生命周期</h3><ul><li><a href="https://docs.docker.com/engine/reference/commandline/volume_create/" target="_blank" rel="noopener"><code>docker volume create</code></a></li><li><a href="https://docs.docker.com/engine/reference/commandline/volume_rm/" target="_blank" rel="noopener"><code>docker volume rm</code></a></li></ul><h3 id="信息-3"><a href="#信息-3" class="headerlink" title="信息"></a>信息</h3><ul><li><a href="https://docs.docker.com/engine/reference/commandline/volume_ls/" target="_blank" rel="noopener"><code>docker volume ls</code></a></li><li><a href="https://docs.docker.com/engine/reference/commandline/volume_inspect/" target="_blank" rel="noopener"><code>docker volume inspect</code></a></li></ul><p>卷标在不能使用链接(只有 TCP/IP )的情况下非常有用。例如，如果你有两个 docker 实例需要通讯并在文件系统上留下记录。</p><p>你可以一次性将其挂载到多个 docker 容器上，通过 <code>docker run --volumes-from</code>。</p><p>因为卷标是独立的文件系统，它们通常被用于存储各容器之间的瞬时状态。也就是说，你可以配置一个无状态临时容器，关掉之后，当你有第二个这种临时容器实例的时候，你可以从上一次保存的状态继续执行。</p><p>查看<a href="http://crosbymichael.com/advanced-docker-volumes.html" target="_blank" rel="noopener">卷标进阶</a>来获取更多细节。Container42 <a href="http://container42.com/2014/11/03/docker-indepth-volumes/" target="_blank" rel="noopener">非常有用</a>。</p><p>你可以<a href="https://docs.docker.com/engine/tutorials/dockervolumes/#mount-a-host-directory-as-a-data-volume" target="_blank" rel="noopener">将宿主 MacOS 的文件夹映射为 docker 卷标</a>:</p><figure class="highlight groovy"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker run -v <span class="hljs-regexp">/Users/</span>wsargent<span class="hljs-regexp">/myapp/</span><span class="hljs-string">src:</span>/src<br></code></pre></div></td></tr></table></figure><p>你也可以用远程 NFS 卷标，如果你觉得你<a href="https://docs.docker.com/engine/tutorials/dockervolumes/#/mount-a-shared-storage-volume-as-a-data-volume" target="_blank" rel="noopener">有足够勇气</a>。</p><p>可还可以考虑运行一个纯数据容器，像<a href="http://container42.com/2013/12/16/persistent-volumes-with-docker-container-as-volume-pattern/" target="_blank" rel="noopener">这里</a>所说的那样，提供可移植数据。</p><h2 id="暴露端口-Exposing-ports"><a href="#暴露端口-Exposing-ports" class="headerlink" title="暴露端口(Exposing ports)"></a>暴露端口(Exposing ports)</h2><p>通过宿主容器暴露输入端口是相当<a href="https://docs.docker.com/engine/reference/run/#expose-incoming-ports" target="_blank" rel="noopener">繁琐，但有效</a>的。</p><p>这种方式可以将容器端口映射到宿主端口上(只使用本地主机(localhost)接口)，通过使用 <code>-p</code>:</p><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker <span class="hljs-keyword">run</span><span class="bash"> -p 127.0.0.1:<span class="hljs-variable">$HOSTPORT</span>:<span class="hljs-variable">$CONTAINERPORT</span> --name CONTAINER -t someimage</span><br></code></pre></div></td></tr></table></figure><p>你可以告诉 Docker 容器在运行时监听指定的网络端口，通过使用 <a href="https://docs.docker.com/engine/reference/builder/#expose" target="_blank" rel="noopener">EXPOSE</a>:</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">EXPOSE <span class="hljs-tag">&lt;<span class="hljs-name">CONTAINERPORT</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>但是注意 EXPOSE 并不会暴露端口，你需要用参数 <code>-p</code> 。比如说你要在 localhost 上暴露容器的端口:</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">iptables -t<span class="hljs-built_in"> nat </span>-A DOCKER -p tcp --dport &lt;LOCALHOSTPORT&gt; -j DNAT --to-destination &lt;CONTAINERIP&gt;:&lt;PORT&gt;<br></code></pre></div></td></tr></table></figure><p>如果你是在 Virtualbox 中运行 Docker，那么你需要转发端口(forward the port)，使用 <a href="https://docs.vagrantup.com/v2/networking/forwarded_ports.html" target="_blank" rel="noopener">forwarded_port</a>。它可以用于在 Vagrantfile 上配置暴露端口段，这样你就可以动态的映射它们了:</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">Vagrant.configure(VAGRANTFILE_API_VERSION) <span class="hljs-keyword">do</span> |config|<br>  <span class="hljs-built_in">..</span>.<br><br>  (49000<span class="hljs-built_in">..</span>49900).each <span class="hljs-keyword">do</span> |port|<br>    config.vm.network :forwarded_port, :host =&gt; port, :guest =&gt;<span class="hljs-built_in"> port<br></span>  end<br><br>  <span class="hljs-built_in">..</span>.<br>end<br></code></pre></div></td></tr></table></figure><p>如果你忘记你将什么端口映射到宿主容器上的话，使用 <code>docker port</code> 来查看它:</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker<span class="hljs-built_in"> port </span>CONTAINER <span class="hljs-variable">$CONTAINERPORT</span><br></code></pre></div></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><p>这里有一些最佳实践的总结，以及一些讨论:</p><ul><li><a href="http://gregoryszorc.com/blog/2014/10/16/the-rabbit-hole-of-using-docker-in-automated-tests/" target="_blank" rel="noopener">The Rabbit Hole of Using Docker in Automated Tests</a></li><li><a href="https://twitter.com/bridgetkromhout" target="_blank" rel="noopener">Bridget Kromhout</a> has a useful blog post on <a href="http://sysadvent.blogspot.co.uk/2014/12/day-1-docker-in-production-reality-not.html" target="_blank" rel="noopener">running Docker in production</a> at Dramafever.  </li><li>There’s also a best practices <a href="http://developers.lyst.com/devops/2014/12/08/docker/" target="_blank" rel="noopener">blog post</a> from Lyst.</li><li><a href="https://engineering.salesforceiq.com/2013/11/05/a-docker-dev-environment-in-24-hours-part-2-of-2.html" target="_blank" rel="noopener">A Docker Dev Environment in 24 Hours!</a></li><li><a href="https://tersesystems.com/2013/11/20/building-a-development-environment-with-docker/" target="_blank" rel="noopener">Building a Development Environment With Docker</a></li><li><a href="https://samsaffron.com/archive/2013/11/07/discourse-in-a-docker-container" target="_blank" rel="noopener">Discourse in a Docker Container</a></li></ul><h2 id="安全-Security"><a href="#安全-Security" class="headerlink" title="安全(Security)"></a>安全(Security)</h2><p>这节准备讨论一些关于 Docker 安全性的问题。<a href="https://docs.docker.com/articles/security/" target="_blank" rel="noopener">安全</a>这章讲述了更多细节。</p><p>首先第一件事: Docker 是有 root 权限的。如果你在 <code>docker</code> 组，那么你就有<a href="http://reventlov.com/advisories/using-the-docker-command-to-root-the-host" target="_blank" rel="noopener"> root 权限</a>。如果你暴露了 docker unix socket 给容器，意味着你赋予了容器<a href="https://www.lvh.io/posts/dont-expose-the-docker-socket-not-even-to-a-container.html" target="_blank" rel="noopener">宿主的 root 权限</a>。Docker 不应该是你唯一的防御措施。</p><h3 id="安全提示"><a href="#安全提示" class="headerlink" title="安全提示"></a>安全提示</h3><p>为了最大的安全性，你应该会考虑在虚拟机上运行 Docker 。这是直接从 Docker 安全团队拿来的资料 – <a href="http://www.slideshare.net/jpetazzo/linux-containers-lxc-docker-and-security" target="_blank" rel="noopener">slides</a> / <a href="http://www.projectatomic.io/blog/2014/08/is-it-safe-a-look-at-docker-and-security-from-linuxcon/" target="_blank" rel="noopener">notes</a>。然后，可以使用 AppArmor / seccomp / SELinux / grsec 之类的来<a href="http://linux-audit.com/docker-security-best-practices-for-your-vessel-and-containers/" target="_blank" rel="noopener">限制容器的权限</a>。更多细节，请查阅 <a href="https://blog.docker.com/2016/02/docker-engine-1-10-security/" target="_blank" rel="noopener">Docker 1.10 security features</a>。</p><p>Docker 镜像 id 属于<a href="https://medium.com/@quayio/your-docker-image-ids-are-secrets-and-its-time-you-treated-them-that-way-f55e9f14c1a4" target="_blank" rel="noopener">敏感信息</a> 所以它不应该向外界公开。你应该把他们当成密码来对待。</p><p>参考 <a href="https://github.com/konstruktoid/Docker/blob/master/Security/CheatSheet.adoc" target="_blank" rel="noopener">Docker Security Cheat Sheet</a>中 - 作者是 <a href="https://github.com/konstruktoid" target="_blank" rel="noopener">Thomas Sjögren</a> - 关于如何提高容器安全的建议。</p><p>下载<a href="https://github.com/docker/docker-bench-security" target="_blank" rel="noopener">docker 安全测试脚本</a>，下载<a href="https://blog.docker.com/2015/05/understanding-docker-security-and-best-practices/" target="_blank" rel="noopener">白皮书</a> 以及订阅<a href="https://www.docker.com/docker-security" target="_blank" rel="noopener">邮件列表</a> (不幸的是 Docker 并没有独立的邮件列表，只有 dev / user)。</p><p>你应该远离那些使用编译版本 grsecurity / pax 的不稳定内核，比如 <a href="https://en.wikipedia.org/wiki/Alpine_Linux" target="_blank" rel="noopener">Alpine Linux</a>。如果在产品中用了 grsecurity ，那么你应该考虑使用有<a href="https://grsecurity.net/business_support.php" target="_blank" rel="noopener">商业支持</a>的<a href="https://grsecurity.net/announce.php" target="_blank" rel="noopener">稳定版本</a>，就像你对待 RedHat 那样。它要 $200 每月，对于你的运维预算来说不值一提。</p><p>从 docker 1.11 开始，你可以轻松的限制在容器中可用的进程数，以防止 fork bombs。 这要求 linux 内核 &gt;= 4.3 并且要在内核配置中打开 CGROUP_PIDS=y 。</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker <span class="hljs-builtin-name">run</span> <span class="hljs-attribute">--pids-limit</span>=64<br></code></pre></div></td></tr></table></figure><p>同时，从 docker 1.11 开始，你也可以限制进程有再获取新权限的能力了。该功能是 linux 内核从 version 3.5 开始就拥有的。你可以从<a href="http://www.projectatomic.io/blog/2016/03/no-new-privs-docker/" target="_blank" rel="noopener">这篇博客</a>中阅读到更多关于这方面的内容。</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker <span class="hljs-builtin-name">run</span> <span class="hljs-attribute">--security-opt</span>=<span class="hljs-literal">no</span>-new-privileges<br></code></pre></div></td></tr></table></figure><p>参考 <a href="http://container-solutions.com/content/uploads/2015/06/15.06.15_DockerCheatSheet_A2.pdf" target="_blank" rel="noopener">Docker Security Cheat Sheet</a> (它是个 PDF 版本，搞得非常难用，所以拷贝出来了) 的 <a href="http://container-solutions.com/is-docker-safe-for-production/" target="_blank" rel="noopener">容器解決方案</a>:</p><p>关闭内部进程通讯:</p><figure class="highlight brainfuck"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-comment">docker</span> <span class="hljs-literal">-</span><span class="hljs-comment">d</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">icc=false</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">iptables</span><br></code></pre></div></td></tr></table></figure><p>设置容器为只读:</p><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker <span class="hljs-keyword">run</span><span class="bash"> --<span class="hljs-built_in">read</span>-only</span><br></code></pre></div></td></tr></table></figure><p>通过 hashsum 来验证卷标:</p><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker pull debian<span class="hljs-variable">@sha256</span><span class="hljs-symbol">:a25306f3850e1bd44541976aa7b5fd0a29be</span><br></code></pre></div></td></tr></table></figure><p>设置卷标为只读:</p><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker <span class="hljs-keyword">run</span><span class="bash"> -v $(<span class="hljs-built_in">pwd</span>)/secrets:/secrets:ro debian</span><br></code></pre></div></td></tr></table></figure><p>在 Dockerfile 中定义并运行一个用户，避免在容器中以 root 身份操作:</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-builtin-name">RUN</span> groupadd -r<span class="hljs-built_in"> user </span>&amp;&amp; useradd -r -g<span class="hljs-built_in"> user user<br>USER </span>user<br></code></pre></div></td></tr></table></figure><h3 id="用户命名空间-User-Namespaces"><a href="#用户命名空间-User-Namespaces" class="headerlink" title="用户命名空间(User Namespaces)"></a>用户命名空间(User Namespaces)</h3><p>还可以通过使用 <a href="https://s3hh.wordpress.com/2013/07/19/creating-and-using-containers-without-privilege/" target="_blank" rel="noopener">user namespaces</a> – 这已经是 1.10 内建功能了，但默认情况下是不启用的。</p><p>要在 Ubuntu 15.10 中启用用户命名空间 (“remap the userns”)，请<a href="https://raesene.github.io/blog/2016/02/04/Docker-User-Namespaces/" target="_blank" rel="noopener">跟着这篇博客的例子</a>来做。</p><h3 id="安全相关视频"><a href="#安全相关视频" class="headerlink" title="安全相关视频"></a>安全相关视频</h3><ul><li><a href="https://youtu.be/04LOuMgNj9U" target="_blank" rel="noopener">Using Docker Safely</a></li><li><a href="https://youtu.be/KmxOXmPhZbk" target="_blank" rel="noopener">Securing your applications using Docker</a></li><li><a href="https://youtu.be/a9lE9Urr6AQ" target="_blank" rel="noopener">Container security: Do containers actually contain?</a></li></ul><h3 id="安全路线图"><a href="#安全路线图" class="headerlink" title="安全路线图"></a>安全路线图</h3><p>Docker 的路线图提到关于<a href="https://github.com/docker/docker/blob/master/ROADMAP.md#11-security" target="_blank" rel="noopener">seccomp 的支持</a>。<br>这里有个 AppArmor 策略生成器，叫做 <a href="https://github.com/jfrazelle/bane" target="_blank" rel="noopener">bane</a>，他们正在实现<a href="https://github.com/docker/docker/issues/17142" target="_blank" rel="noopener">安全配置文件</a>。</p><h2 id="小贴士"><a href="#小贴士" class="headerlink" title="小贴士"></a>小贴士</h2><p>来源:</p><ul><li><a href="http://sssslide.com/speakerdeck.com/bmorearty/15-docker-tips-in-5-minutes" target="_blank" rel="noopener">15 Docker Tips in 5 minutes</a></li></ul><h3 id="最后的-Ids"><a href="#最后的-Ids" class="headerlink" title="最后的 Ids"></a>最后的 Ids</h3><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">alias dl=<span class="hljs-string">'docker ps -l -q'</span><br>docker <span class="hljs-keyword">run</span><span class="bash"> ubuntu <span class="hljs-built_in">echo</span> hello world<br></span>docker commit `dl` helloworld<br></code></pre></div></td></tr></table></figure><h3 id="带命令行的提交-需要-Dockerfile"><a href="#带命令行的提交-需要-Dockerfile" class="headerlink" title="带命令行的提交 (需要 Dockerfile)"></a>带命令行的提交 (需要 Dockerfile)</h3><figure class="highlight autohotkey"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker commit -run='&#123;<span class="hljs-string">"Cmd"</span>:[<span class="hljs-string">"postgres"</span>, <span class="hljs-string">"-too -many -opts"</span>]&#125;' `dl` postgres<br></code></pre></div></td></tr></table></figure><h3 id="获取-IP-地址"><a href="#获取-IP-地址" class="headerlink" title="获取 IP 地址"></a>获取 IP 地址</h3><figure class="highlight clean"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker inspect `dl` | grep IPAddress | cut -d <span class="hljs-string">'"'</span> -f <span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure><p>或者安装 <a href="https://stedolan.github.io/jq/" target="_blank" rel="noopener">jq</a>:</p><figure class="highlight clean"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker inspect `dl` | jq -r <span class="hljs-string">'.[0].NetworkSettings.IPAddress'</span><br></code></pre></div></td></tr></table></figure><p>或者用<a href="https://docs.docker.com/engine/reference/commandline/inspect" target="_blank" rel="noopener">go 模板</a></p><figure class="highlight django"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="xml">docker inspect -f '</span><span class="hljs-template-variable">&#123;&#123; .NetworkSettings.IPAddress &#125;&#125;</span><span class="xml">' <span class="hljs-tag">&lt;<span class="hljs-name">container_name</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h3 id="获取端口映射"><a href="#获取端口映射" class="headerlink" title="获取端口映射"></a>获取端口映射</h3><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attribute">docker</span> inspect -f <span class="hljs-string">'&#123;&#123;range <span class="hljs-variable">$p</span>, <span class="hljs-variable">$conf</span> := .NetworkSettings.Ports&#125;&#125; &#123;&#123;<span class="hljs-variable">$p</span>&#125;&#125; -&gt; &#123;&#123;(index <span class="hljs-variable">$conf</span> 0).HostPort&#125;&#125; &#123;&#123;end&#125;&#125;'</span> &lt;containername&gt;<br></code></pre></div></td></tr></table></figure><h3 id="通过正则获取容器"><a href="#通过正则获取容器" class="headerlink" title="通过正则获取容器"></a>通过正则获取容器</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> $(docker ps -a | grep <span class="hljs-string">"REGEXP_PATTERN"</span> | cut -f1 -d<span class="hljs-string">" "</span>); <span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span>; <span class="hljs-keyword">done</span>`<br></code></pre></div></td></tr></table></figure><h3 id="获取环境设定"><a href="#获取环境设定" class="headerlink" title="获取环境设定"></a>获取环境设定</h3><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker <span class="hljs-built_in">run</span> <span class="hljs-comment">--rm ubuntu env</span><br></code></pre></div></td></tr></table></figure><h3 id="强迫关闭正在运行的容器"><a href="#强迫关闭正在运行的容器" class="headerlink" title="强迫关闭正在运行的容器"></a>强迫关闭正在运行的容器</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker <span class="hljs-built_in">kill</span> $(docker ps -q)<br></code></pre></div></td></tr></table></figure><h3 id="删除旧容器"><a href="#删除旧容器" class="headerlink" title="删除旧容器"></a>删除旧容器</h3><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attribute">docker</span> ps -a | grep <span class="hljs-string">'weeks ago'</span> | awk <span class="hljs-string">'&#123;print <span class="hljs-variable">$1</span>&#125;'</span> | xargs docker rm<br></code></pre></div></td></tr></table></figure><h3 id="删除停止容器"><a href="#删除停止容器" class="headerlink" title="删除停止容器"></a>删除停止容器</h3><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker rm -v `docker ps -<span class="hljs-selector-tag">a</span> -<span class="hljs-selector-tag">q</span> -f status=exited`<br></code></pre></div></td></tr></table></figure><h3 id="删除-dangling-镜像"><a href="#删除-dangling-镜像" class="headerlink" title="删除 dangling 镜像"></a>删除 dangling 镜像</h3><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker rmi $(docker images -q -f <span class="hljs-attribute">dangling</span>=<span class="hljs-literal">true</span>)<br></code></pre></div></td></tr></table></figure><h3 id="删除所有镜像"><a href="#删除所有镜像" class="headerlink" title="删除所有镜像"></a>删除所有镜像</h3><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker rmi <span class="hljs-variable">$(</span>docker images -q)<br></code></pre></div></td></tr></table></figure><h3 id="删除-dangling-卷标"><a href="#删除-dangling-卷标" class="headerlink" title="删除 dangling 卷标"></a>删除 dangling 卷标</h3><p>Docker 1.9 开始:</p><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker <span class="hljs-keyword">volume</span><span class="bash"> rm $(docker volume ls -q -f dangling=<span class="hljs-literal">true</span>)</span><br></code></pre></div></td></tr></table></figure><p>1.9.0 中，过滤器 <code>dangling=false</code> 居然 _没_ 用 - 它会被忽略然后列出所有的卷标。</p><h3 id="查看镜像依赖"><a href="#查看镜像依赖" class="headerlink" title="查看镜像依赖"></a>查看镜像依赖</h3><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker images -viz <span class="hljs-string">| dot -Tpng -o docker.png</span><br></code></pre></div></td></tr></table></figure><h3 id="Docker-容器瘦身-Intercity-博客"><a href="#Docker-容器瘦身-Intercity-博客" class="headerlink" title="Docker 容器瘦身  Intercity 博客"></a>Docker 容器瘦身  <a href="http://bit.ly/1Wwo61N" target="_blank" rel="noopener">Intercity 博客</a></h3><ul><li>在当前运行层(RUN layer)清理 APT</li></ul><p>这应当和其他 apt 命令在同一层中完成。<br>否则，前面的层将会保持原有信息，而你的镜像则依旧臃肿。</p><figure class="highlight crystal"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">RUN &#123;apt commands&#125; \<br>  &amp;&amp; apt-get clean \  <br>  &amp;&amp; rm -rf /var/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">apt</span>/<span class="hljs-title">lists</span>/* /<span class="hljs-title">tmp</span>/* /<span class="hljs-title">var</span>/<span class="hljs-title">tmp</span>/*</span><br></code></pre></div></td></tr></table></figure><ul><li><p>压缩镜像</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attribute">ID</span>=$(docker <span class="hljs-builtin-name">run</span> -d image-name /bin/bash)<br>docker <span class="hljs-builtin-name">export</span> <span class="hljs-variable">$ID</span> | docker import – flat-image-name<br></code></pre></div></td></tr></table></figure></li><li><p>备份</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">ID=$(docker <span class="hljs-built_in">run</span> -d <span class="hljs-built_in">image</span>-name /bin/bash)<br>(docker <span class="hljs-keyword">export</span> $ID | gzip -c &gt; <span class="hljs-built_in">image</span>.tgz)<br>gzip -dc <span class="hljs-built_in">image</span>.tgz | docker <span class="hljs-keyword">import</span> - flat-<span class="hljs-built_in">image</span>-name<br></code></pre></div></td></tr></table></figure></li></ul><h3 id="监视运行中容器的系统资源利用率"><a href="#监视运行中容器的系统资源利用率" class="headerlink" title="监视运行中容器的系统资源利用率"></a>监视运行中容器的系统资源利用率</h3><p>检查某个单独容器的 CPU, 内存, 和 网络 i/o 使用情况，你可以:</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker stats <span class="hljs-tag">&lt;<span class="hljs-name">container</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>按 id 列出所有的容器:</p><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker stats <span class="hljs-variable">$(</span>docker ps -q)<br></code></pre></div></td></tr></table></figure><p>按名称列出所有容器:</p><figure class="highlight mel"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker stats $(docker ps --<span class="hljs-keyword">format</span> <span class="hljs-string">'&#123;&#123;.Names&#125;&#125;'</span>)<br></code></pre></div></td></tr></table></figure><p>按指定镜像名称列出所有容器:</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker ps -a -f <span class="hljs-attribute">ancestor</span>=ubuntu<br></code></pre></div></td></tr></table></figure><h2 id="贡献手册-Contributing"><a href="#贡献手册-Contributing" class="headerlink" title="贡献手册(Contributing)"></a>贡献手册(Contributing)</h2><p>这是关于如何为这份速查表做贡献的说明。</p><h3 id="打开-README-md"><a href="#打开-README-md" class="headerlink" title="打开 README.md"></a>打开 README.md</h3><p>点击 <a href="https://github.com/wsargent/docker-cheat-sheet/blob/master/README.md" target="_blank" rel="noopener">README.md</a> &lt;– 这个链接</p><p>via:<a href="https://github.com/wsargent/docker-cheat-sheet" target="_blank" rel="noopener">GITHUB</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在mac下pycharm配置autopep8</title>
    <link href="/2018/04/22/autopep8/"/>
    <url>/2018/04/22/autopep8/</url>
    
    <content type="html"><![CDATA[<h3 id="关于PEP-8"><a href="#关于PEP-8" class="headerlink" title="关于PEP 8"></a>关于PEP 8</h3><p><a href="https://www.python.org/dev/peps/pep-0008/" target="_blank" rel="noopener">PEP 8</a>，Style Guide for Python Code，是Python官方推出的Python编码风格的约定，虽然这不是硬性的规定，但是如果Python程序员都尽量遵循这个文档，那么编码风格的统一会让代码的可读性大大提升。</p><p>在Pycharm里边默认也是有进行PEP8的检测，强迫症的人表示，看到代码中有黄色波浪线，就一定得先改好它。</p><h3 id="关于autopep8"><a href="#关于autopep8" class="headerlink" title="关于autopep8"></a>关于autopep8</h3><p><a href="https://github.com/hhatto/autopep8#installation" target="_blank" rel="noopener">autopep8官网</a>的描述是：</p><blockquote><p>autopep8 automatically formats Python code to conform to the PEP 8 style guide. It uses the pep8 utility to determine what parts of the code needs to be formatted. autopep8 is capable of fixing most of the formatting issues that can be reported by pep8.</p></blockquote><p>通过它，可以修复大部分PEP8工具中报告的代码排版问题。举个官网的例子：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">example1</span><span class="hljs-params">()</span>:</span><br>    <span class="hljs-comment">####This is a long comment. This should be wrapped to fit within 72 characters.</span><br>    some_tuple=(   <span class="hljs-number">1</span>,<span class="hljs-number">2</span>, <span class="hljs-number">3</span>,<span class="hljs-string">'a'</span>  );<br>    some_variable=&#123;<span class="hljs-string">'long'</span>:<span class="hljs-string">'Long code lines should be wrapped within 79 characters.'</span>,<br>    <span class="hljs-string">'other'</span>:[math.pi, <span class="hljs-number">100</span>,<span class="hljs-number">200</span>,<span class="hljs-number">300</span>,<span class="hljs-number">9876543210</span>,<span class="hljs-string">'This is a long string that goes on'</span>],<br>    <span class="hljs-string">'more'</span>:&#123;<span class="hljs-string">'inner'</span>:<span class="hljs-string">'This whole logical line should be wrapped.'</span>,some_tuple:[<span class="hljs-number">1</span>,<br>    <span class="hljs-number">20</span>,<span class="hljs-number">300</span>,<span class="hljs-number">40000</span>,<span class="hljs-number">500000000</span>,<span class="hljs-number">60000000000000000</span>]&#125;&#125;<br>    <span class="hljs-keyword">return</span> (some_tuple, some_variable)<br></code></pre></div></td></tr></table></figure><p>这是一个比较极端情况的例子，在使用了autopep8自动修复后：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">example1</span><span class="hljs-params">()</span>:</span><br>    <span class="hljs-comment"># This is a long comment. This should be wrapped to fit within 72 characters.</span><br>    some_tuple = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">'a'</span>)<br>    some_variable = &#123;<span class="hljs-string">'long'</span>: <span class="hljs-string">'Long code lines should be wrapped within 79 characters.'</span>,<br>                     <span class="hljs-string">'other'</span>: [math.pi, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>, <span class="hljs-number">9876543210</span>, <span class="hljs-string">'This is a long string that goes on'</span>],<br>                     <span class="hljs-string">'more'</span>: &#123;<span class="hljs-string">'inner'</span>: <span class="hljs-string">'This whole logical line should be wrapped.'</span>, some_tuple: [<span class="hljs-number">1</span>,<br>                                                                                                  <span class="hljs-number">20</span>, <span class="hljs-number">300</span>, <span class="hljs-number">40000</span>, <span class="hljs-number">500000000</span>, <span class="hljs-number">60000000000000000</span>]&#125;&#125;<br>    <span class="hljs-keyword">return</span> (some_tuple, some_variable)<br></code></pre></div></td></tr></table></figure><p>是不是看起来焕然一新了？</p><h3 id="Pycharm中使用autopep8作为扩展工具"><a href="#Pycharm中使用autopep8作为扩展工具" class="headerlink" title="Pycharm中使用autopep8作为扩展工具"></a>Pycharm中使用autopep8作为扩展工具</h3><h4 id="安装autopep8"><a href="#安装autopep8" class="headerlink" title="安装autopep8"></a>安装autopep8</h4><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">pip <span class="hljs-keyword">install</span> autopep8<br></code></pre></div></td></tr></table></figure><h4 id="Pycharm进行设置"><a href="#Pycharm进行设置" class="headerlink" title="Pycharm进行设置"></a>Pycharm进行设置</h4><p><img src="/images/python/pycharmautopep8.png" srcset="/img/loading.gif" lazyload alt="pycharmautopep8"></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">mac 在终端如何进入名称带空格的目录<br><br>后来找到原因，是因为要对空格转义或者输入“ ”或‘ ’，方案如下：<br><br>        <span class="hljs-number">1.</span> cd Appications/Android\Studio.app/sdk <br><br><span class="hljs-number">2.</span> cd Appications/Android<span class="hljs-string">' '</span>Studio.app/sdk<br><br><span class="hljs-number">3.</span> cd Appications/Android<span class="hljs-string">" "</span>Studio.app/sdk<br><br><br><br>采取以上任意方式，都能进入目录！<br></code></pre></div></td></tr></table></figure><p><strong>注意</strong> mac系统中，在图片变量位置加上双<code>“ ”</code> </p><ul><li>Settings–&gt;Tools–&gt;External Tools 点击添加按钮<ul><li>Name：autopep8（可以自定义）</li><li>Tools settings:</li><li>Programs：autopep8（不能修改）</li><li>Parameters：–in-place –aggressive –aggressive $FilePath$</li><li>Working directory：$ProjectFileDir$</li></ul></li><li>点击Output Files<ul><li>点击添加，名称可以任意填写</li><li>Regular expression to match output：$FILE_PATH$\:$LINE$\:$COLUMN$\:.*</li></ul></li></ul><h4 id="实际使用"><a href="#实际使用" class="headerlink" title="实际使用"></a>实际使用</h4><p>在右击上代码–&gt;External Tool–&gt;autopep8</p><p>Pycharm自动调用了autopep8对当前文件进行PEP8优化。</p><h3 id="autopep8的一些设置点"><a href="#autopep8的一些设置点" class="headerlink" title="autopep8的一些设置点"></a>autopep8的一些设置点</h3><p>在上边说到，在Parameters的设置是:–in-place –aggressive –aggressive $FilePath$</p><p>–in-place 代表会直接修改源文件</p><p>–aggressive autopep8默认只修复空白，对齐相关的PEP8问题，加入–aggressive设置，会增加修复如 x == None 修复为 x is None，{“a”: 1, “b”: 2}.has_key(‘a’) 修复为’a’ in {“a”: 1, “b”: 2}</p><p>–ignore 忽略PEP8检查项</p><p>因为我只打算用autopep8来修复空格，空行这一类的排版问题，同时要忽略每一行长度过长的检测（E501 - Try to make lines fit within –max-line-length characters.），所以最终设置是：</p><p>–in-place –ignore=E501 $FilePath$</p><p><a href="http://jianbing.github.io/2016/06/29/pycharm-autopep8/" target="_blank" rel="noopener">via</a></p><p><a href="https://github.com/hscgavin/autopep8-on-pycharm#autopep8-on-pycharm" target="_blank" rel="noopener">github</a></p><p><a href="https://github.com/hhatto/autopep8#installation" target="_blank" rel="noopener">autopep8</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>部署高可用的Redis集群架构</title>
    <link href="/2017/06/12/redisde/"/>
    <url>/2017/06/12/redisde/</url>
    
    <content type="html"><![CDATA[<p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。</p><p>本文主要介绍redis在不同模式下的部署方式，并且对几种模式进行了一些简单的对比。</p><p>下表列出了当前使用较多的redis部署方式:</p><p><img src="http://rdc.hundsun.com/portal/data/upload/201703/f_a1ba3e37fdd1352797972c26785473b1.png" srcset="/img/loading.gif" lazyload alt="img"></p><p>通过上表比较可知：如果需要完整的分片、复制和高可用特性，在集群节点不多且在使用sentinel这种模式会带来性能瓶颈和资源消耗的情况下，可以选择使用 Redis集群；如果只需要一部分特性（比如只需要分片，但不需要复制和高可用），那么可以选择Redis Sentinel。<br><a id="more"></a><br><strong>&lt;单实例模式&gt;</strong></p><p>单实例模式是指<code>单台redis完成所有请求任务，</code>因此复用和不具备容错性；同时在单台机器上如果只启用一个redis实例会造成资源浪费 。</p><p><strong>&lt;Redis集群&gt;</strong></p><p>Redis 集群是一个<code>由多个节点组成的分布式服务器群，</code>它具有复制、高可用和分片特性。Redis集群不需要sentinel哨兵也能完成节点移除和故障转移的功能。需要将每个节点设置成集群模式，这种集群模式没有中心节点，多个节点之间存在着网络通信的消耗。</p><p>多个节点按照分片来处理不同位置的槽，接受到不属于自己的槽操作的命令时会重新发送命令给正确的节点，这中间必然有一定的资源消耗。如同redis主从配置使用sentinel作为代理来处理请求一样。</p><p>下面三点是redis官方文档（官方文档Cluster Tutorial）中提到的redis最核心的目标：<br>▪  性能：这是Redis赖以生存的看家本领，增加集群功能后当然不能对性能产生太大影响，所以Redis采取了P2P而非Proxy方式、异步复制、客户端重定向等设计，而牺牲了部分的一致性、使用性。<br>▪  水平扩展：集群的最重要能力当然是扩展，文档中称可以线性扩展到1000节点。<br>▪  可用性：在Cluster推出之前，可用性要靠Sentinel保证。有了集群之后也自动具有了Sentinel的监控和自动Failover能力。</p><p><strong>&lt;Redis集群概念&gt;</strong></p><p><strong>一、分布式</strong></p><p>Redis集群</p><p>是一个由</p><p><code>多个Redis服务器组成的分布式网络服务器群，集群中的各个服务器被称为节点（node），这些节点会相互连接并进行通信。</code></p><p>分布式的Redis集群没有中心节点，所以用户不必担心某个节点会成为整个集群的性能瓶颈。</p><p><strong>二、复制</strong><br>Redis 集群的每个节点都有两种角色可选，一个是主节点（master node），另一个是从节点（slavenode），其中主节点用于储存数据，而从节点则是某个主节点的复制品。当用户需要处理更多读请求的时候，可以添加从节点以扩展系统的读性能。因为Redis集群重用了单机Redis复制特性的代码，所以集群的复制行为和我们之前介绍的单机复制特性的行为是完全一样的。</p><p><strong>三、节点故障检测和自动故障转移</strong><br>Redis 集群的主节点内置了类似Redis Sentinel的节点故障检测和自动故障转移功能，当集群中的某个主节点下线时，集群中的其他在线主节点会注意到这一点，并对已下线的主节点进行故障转移。集群进行故障转移的方法和Redis Sentinel进行故障转移的方法基本一样，不同的是，在集群里面，故障转移是由集群中其他在线的主节点负责进行的，所以集群不必另外使用Redis Sentinel 。</p><p><strong>四、分片</strong><br>集群使用分片来扩展数据库的容量，并将命令请求的负载交给不同的节点来分担。<br>集群将整个数据库分为 16384 个槽（slot），所有键都属于这 16384 个槽的其中一个，计算键 key属于哪个槽的公式为 slot_number = crc16(key) % 16384 ，其中 crc16 为 16 位的循环冗余校验和函数。集群中的每个主节点都可以处理 0 个至 16384 个槽，当 16384 个槽都有某个节点在负责处理时，集群进入上线状态，并开始处理客户端发送的数据命令请求。</p><p>例如，我们有三个主节点7000、7001 和 7002，那么我们可以：<br>将槽0至5460指派给节点7000负责处理；<br>将槽 5461至 10922 指派给节点 7001 负责处理；<br>将槽 10923至 16383指派给节点 7002 负责处理；</p><p>这样就可以将16384个槽平均地指派给三个节点负责处理。</p><p><strong>五、转向</strong><br>对于一个被指派了槽的主节点来说，这个主节点只会处理属于指派给自己的槽的命令请求。如果一个节点接收到了与自己处理的槽无关的命令请求，那么节点会向客户端返回一个转向错误（redirection error），告诉客户端，哪个节点负责处理这条命令，之后客户端需要根据错误中包含的地址和端口号重新向正确的节点发送命令请求。</p><p><strong>六、Redis集群客户端</strong><br>因为集群功能比起单机功能要复杂得多，所以不同语言的 Redis 客户端通常需要为集群添加特别的支持，或者专门开发一个集群客户端。</p><p>目前主要的 Redis 集群客户端（或者说，支持集群功能的 Redis 客户端）有以下这些：<br>- redis-rb-cluster：antirez 使用 Ruby 编写的 Redis 集群客户端，集群客户端的官方实现。<br>- predis：Redis 的 PHP 客户端，支持集群功能。<br>- jedis：Redis 的 JAVA 客户端，支持集群功能。<br>- StackExchange.Redis：Redis 的 C# 客户端，支持集群功能。<br>-内置的 redis-cli ：在启动时给定 -c 参数即可进入集群模式，支持部分集群功能。</p><p><strong>&lt;Redis Se**</strong>ntinel集群&gt;**</p><p>Sentinel是一个管理redis实例的工具，它可以实现对redis的监控、通知、自动故障转移。</p><p>sentinel不断地检测redis实例是否可以正常工作，通过API向其他程序报告redis的状态，如果redis master不能工作，则会自动启动故障转移进程，将其中的一个slave提升为master，其他的slave重新设置新的master服务器。</p><p>▲Sentinel主要功能<br>▪ 监控（Monitoring）：实时监控主服务器和从服务器运行状态。<br>▪ 提醒（Notification）：当被监控的某个Redis服务器出现问题时， Redis Sentinel可以向系统管理员发送通知，也可以通过API向其他程序发送通知。<br>▪ 自动故障转移（Automatic failover）：当一个主服务器不能正常工作时，Sentinel会开始一次自动故障迁移操作，它会将失效主服务器的其中一个从服务器升级为新的主服务器，并让失效主服务器的其他从服务器改为复制新的主服务器，当客户端试图连接失效的主服务器时集群也会向客户做出正确的应答。</p><p><strong>一、Redis Sentinel备份策略</strong><br>Redis提供两种相对有效的备份方法：RDB和AOF。</p><p>（一）RDB持久化设置<br>RDB是在某个时间点将内存中的所有数据的快照保存到磁盘上，在数据恢复时，可以恢复备份时间以前的所有数据，但无法恢复备份时间点后面的数据。</p><p>默认情况下Redis在磁盘上创建二进制格式的命名为dump.rdb的数据快照。可以通过配置文件配置每隔N秒且数据集上至少有M个变化时创建快照、是否对数据进行压缩、快照名称、存放快照的工作目录。</p><p>（二）AOF持久化设置<br>AOF是以协议文本的方式，将所有对数据库进行过写入的命令（及其参数）记录到 AOF 文件，以此达到记录数据库状态的目的。</p><p>优点是基本可以实现数据无丢失（缓存的数据有可能丢失），缺点是随着数据量的持续增加，AOF文件也会越来越大。</p><p>在保证数据安全的情况下，尽量避免因备份数据消耗过多的Redis资源，采用如下备份策略：</p><p>主实例：不采用任何备份机制。</p><p>Slave端：采用AOF（严格数据要求时可同时开启RDB），每天将AOF文件备份至备份服务器。</p><p>为了最大限度减少主实例的资源干扰，将备份相关全部迁移至Slave端完成。同时这样也有缺点，当主实例挂掉后，应用服务切换至Slave端，此时的Slave端的负载将会很大。</p><p>目前Redis不支持RDB和AOF参数动态修改，需要重启Redis生效，希望能在新的版本中实现更高效的修改方式。利用快照的持久化方式不是非常可靠，当运行Redis的计算机停止工作、意外掉电、意外杀掉了Redis进程那么最近写入Redis的数据将会丢。对于某些应用这或许不成问题，但对于持久化要求非常高的应用场景快照方式不是理想的选择。AOF文件是一个替代方案，用以最大限度的持久化数据。同样，可以通过配置文件来开闭AOF。</p><p>当主实例Redis服务崩溃（包含主机断电、进程消失等），Redis sentinel将Slave切换为读写状态，提供生产服务。通过故障诊断修复主实例，启动后会自动加入Sentinel并从Slave端完成数据同步，但不会切换。当主实例和Slave同时崩溃（如机房断电），启动服务器后，将备份服务器最新的AOF备份拷贝至主实例，启动主实例。一切完成后再启动Slave。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>命令行的艺术</title>
    <link href="/2017/06/12/command-shell-code/"/>
    <url>/2017/06/12/command-shell-code/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/shell/command-shell-code.jpg" srcset="/img/loading.gif" lazyload alt></p><p>熟练使用命令行是一种常常被忽视，或被认为难以掌握的技能，但实际上，它会提高你作为工程师的灵活性以及生产力。本文是一份我在 Linux 上工作时，发现的一些命令行使用技巧的摘要。有些技巧非常基础，而另一些则相当复杂，甚至晦涩难懂。这篇文章并不长，但当你能够熟练掌握这里列出的所有技巧时，你就学会了很多关于命令行的东西了。<br><a id="more"></a><br>这篇文章是<a href="https://github.com/jlevy/the-art-of-command-line/blob/master/AUTHORS.md" target="_blank" rel="noopener">许多作者和译者</a>共同的成果。这里的大部分内容 <a href="http://www.quora.com/What-are-some-lesser-known-but-useful-Unix-commands" target="_blank" rel="noopener">首次</a> <a href="http://www.quora.com/What-are-the-most-useful-Swiss-army-knife-one-liners-on-Unix" target="_blank" rel="noopener">出现</a> 于 <a href="http://www.quora.com/What-are-some-time-saving-tips-that-every-Linux-user-should-know" target="_blank" rel="noopener">Quora</a>，但考虑到这里的人们都具有学习的天赋且乐于接受别人的建议，使用 Github 来做这件事是更佳的选择。如果你在本文中发现了错误或者存在可以改善的地方，请果断提交 Issue 或 Pull Request！(当然在提交前请看一下必读节和已有的 PR/issue）。</p><h4 id="必读"><a href="#必读" class="headerlink" title="必读"></a>必读</h4><p>涵盖范围：</p><ul><li>这篇文章对刚接触命令行的新手以及具有命令行使用经验的人都有用处。本文致力于做到<em>覆盖面广</em>（尽量包括一切重要的内容），<em>具体</em>（给出最常见的具体的例子）以及<em>简洁</em>（避免不必要的，或是可以在其他地方轻松查到的细枝末节）。每个技巧在特定情境下或是基本的，或是能显著节约时间。</li><li>本文为 Linux 所写，除了<a href="https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md#%E4%BB%85%E9%99%90-os-x-%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener">仅限 OS X 系统</a>节。其它节中的大部分内容都适用于其它 Unix 系统或 MacOS 系统，甚至 Cygwin。</li><li>本文关注于交互式 Bash，尽管很多技巧也适用于其他 shell 或 Bash 脚本。</li><li>本文包括了“标准的”Unix 命令和需要安装特定包的命令，只要它们足够重要。</li></ul><p>注意事项：</p><ul><li>为了能在一页内展示尽量多的东西，一些具体的信息会被间接的包含在引用页里。聪明机智的你如果掌握了使用 Google 搜索引擎的基本思路与命令，那么你将可以查阅到更多的详细信息。使用 <code>apt-get</code>／<code>yum</code>／<code>dnf</code>／<code>pacman</code>／<code>pip</code>／<code>brew</code>（以及其它合适的包管理器）来安装新程序。</li><li>使用 <a href="http://explainshell.com/" target="_blank" rel="noopener">Explainshell</a> 去获取相关命令、参数、管道等内容的解释。</li></ul><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><ul><li>学习 Bash 的基础知识。具体来说，输入 <code>man bash</code> 并至少全文浏览一遍; 它很简单并且不长。其他的 shell 可能很好用，但 Bash 功能强大且几乎所有情况下都是可用的 （ <em>只</em>学习 zsh，fish 或其他的 shell 的话，在你自己的电脑上会显得很方便，但在很多情况下会限制你，比如当你需要在服务器上工作时）。</li><li>学习并掌握至少一个基于文本的编辑器。通常 Vim （<code>vi</code>） 会是你最好的选择，因为在终端里进行随机编辑 Vim 真的毫无敌手，哪怕是 Emacs、某大型 IDE 甚至时下非常流行的编辑器。</li><li>学会如何使用 <code>man</code> 命令去阅读文档。学会使用 <code>apropos</code> 去查找文档。了解有些命令并不对应可执行文件，而是Bash内置的，可以使用 <code>help</code> 和 <code>help -d</code> 命令获取帮助信息。</li><li>学会使用 <code>&gt;</code> 和 <code>&lt;</code> 来重定向输出和输入，学会使用 <code>|</code> 来重定向管道。明白 <code>&gt;</code> 会覆盖了输出文件而 <code>&gt;&gt;</code> 是在文件末添加。了解标准输出 stdout 和标准错误 stderr。</li><li>学会使用通配符 <code>*</code> （或许再算上 <code>?</code> 和 <code>[</code>…<code>]</code>） 和引用以及引用中 <code>&#39;</code> 和 <code>&quot;</code> 的区别。</li><li>熟悉 Bash 任务管理工具：<code>&amp;</code>，<strong>ctrl-z</strong>，<strong>ctrl-c</strong>，<code>jobs</code>，<code>fg</code>，<code>bg</code>，<code>kill</code> 等。</li><li>了解 <code>ssh</code>，以及学会通过使用 <code>ssh-agent</code>，<code>ssh-add</code> 等命令来实现基本的无密码认证。</li><li>学会基本的文件管理：<code>ls</code> 和 <code>ls -l</code> （了解 <code>ls -l</code> 中每一列代表的意义），<code>less</code>，<code>head</code>，<code>tail</code> 和 <code>tail -f</code> （甚至<code>less +F</code>），<code>ln</code> 和 <code>ln -s</code> （了解硬链接与软链接的区别），<code>chown</code>，<code>chmod</code>，<code>du</code> （硬盘使用情况概述：<code>du -hs *</code>）。 关于文件系统的管理，学习 <code>df</code>，<code>mount</code>，<code>fdisk</code>，<code>mkfs</code>，<code>lsblk</code>。知道 inode 是什么（与 <code>ls -i</code> 和 <code>df -i</code> 等命令相关）。</li><li>学习基本的网络管理：<code>ip</code> 或 <code>ifconfig</code>，<code>dig</code>。</li><li>熟悉正则表达式，以及 <code>grep</code>／<code>egrep</code> 里不同参数的作用，例如 <code>-i</code>，<code>-o</code>，<code>-v</code>，<code>-A</code>，<code>-B</code> 和 <code>-C</code>，这些参数是值得学习并掌握的。</li><li>学会使用 <code>apt-get</code>，<code>yum</code>，<code>dnf</code> 或 <code>pacman</code> （取决于你使用的 Linux 发行版）来查找或安装软件包。并确保你的环境中有<code>pip</code> 来安装基于 Python 的命令行工具 （接下来提到的部分程序使用 <code>pip</code> 来安装会很方便）。</li></ul><h4 id="日常使用"><a href="#日常使用" class="headerlink" title="日常使用"></a>日常使用</h4><ul><li>在 Bash 中，可以使用 <strong>Tab</strong> 自动补全参数，使用 <strong>ctrl-r</strong> 搜索命令行历史（在按下之后，键入便可以搜索，重复按下 <strong>ctrl-r</strong>会在更多匹配中循环，按下 <strong>Enter</strong> 会执行找到的命令，按下右方向键会将结果放入当前行中，使你可以进行编辑）。</li><li>在 Bash 中，可以使用 <strong>ctrl-w</strong> 删除你键入的最后一个单词，使用 <strong>ctrl-u</strong> 删除整行，使用 <strong>alt-b</strong> 和 <strong>alt-f</strong> 以单词为单位移动光标，使用 <strong>ctrl-a</strong> 将光标移至行首，使用 <strong>ctrl-e</strong> 将光标移至行尾，使用 <strong>ctrl-k</strong> 删除光标至行尾的所有内容，使用 <strong>ctrl-l</strong> 清屏。键入 <code>man readline</code> 查看 Bash 中的默认快捷键，内容很多。例如 <strong>alt-.</strong> 循环地移向前一个参数，以及 <strong>alt-*</strong> 展开通配符。</li><li>你喜欢的话，可以键入 <code>set -o vi</code> 来使用 vi 风格的快捷键，而 <code>set -o emacs</code> 可以把它改回来。</li><li>为了方便地键入长命令，在设置你的编辑器后（例如 <code>export EDITOR=vim</code>），键入 <strong>ctrl-x</strong> <strong>ctrl-e</strong> 会打开一个编辑器来编辑当前命令。在 vi 模式下则键入 <strong>escape-v</strong> 实现相同的功能。</li><li>键入 <code>history</code> 查看命令行历史记录。其中有许多缩写，例如 <code>!$</code>（最后键入的参数）和 <code>!!</code>（最后键入的命令），尽管通常被 <strong>ctrl-r</strong> 和 <strong>alt-.</strong> 取代。</li><li>回到上一个工作路径：<code>cd -</code></li><li>如果你输入命令的时候改变了主意，按下 <strong>alt-#</strong> 来在行首添加 <code>#</code>，或者依次按下 <strong>ctrl-a</strong>， <strong>#</strong>， <strong>enter</strong>。这样做的话，之后你可以很方便的利用命令行历史回到你刚才输入到一半的命令。</li><li>使用 <code>xargs</code> （ 或 <code>parallel</code>）。他们非常给力。注意到你可以控制每行参数个数（<code>-L</code>）和最大并行数（<code>-P</code>）。如果你不确定它们是否会按你想的那样工作，先使用 <code>xargs echo</code> 查看一下。此外，使用 <code>-I{}</code> 会很方便。例如：</li></ul><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">find</span> . -name <span class="hljs-string">'*.py'</span> | xargs <span class="hljs-keyword">grep</span> some_function<br><span class="hljs-keyword">cat</span> hosts | xargs -I&#123;&#125; ssh root@&#123;&#125; <span class="hljs-built_in">hostname</span><br></code></pre></div></td></tr></table></figure><ul><li><code>pstree -p</code> 有助于展示进程树。</li><li>使用 <code>pgrep</code> 和 <code>pkill</code> 根据名字查找进程或发送信号（<code>-f</code> 参数通常有用）。</li><li>了解你可以发往进程的信号的种类。比如，使用 <code>kill -STOP [pid]</code> 停止一个进程。使用 <code>man 7 signal</code> 查看详细列表。</li><li>使用 <code>nohup</code> 或 <code>disown</code> 使一个后台进程持续运行。</li><li>使用 <code>netstat -lntp</code> 或 <code>ss -plat</code> 检查哪些进程在监听端口（默认是检查 TCP 端口; 使用参数 <code>-u</code> 检查 UDP 端口）。</li><li>有关打开套接字和文件，请参阅 <code>lsof</code>。</li><li>使用 <code>uptime</code> 或 <code>w</code> 来查看系统已经运行多长时间。</li><li>使用 <code>alias</code> 来创建常用命令的快捷形式。例如：<code>alias ll=&#39;ls -latr&#39;</code> 使你可以方便地执行<code>ls -latr</code>命令。</li><li>在 Bash 脚本中，使用 <code>set -x</code> 去调试输出，尽可能的使用严格模式，使用 <code>set -e</code>令脚本在发生错误时退出而不是继续运行，使用 <code>set -u</code> 来检查是否使用了未赋值的变量，使用 <code>set -o pipefail</code> 严谨地对待错误（尽管问题可能很微妙）。当牵扯到很多脚本时，使用 <code>trap</code>。一个好的习惯是在脚本文件开头这样写，这会使它检测一些错误，并在错误发生时中断程序并输出信息：</li></ul><figure class="highlight gams"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">set</span> -euo <span class="hljs-comment">pipefail</span><br>trap <span class="hljs-comment">"echo 'error: Script failed: see failed command above'"</span><span class="hljs-comment"> ERR</span><br></code></pre></div></td></tr></table></figure><ul><li>在 Bash 脚本中，子 shell（使用括号 <code>(...)</code>）是一种组织参数的便捷方式。一个常见的例子是临时地移动工作路径，代码如下：</li></ul><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-keyword">do</span> something <span class="hljs-keyword">in</span> current dir</span><br>(cd /some/other/dir &amp;&amp; other-command)<br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">continue</span> <span class="hljs-keyword">in</span> original dir</span><br></code></pre></div></td></tr></table></figure><ul><li>在 Bash 中，要注意其中有许多形式的扩展。检查变量是否存在：<code>${name:?error message}</code>。例如，当 Bash 脚本需要一个参数时，可以使用这样的代码 <code>input_file=${1:?usage: $0 input_file}</code>。数学表达式：<code>i=$(( (i + 1) % 5 ))</code>。序列：<code>{1..10}</code>。截断字符串：<code>${var%suffix}</code> 和 <code>${var#prefix}</code>。例如，假设 <code>var=foo.pdf</code>，那么 <code>echo ${var%.pdf}.txt</code>将输出 <code>foo.txt</code>。</li><li>使用括号扩展（<code>{</code>…<code>}</code>）来减少输入相似文本，并自动化文本组合。这在某些情况下会很有用，例如 <code>mv foo.{txt,pdf} some-dir</code>（同时移动两个文件），<code>cp somefile{,.bak}</code>（会被扩展成 <code>cp somefile somefile.bak</code>）或者 <code>mkdir -p test-{a,b,c}/subtest-{1,2,3}</code>（会被扩展成所有可能的组合，并创建一个目录树）。</li><li>通过使用 <code>&lt;(some command)</code> 可以将输出视为文件。例如，对比本地文件 <code>/etc/hosts</code> 和一个远程文件：</li></ul><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">diff <span class="hljs-regexp">/etc/</span>hosts &lt;(ssh somehost cat <span class="hljs-regexp">/etc/</span>hosts)<br></code></pre></div></td></tr></table></figure><ul><li>了解 Bash 中的“here documents”，例如 <code>cat &lt;&lt;EOF ...</code>。</li><li>在 Bash 中，同时重定向标准输出和标准错误，<code>some-command &gt;logfile 2&gt;&amp;1</code>。通常，为了保证命令不会在标准输入里残留一个打开了的文件句柄导致你当前所在的终端无法操作，添加 <code>&lt;/dev/null</code> 是一个好习惯。</li><li>使用 <code>man ascii</code> 查看具有十六进制和十进制值的ASCII表。<code>man unicode</code>，<code>man utf-8</code>，以及 <code>man latin1</code> 有助于你去了解通用的编码信息。</li><li>使用 <code>screen</code> 或 <a href="https://tmux.github.io/" target="_blank" rel="noopener"><code>tmux</code></a> 来使用多个屏幕，当你在使用 ssh 时（保存 session 信息）将尤为有用。另一个轻量级的解决方案是 <code>dtach</code>。</li><li>ssh 中，了解如何使用 <code>-L</code> 或 <code>-D</code>（偶尔需要用 <code>-R</code>）去开启隧道是非常有用的，例如当你需要从一台远程服务器上访问 web。</li><li>对 ssh 设置做一些小优化可能是很有用的，例如这个 <code>~/.ssh/config</code> 文件包含了防止特定环境下断开连接、压缩数据、多通道等选项：</li></ul><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attribute">TCPKeepAlive</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attribute">ServerAliveInterval</span>=15<br><span class="hljs-attribute">ServerAliveCountMax</span>=6<br><span class="hljs-attribute">Compression</span>=<span class="hljs-literal">yes</span><br>ControlMaster auto<br>ControlPath /tmp/%r@%h:%p<br>ControlPersist <span class="hljs-literal">yes</span><br></code></pre></div></td></tr></table></figure><ul><li>部分其他的关于 ssh 的选项是安全敏感且应当小心启用的。例如在可信任的网络中：<code>StrictHostKeyChecking=no</code>，<code>ForwardAgent=yes</code></li><li>考虑使用 <a href="https://mosh.mit.edu/" target="_blank" rel="noopener"><code>mosh</code></a> 作为 ssh 的替代品，它使用 UDP 协议。</li><li>获取文件的八进制格式权限，使用类似如下的代码：</li></ul><figure class="highlight llvm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">stat -<span class="hljs-keyword">c</span> '<span class="hljs-symbol">%A</span> <span class="hljs-symbol">%a</span> <span class="hljs-symbol">%n</span>' /etc/timezone<br></code></pre></div></td></tr></table></figure><ul><li>使用 <a href="https://github.com/mooz/percol" target="_blank" rel="noopener"><code>percol</code></a> 或者 <a href="https://github.com/junegunn/fzf" target="_blank" rel="noopener"><code>fzf</code></a> 可以交互式地从另一个命令输出中选取值。</li><li>使用 <code>fpp</code>（<a href="https://github.com/facebook/PathPicker" target="_blank" rel="noopener">PathPicker</a>）可以与基于另一个命令(例如 <code>git</code>）输出的文件交互。</li><li>将 web 服务器上当前目录下所有的文件（以及子目录）暴露给你所处网络的所有用户，使用： <code>python -m SimpleHTTPServer 7777</code> （使用端口 7777 和 Python 2）或<code>python -m http.server 7777</code> （使用端口 7777 和 Python 3）。</li><li>以某种权限执行命令，使用<code>sudo</code>（root 权限）或<code>sudo -u</code>（其他用户）。使用<code>su</code>或者<code>sudo bash</code>来启动一个以对应用户权限运行的 shell。使用<code>su -</code>模拟其他用户的登录。</li></ul><h4 id="文件及数据处理"><a href="#文件及数据处理" class="headerlink" title="文件及数据处理"></a>文件及数据处理</h4><ul><li>在当前路径下通过文件名定位一个文件，<code>find . -iname &#39;*something*&#39;</code>（或类似的）。在所有路径下通过文件名查找文件，使用 <code>locate something</code> （但请记住 <code>updatedb</code> 可能没有对最近新建的文件建立索引）。</li><li>使用 <a href="https://github.com/ggreer/the_silver_searcher" target="_blank" rel="noopener"><code>ag</code></a> 在源代码或数据文件里检索（比 <code>grep -r</code> 更好）。</li><li>将 HTML 转为文本：<code>lynx -dump -stdin</code></li><li>Markdown，HTML，以及所有文档格式之间的转换，试试 <a href="http://pandoc.org/" target="_blank" rel="noopener"><code>pandoc</code></a>。</li><li>如果你不得不处理 XML，<code>xmlstarlet</code> 宝刀未老。</li><li>使用 <a href="http://stedolan.github.io/jq/" target="_blank" rel="noopener"><code>jq</code></a> 处理 JSON。</li><li>使用 <a href="https://github.com/0k/shyaml" target="_blank" rel="noopener"><code>shyaml</code></a> 处理 YAML。</li><li>Excel 或 CSV 文件的处理，<a href="https://github.com/onyxfish/csvkit" target="_blank" rel="noopener">csvkit</a> 提供了 <code>in2csv</code>，<code>csvcut</code>，<code>csvjoin</code>，<code>csvgrep</code>等工具。</li><li>关于 Amazon S3，<a href="https://github.com/s3tools/s3cmd" target="_blank" rel="noopener"><code>s3cmd</code></a> 很方便而 <a href="https://github.com/bloomreach/s4cmd" target="_blank" rel="noopener"><code>s4cmd</code></a> 更快。Amazon 官方的 <a href="https://github.com/aws/aws-cli" target="_blank" rel="noopener"><code>aws</code></a> 以及 <a href="https://github.com/donnemartin/saws" target="_blank" rel="noopener"><code>saws</code></a>是其他 AWS 相关工作的基础。</li><li>了解如何使用 <code>sort</code> 和 <code>uniq</code>，包括 uniq 的 <code>-u</code> 参数和 <code>-d</code> 参数，详见后文单行脚本节。另外可以了解一下 <code>comm</code>。</li><li>了解如何使用 <code>cut</code>，<code>paste</code> 和 <code>join</code> 来更改文件。很多人都会使用 <code>cut</code>，但几乎都不会使用 <code>join</code>。</li><li>了解如何运用 <code>wc</code> 去计算新行数（<code>-l</code>），字符数（<code>-m</code>），单词数（<code>-w</code>）以及字节数（<code>-c</code>）。</li><li>了解如何使用 <code>tee</code> 将标准输入复制到文件甚至标准输出，例如 <code>ls -al | tee file.txt</code>。</li><li>了解语言环境对许多命令行工具的微妙影响，包括排序的顺序和性能。大多数 Linux 的安装过程会将 <code>LANG</code> 或其他有关的变量设置为符合本地的设置。意识到当你改变语言环境时，排序的结果可能会改变。明白国际化可能会使 sort 或其他命令运行效率下降<em>许多倍</em>。某些情况下（例如集合运算）你可以放心的使用 <code>export LC_ALL=C</code> 来忽略掉国际化并使用基于字节的顺序。</li><li>了解 <code>awk</code> 和 <code>sed</code> 关于数据的简单处理的用法。例如，将文本文件中第三列的所有数字求和：<code>awk &#39;{ x += $3 } END { print x }&#39;</code>. 这可能比同等作用的 Python 代码快三倍且代码量少三倍。</li><li>替换一个或多个文件中出现的字符串：</li></ul><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">perl -<span class="hljs-literal">pi</span>.bak -e 's/old-<span class="hljs-built_in">string</span>/new-<span class="hljs-built_in">string</span>/g' <span class="hljs-keyword">my</span>-files-*.txt<br></code></pre></div></td></tr></table></figure><ul><li>使用 <a href="https://github.com/jlevy/repren" target="_blank" rel="noopener"><code>repren</code></a> 来批量重命名，或是在多个文件中搜索替换。（有些时候 <code>rename</code> 命令也可以批量重命名，但要注意，它在不同 Linux 发行版中的功能并不完全一样。）</li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-comment"># Full rename of filenames, directories, and contents foo -&gt; bar:</span><br>repren <span class="hljs-params">--full</span> <span class="hljs-params">--preserve-case</span> <span class="hljs-params">--from</span> foo <span class="hljs-params">--to</span> bar .<br><span class="hljs-comment"># Recover backup files whatever.bak -&gt; whatever:</span><br>repren <span class="hljs-params">--renames</span> <span class="hljs-params">--from</span> '<span class="hljs-params">(.*)</span>\<span class="hljs-string">.bak</span>' <span class="hljs-params">--to</span> '\1' *<span class="hljs-string">.bak</span><br><span class="hljs-comment"># Same as above, using rename, if available:</span><br>rename 's/\<span class="hljs-string">.bak</span>$<span class="hljs-string">//</span>' *<span class="hljs-string">.bak</span><br></code></pre></div></td></tr></table></figure><ul><li>根据 man 页面的描述，<code>rsync</code> 真的是一个快速且非常灵活的文件复制工具。它通常被用于机器间的同步，但在本地也同样有用。它同时也是删除大量文件的<a href="https://web.archive.org/web/20130929001850/http://linuxnote.net/jianingy/en/linux/a-fast-way-to-remove-huge-number-of-files.html" target="_blank" rel="noopener">最快方法</a>之一：</li></ul><figure class="highlight maxima"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-built_in">mkdir</span> empty &amp;&amp; rsync -r --<span class="hljs-built_in">delete</span> empty/ <span class="hljs-built_in">some</span>-dir &amp;&amp; <span class="hljs-built_in">rmdir</span> <span class="hljs-built_in">some</span>-dir<br></code></pre></div></td></tr></table></figure><ul><li>使用 <code>shuf</code> 从一个文件中随机选取多行。</li><li>了解 <code>sort</code> 的参数。处理数字方面，使用 <code>-n</code> 或者 <code>-h</code> 来处理可读性数字（例如 <code>du -h</code> 的输出）。明白键的工作原理（<code>-t</code> 和 <code>-k</code>）。例如，注意到你需要 <code>-k1，1</code> 来仅按第一个域来排序，而 <code>-k1</code> 意味着按整行排序。稳定排序（<code>sort -s</code>）在某些情况下很有用。例如，以第二个域为主关键字，第一个域为次关键字进行排序，你可以使用 <code>sort -k1，1 | sort -s -k2，2</code>。</li><li>如果你想在 Bash 命令行中写 tab 制表符，按下 <strong>ctrl-v</strong> <strong>[Tab]</strong> 或键入 <code>$&#39;\t&#39;</code> （后者可能更好，因为你可以复制粘贴它）。</li><li>标准的源代码对比及合并工具是 <code>diff</code> 和 <code>patch</code>。使用 <code>diffstat</code> 查看变更总览数据。注意到 <code>diff -r</code> 对整个文件夹有效。使用 <code>diff -r tree1 tree2 | diffstat</code> 查看变更总览数据。</li><li>对于二进制文件，使用 <code>hd</code> 使其以十六进制显示以及使用 <code>bvi</code> 来编辑二进制。</li><li>同样对于二进制文件，<code>strings</code>（包括 <code>grep</code> 等等）允许你查找一些文本。</li><li>二进制文件对比（Delta 压缩），使用 <code>xdelta3</code>。</li><li>使用 <code>iconv</code> 更改文本编码。而更高级的用法，可以使用 <code>uconv</code>，它支持一些高级的 Unicode 功能。例如，这条命令将所有元音字母转为小写并移除了：</li></ul><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">uconv -f utf-<span class="hljs-number">8</span> -t utf-<span class="hljs-number">8</span> -x <span class="hljs-string">'::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] &gt;; ::Any-NFC; '</span> &lt; <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.txt</span> &gt; output.txt<br></code></pre></div></td></tr></table></figure><ul><li>拆分文件，查看 <code>split</code>（按大小拆分）和 <code>csplit</code>（按模式拆分）。</li><li>用 <a href="http://www.fresse.org/dateutils/" target="_blank" rel="noopener"><code>dateutils</code></a> 中的 <code>dateadd</code>, <code>datediff</code>, <code>strptime</code> 等工具操作日期和时间表达式。</li><li>使用 <code>zless</code>，<code>zmore</code>，<code>zcat</code> 和 <code>zgrep</code> 对压缩过的文件进行操作。</li></ul><h4 id="系统调试"><a href="#系统调试" class="headerlink" title="系统调试"></a>系统调试</h4><ul><li><code>curl</code> 和 <code>curl -I</code> 可以便捷地被应用于 web 调试中，它们的好兄弟 <code>wget</code> 也可以，或者是更潮的 <a href="https://github.com/jakubroztocil/httpie" target="_blank" rel="noopener"><code>httpie</code></a>。</li><li>使用 <code>iostat</code>、<code>netstat</code>、<code>top</code> （<code>htop</code> 更佳）和 <code>dstat</code> 去获取硬盘、cpu 和网络的状态。熟练掌握这些工具可以使你快速的对系统的当前状态有一个大概的认识。</li><li>使用 <code>netstat</code> 和 <code>ss</code> 查看网络连接的细节。</li><li>若要对系统有一个深度的总体认识，使用 <a href="https://github.com/nicolargo/glances" target="_blank" rel="noopener"><code>glances</code></a>。它在一个终端窗口中向你提供一些系统级的数据。这对于快速的检查各个子系统非常有帮助。</li><li>若要了解内存状态，运行并理解 <code>free</code> 和 <code>vmstat</code> 的输出。尤其注意“cached”的值，它指的是 Linux 内核用来作为文件缓存的内存大小，因此它与空闲内存无关。</li><li>Java 系统调试则是一件截然不同的事，一个可以用于 Oracle 的 JVM 或其他 JVM 上的调试的技巧是你可以运行 <code>kill -3 &lt;pid&gt;</code> 同时一个完整的栈轨迹和堆概述（包括 GC 的细节）会被保存到标准输出/日志文件。JDK 中的<code>jps</code>，<code>jstat</code>，<code>jstack</code>，<code>jmap</code> 很有用。<a href="https://github.com/aragozin/jvm-tools" target="_blank" rel="noopener">SJK tools</a> 更高级.</li><li>使用 <code>mtr</code> 去跟踪路由，用于确定网络问题。</li><li>用 <code>ncdu</code> 来查看磁盘使用情况，它比常用的命令，如 <code>du -sh *</code>，更节省时间。</li><li>查找正在使用带宽的套接字连接或进程，使用 <code>iftop</code> 或 <code>nethogs</code>。</li><li><code>ab</code> 工具（捆绑于 Apache）可以简单粗暴地检查 web 服务器的性能。对于更复杂的负载测试，使用 <code>siege</code>。</li><li><code>wireshark</code>，<code>tshark</code> 和 <code>ngrep</code> 可用于复杂的网络调试。</li><li>了解 <code>strace</code> 和 <code>ltrace</code>。这俩工具在你的程序运行失败、挂起甚至崩溃，而你却不知道为什么或你想对性能有个总体的认识的时候是非常有用的。注意 profile 参数（<code>-c</code>）和附加到一个运行的进程参数 （<code>-p</code>）。</li><li>了解使用 <code>ldd</code> 来检查共享库。</li><li>了解如何运用 <code>gdb</code> 连接到一个运行着的进程并获取它的堆栈轨迹。</li><li>学会使用 <code>/proc</code>。它在调试正在出现的问题的时候有时会效果惊人。比如：<code>/proc/cpuinfo</code>，<code>/proc/meminfo</code>，<code>/proc/cmdline</code>，<code>/proc/xxx/cwd</code>，<code>/proc/xxx/exe</code>，<code>/proc/xxx/fd/</code>，<code>/proc/xxx/smaps</code>（这里的 <code>xxx</code> 表示进程的 id 或 pid）。</li><li>当调试一些之前出现的问题的时候，<code>sar</code> 非常有用。它展示了 cpu、内存以及网络等的历史数据。</li><li>关于更深层次的系统分析以及性能分析，看看 <code>stap</code>（<a href="https://sourceware.org/systemtap/wiki" target="_blank" rel="noopener">SystemTap</a>），<a href="http://en.wikipedia.org/wiki/Perf_(Linux" target="_blank" rel="noopener"><code>perf</code></a>)，以及<a href="https://github.com/draios/sysdig" target="_blank" rel="noopener"><code>sysdig</code></a>。</li><li>查看你当前使用的系统，使用 <code>uname</code> ， <code>uname -a</code> （Unix／kernel 信息） 或者 <code>lsb_release -a</code> （Linux 发行版信息）。</li><li>无论什么东西工作得很欢乐时试试 <code>dmesg</code>（可能是硬件或驱动问题）。</li></ul><h4 id="单行脚本"><a href="#单行脚本" class="headerlink" title="单行脚本"></a>单行脚本</h4><p>一些命令组合的例子：</p><ul><li>当你需要对文本文件做集合交、并、差运算时，结合使用 <code>sort</code>/<code>uniq</code> 很有帮助。假设 <code>a</code> 与 <code>b</code> 是两内容不同的文件。这种方式效率很高，并且在小文件和上G的文件上都能运用 （<code>sort</code> 不被内存大小约束，尽管在 <code>/tmp</code> 在一个小的根分区上时你可能需要 <code>-T</code> 参数），参阅前文中关于 <code>LC_ALL</code> 和 <code>sort</code> 的 <code>-u</code> 参数的部分。</li></ul><figure class="highlight swift"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">cat a b | <span class="hljs-built_in">sort</span> | uniq &gt; <span class="hljs-built_in">c</span>   # <span class="hljs-built_in">c</span> <span class="hljs-keyword">is</span> a union b<br>cat a b | <span class="hljs-built_in">sort</span> | uniq -d &gt; <span class="hljs-built_in">c</span>   # <span class="hljs-built_in">c</span> <span class="hljs-keyword">is</span> a intersect b<br>cat a b b | <span class="hljs-built_in">sort</span> | uniq -u &gt; <span class="hljs-built_in">c</span>   # <span class="hljs-built_in">c</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">set</span> difference a - b<br></code></pre></div></td></tr></table></figure><ul><li>使用 <code>grep . *</code>（每行都会附上文件名）或者 <code>head -100 *</code>（每个文件有一个标题）来阅读检查目录下所有文件的内容。这在检查一个充满配置文件的目录（如 <code>/sys</code>、<code>/proc</code>、<code>/etc</code>）时特别好用。</li><li>计算文本文件第三列中所有数的和（可能比同等作用的 Python 代码快三倍且代码量少三倍）：</li></ul><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attribute">awk</span> <span class="hljs-string">'&#123; x += <span class="hljs-variable">$3</span> &#125; END &#123; print x &#125;'</span> myfile<br></code></pre></div></td></tr></table></figure><ul><li>如果你想在文件树上查看大小/日期，这可能看起来像递归版的 <code>ls -l</code> 但比 <code>ls -lR</code> 更易于理解：</li></ul><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">find</span> . -<span class="hljs-built_in">type</span> <span class="hljs-keyword">f</span> -<span class="hljs-keyword">ls</span><br></code></pre></div></td></tr></table></figure><ul><li>假设你有一个类似于 web 服务器日志文件的文本文件，并且一个确定的值只会出现在某些行上，假设一个 <code>acct_id</code> 参数在URI中。如果你想计算出每个 <code>acct_id</code> 值有多少次请求，使用如下代码：</li></ul><figure class="highlight coq"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">cat access.log | <span class="hljs-type">egrep</span> -o 'acct_id=[<span class="hljs-number">0</span><span class="hljs-number">-9</span>]+' | <span class="hljs-type">cut</span> -d= -f2 | <span class="hljs-type">sort</span> | <span class="hljs-type">uniq</span> -c | <span class="hljs-type">sort</span> -rn<br></code></pre></div></td></tr></table></figure><ul><li>运行这个函数从这篇文档中随机获取一条技巧（解析 Markdown 文件并抽取项目）：</li></ul><figure class="highlight livecodeserver"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">taocl</span>() &#123;</span><br>  curl -s <span class="hljs-keyword">https</span>://raw.githubusercontent.com/jlevy/<span class="hljs-keyword">the</span>-art-<span class="hljs-keyword">of</span>-<span class="hljs-keyword">command</span>-line/<span class="hljs-title">master</span>/<span class="hljs-title">README</span>.<span class="hljs-title">md</span> |<br>    pandoc -f markdown -t html |<br>    xmlstarlet fo <span class="hljs-comment">--html --dropdtd |</span><br>    xmlstarlet sel -t -v <span class="hljs-string">"(html/body/ul/li[count(p)&gt;0])[$RANDOM mod last()+1]"</span> |<br>    xmlstarlet unesc | fmt <span class="hljs-number">-80</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="冷门但有用"><a href="#冷门但有用" class="headerlink" title="冷门但有用"></a>冷门但有用</h4><ul><li><code>expr</code>：计算表达式或正则匹配</li><li><code>m4</code>：简单地宏处理器</li><li><code>yes</code>：多次打印字符串</li><li><code>cal</code>：漂亮的日历</li><li><code>env</code>：执行一个命令（脚本文件中很有用）</li><li><code>printenv</code>：打印环境变量（调试时或在使用脚本文件时很有用）</li><li><code>look</code>：查找以特定字符串开头的单词</li><li><code>cut</code>、<code>paste</code> 和 <code>join</code>：数据修改</li><li><code>fmt</code>：格式化文本段落</li><li><code>pr</code>：将文本格式化成页/列形式</li><li><code>fold</code>：包裹文本中的几行</li><li><code>column</code>：将文本格式化成多列或表格</li><li><code>expand</code> 和 <code>unexpand</code>：制表符与空格之间转换</li><li><code>nl</code>：添加行号</li><li><code>seq</code>：打印数字</li><li><code>bc</code>：计算器</li><li><code>factor</code>：分解因数</li><li><a href="https://gnupg.org/" target="_blank" rel="noopener"><code>gpg</code></a>：加密并签名文件</li><li><code>toe</code>：terminfo entries 列表</li><li><code>nc</code>：网络调试及数据传输</li><li><code>socat</code>：套接字代理，与 <code>netcat</code> 类似</li><li><a href="https://github.com/mattthias/slurm" target="_blank" rel="noopener"><code>slurm</code></a>：网络可视化</li><li><code>dd</code>：文件或设备间传输数据</li><li><code>file</code>：确定文件类型</li><li><code>tree</code>：以树的形式显示路径和文件，类似于递归的 <code>ls</code></li><li><code>stat</code>：文件信息</li><li><code>time</code>：执行命令，并计算执行时间</li><li><code>lockfile</code>：使文件只能通过 <code>rm -f</code> 移除</li><li><code>logrotate</code>: 切换、压缩以及发送日志文件</li><li><code>watch</code>：重复运行同一个命令，展示结果并高亮有更改的部分</li><li><code>tac</code>：反向输出文件</li><li><code>shuf</code>：文件中随机选取几行</li><li><code>comm</code>：一行一行的比较排序过的文件</li><li><code>pv</code>：监视通过管道的数据</li><li><code>hd</code>，<code>hexdump</code>，<code>xxd</code>，<code>biew</code> 和 <code>bvi</code>：保存或编辑二进制文件</li><li><code>strings</code>：从二进制文件中抽取文本</li><li><code>tr</code>：转换字母</li><li><code>iconv</code> 或 <code>uconv</code>：简易的文件编码</li><li><code>split</code> 和 <code>csplit</code>：分割文件</li><li><code>sponge</code>：在写入前读取所有输入，在读取文件后再向同一文件写入时比较有用，例如 <code>grep -v something some-file | sponge some-file</code></li><li><code>units</code>：将一种计量单位转换为另一种等效的计量单位（参阅 <code>/usr/share/units/definitions.units</code>）</li><li><code>apg</code>：随机生成密码</li><li><code>7z</code>：高比例的文件压缩</li><li><code>ldd</code>：动态库信息</li><li><code>nm</code>：提取 obj 文件中的符号</li><li><code>ab</code>：性能分析 web 服务器</li><li><code>strace</code>：系统调用调试</li><li><code>mtr</code>：更好的网络调试跟踪工具</li><li><code>cssh</code>：可视化的并发 shell</li><li><code>rsync</code>：通过 ssh 或本地文件系统同步文件和文件夹</li><li><code>wireshark</code> 和 <code>tshark</code>：抓包和网络调试工具</li><li><code>ngrep</code>：网络层的 grep</li><li><code>host</code> 和 <code>dig</code>：DNS 查找</li><li><code>lsof</code>：列出当前系统打开文件的工具以及查看端口信息</li><li><code>dstat</code>：系统状态查看</li><li><a href="https://github.com/nicolargo/glances" target="_blank" rel="noopener"><code>glances</code></a>：高层次的多子系统总览</li><li><code>iostat</code>：硬盘使用状态</li><li><code>mpstat</code>: CPU 使用状态</li><li><code>vmstat</code>: 内存使用状态</li><li><code>htop</code>：top 的加强版</li><li><code>last</code>：登入记录</li><li><code>w</code>：查看处于登录状态的用户</li><li><code>id</code>：用户/组 ID 信息</li><li><code>sar</code>：系统历史数据</li><li><code>iftop</code> 或 <code>nethogs</code>：套接字及进程的网络利用</li><li><code>ss</code>：套接字数据</li><li><code>dmesg</code>：引导及系统错误信息</li><li><code>sysctl</code>: 在内核运行时动态地查看和修改内核的运行参数</li><li><code>hdparm</code>：SATA/ATA 磁盘更改及性能分析</li><li><code>lsb_release</code>：Linux 发行版信息</li><li><code>lsblk</code>：列出块设备信息：以树形展示你的磁盘以及磁盘分区信息</li><li><code>lshw</code>，<code>lscpu</code>，<code>lspci</code>，<code>lsusb</code> 和 <code>dmidecode</code>：查看硬件信息，包括 CPU、BIOS、RAID、显卡、USB设备等</li><li><code>lsmod</code> 和 <code>modinfo</code>：列出内核模块，并显示其细节</li><li><code>fortune</code>，<code>ddate</code> 和 <code>sl</code>：额，这主要取决于你是否认为蒸汽火车和莫名其妙的名人名言是否“有用”</li></ul><h4 id="仅限-OS-X-系统"><a href="#仅限-OS-X-系统" class="headerlink" title="仅限 OS X 系统"></a>仅限 OS X 系统</h4><p>以下是<em>仅限于</em> MacOS 系统的技巧</p><ul><li>用 <code>brew</code> （Homebrew）或者 <code>port</code> （MacPorts）进行包管理。这些可以用来在 Mac 系统上安装以上的大多数命令。</li><li>用 <code>pbcopy</code> 复制任何命令的输出到桌面应用，用 <code>pbpaste</code> 粘贴输入。</li><li>若要在 Mac OS 终端中将 Option 键视为 alt 键（例如在上面介绍的 <strong>alt-b</strong>, <strong>alt-f</strong> 等命令中用到），打开 偏好设置 -&gt; 描述文件 -&gt; 键盘 并勾选“使用 Option 键作为 Meta 键”。</li><li>用 <code>open</code> 或者 <code>open -a /Applications/Whatever.app</code> 使用桌面应用打开文件。</li><li>Spotlight： 用 <code>mdfind</code> 搜索文件，用 <code>mdls</code> 列出元数据（例如照片的 EXIF 信息）。</li><li>注意 MacOS 系统是基于 BSD UNIX 的，许多命令（例如 <code>ps</code>，<code>ls</code>，<code>tail</code>，<code>awk</code>，<code>sed</code>）都和 Linux 中有些微的不同，这些极大的被 System V-style Unix 和 GNU 工具影响。你可以通过标题为 “BSD General Commands Manual” 的 man 页面发现这些不同。在有些情况下 GNU 版本的命令也可能被安装（例如 <code>gawk</code> 和 <code>gsed</code> 对应 GNU 中的 awk 和 sed ）。如果要写跨平台的 Bash 脚本，避免使用这些命令（例如，考虑 Python 或者 <code>perl</code> ）或者经过仔细的测试。</li><li>用 <code>sw_vers</code> 获取 MacOS 的版本信息。</li></ul><h4 id="更多资源"><a href="#更多资源" class="headerlink" title="更多资源"></a>更多资源</h4><ul><li><a href="https://github.com/alebcay/awesome-shell" target="_blank" rel="noopener">awesome-shell</a>：一份精心组织的命令行工具及资源的列表。</li><li><a href="https://github.com/herrbischoff/awesome-osx-command-line" target="_blank" rel="noopener">awesome-osx-command-line</a>：一份针对 Mac OS 命令行的更深入的指南。</li><li><a href="http://redsymbol.net/articles/unofficial-bash-strict-mode/" target="_blank" rel="noopener">Strict mode</a>：为了编写更好的脚本文件。</li><li><a href="https://github.com/koalaman/shellcheck" target="_blank" rel="noopener">shellcheck</a>：一个静态 shell 脚本分析工具，本质上是 bash／sh／zsh 的 lint。</li><li><a href="http://www.dwheeler.com/essays/filenames-in-shell.html" target="_blank" rel="noopener">Filenames and Pathnames in Shell</a>：有关如何在 shell 脚本里正确处理文件名的细枝末节。</li></ul><h4 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h4><p>除去特别微小的任务，编写代码是出于方便阅读的目的。能力往往伴随着责任。你 <em>可以</em> 在 Bash 中做一些事并不意味着你应该去做！;)</p><p>via：<a href="https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md" target="_blank" rel="noopener">Github</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>redis学习简记</title>
    <link href="/2017/06/11/redis_sp/"/>
    <url>/2017/06/11/redis_sp/</url>
    
    <content type="html"><![CDATA[<h4 id="server"><a href="#server" class="headerlink" title="server"></a>server</h4><a id="more"></a>  <figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><br>BGREWRITEAOF  <span class="hljs-comment">#重写会创建一个当前 AOF 文件的体积优化版本</span><br>BGSAVE  <span class="hljs-comment">#保存当前数据库到磁盘</span><br>CLIENT GETNAME <span class="hljs-comment">#连接名设置  </span><br>CLIENT SETNAME <span class="hljs-comment">#当前连接分配一个名字</span><br>CLINENT LIST  <span class="hljs-comment">#列出所有已连接客户端</span><br>  以下是域的含义：<br>  • addr ：客户端的地址和端口<br>  • fd ：套接字所使用的文件描述符<br>  • age ：以秒计算的已连接时长<br>  • idle ：以秒计算的空闲时长<br>  • flags ：客户端 flag （见下文）<br>  • db ：该客户端正在使用的数据库 ID<br>  • sub ：已订阅频道的数量<br>  • psub ：已订阅模式的数量<br>  • multi ：在事务中被执行的命令数量<br>  • qbuf ：查询缓存的长度（<span class="hljs-number">0</span> 表示没有查询在等待）<br>  • qbuf-free ：查询缓存的剩余空间（<span class="hljs-number">0</span> 表示没有剩余空间）<br>  • obl ：输出缓存的长度<br>  • oll ：输出列表的长度（当输出缓存没有剩余空间时，回复被入队到这个队列里）<br>  • omem ：输出缓存的内存占用量<br>  • events ：文件描述符事件（见下文）<br>  • cmd ：最近一次执行的命令<br>  客户端 flag 可以由以下部分组成：<br>  • O ：客户端是 <span class="hljs-literal">MONITOR</span> 模式下的附属节点（<span class="hljs-literal">slave</span>）<br>  • S ：客户端是一般模式下（normal）的附属节点<br>  • M ：客户端是主节点（<span class="hljs-literal">master</span>）<br>  • x ：客户端正在执行事务<br>  • b ：客户端正在等待阻塞事件<br>  • i ：客户端正在等待 VM I/O 操作（已废弃）<br>  • d ：一个受监视（watched）的键已被修改，EXEC 命令将失败<br>  • c : 在将回复完整地写出之后，关闭链接<br>  • u : 客户端未被阻塞（unblocked）<br>  • A : 尽可能快地关闭连接<br>  • N : 未设置任何 flag<br>  文件描述符事件可以是：<br>  • r : 客户端套接字（在事件 loop 中）是可读的（readable）<br>  • w : 客户端套接字（在事件 loop 中）是可写的（writeable）<br><br>CLIENT KILL <span class="hljs-comment">#杀死当前客户端连接</span><br>CONFIG GET <span class="hljs-comment"># 获取Redis 服务器的配置参数 </span><br>redis&gt; CONFIG GET s* <span class="hljs-comment">#获取以s开头的配置参数的值 </span><br>CONFIG SET <span class="hljs-comment">#修改配置参数，或者改变 Redis 的持久化 (Persistence) 方式。动态调整，无需重启，ONFIG SET 的值只能通过数字值显式地设定。</span><br>CONFIG RESETSTAT <span class="hljs-comment">#重置INFO 命令中的某些统计数据,包括：</span><br>  • Keyspace hits (键空间命中次数)<br>  • Keyspace misses (键空间不命中次数)<br>  • <span class="hljs-keyword">Number</span> of commands processed (执行命令的次数)<br>  • <span class="hljs-keyword">Number</span> of connections received (连接服务器的次数)<br>  • <span class="hljs-keyword">Number</span> of expired keys (过期 key 的数量)<br>  • <span class="hljs-keyword">Number</span> of rejected connections (被拒绝的连接数量)<br>  • Latest fork(<span class="hljs-number">2</span>) time(最后执行 fork(<span class="hljs-number">2</span>) 的时间)<br>  • The aof_delayed_fsync counter(aof_delayed_fsync 计数器的值)<br> <br>CONFIG REWRITE <span class="hljs-comment">#重新构建并生成出一个新的 redis.conf 文件 原子性重写</span><br> <br>DBSIZE <span class="hljs-comment">#返回当前数据库的 key 的数量。</span><br> <br>DEBUG OBJECT <span class="hljs-comment">#调试命令，当 key 存在时，返回有关信息。当 key 不存在时，返回一个错误</span><br> <br>FLUSHALL <span class="hljs-comment">#清空整个 Redis 服务器的数据 所有(删除所有数据库的所有 key )</span><br>FLUSHDB <span class="hljs-comment">#清空当前数据库中的所有 key。此命令从不失败</span><br><span class="hljs-literal">INF</span>O <span class="hljs-comment">#Redis 服务器的各种信息和统计数值</span><br>LASTSAVE <span class="hljs-comment">#返回最近一次 Redis 成功将数据保存到磁盘上的时间，以 UNIX 时间戳格式表示。</span><br><span class="hljs-literal">MONITOR</span> <span class="hljs-comment">#实时打印出 Redis 服务器接收到的命令，调试用。</span><br>PSYNC <span class="hljs-comment">#用于复制功能 (replication) 的内部命令。</span><br>SAVE <span class="hljs-comment">#将当前 Redis 实例的所有数据快照 (snapshot) 以 RDB 文件的形式保存到硬盘。</span><br>SHUTDOWN <br>SLAVEOF <span class="hljs-comment">#用于在 Redis 运行时动态地修改复制 (replication) 功能的行为</span><br>  •SLAVEOF NO ONE 对一个从属服务器执行命令  将使得这个从属服务器关闭复制功能,并从从属服务器<br>转变回主服务器,原来同步数据不会丢失<br>  •以将当前服务器转变为指定服务器的从属服务器 (<span class="hljs-literal">slave</span> server)。<br>如果当前服务器已经是某个主服务器 (<span class="hljs-keyword">master</span> <span class="hljs-title">server</span>) 的从属服务器，那么执行 SLAVEOF host port 将使当<br>前服务器停止对旧主服务器的同步，丢弃旧数据集，转而开始对新主服务器进行同步。<br><br>SLOWLOG <span class="hljs-comment">#用于复制功能 (replication) 的内部命令</span><br>Slow log 是 Redis 用来记录查询执行时间的日志系统 [Replication](https://redis.io/topics/replication)<br>SYNC <span class="hljs-comment"># 个包含两个字符串的列表：第一个字符串是当前时间 (以 UNIX 时间戳格式表示)，而第二个字</span><br>符串是当前这一秒钟已经逝去的微秒数。<br></code></pre></div></td></tr></table></figure><h4 id="connection"><a href="#connection" class="headerlink" title="connection"></a>connection</h4><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">AUTH <br><span class="hljs-built_in"> CONFIG </span><span class="hljs-builtin-name">SET</span> requirepass password #可以使用密<br>码来保护 Redis 服务器<br>ECHO message<span class="hljs-built_in"><br>PING<br></span>QUIT<br>SELECT #切换到指定的数据库，数据库索引号 index 用数字值指定，以 0 作为起始索引值。默认使用0号数据库<br></code></pre></div></td></tr></table></figure><h4 id="部分常用命令"><a href="#部分常用命令" class="headerlink" title="部分常用命令"></a>部分常用命令</h4><p><strong>1）获取sentinel的状态</strong></p><figure class="highlight dsconfig"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">(1）<span class="hljs-string">info<br></span><br>查看<span class="hljs-string">sentinel的</span><span class="hljs-string">zhuangtai<br></span><br>(2）<span class="hljs-string">sentinel </span><span class="hljs-string">masters </span><br><br>获取<span class="hljs-string">sentinel中</span>监控的所有<span class="hljs-string">master的</span>节点<br><br>(3）<span class="hljs-string">sentinel </span><span class="hljs-string">master </span><br><br>获取<span class="hljs-string">master-name节</span>点<span class="hljs-string">redis的</span>状态信息<br><br>(4）<span class="hljs-string">sentinel </span><span class="hljs-string">slaves </span><br><br>获取<span class="hljs-string">master-name节</span>点下所有的<span class="hljs-string">slaves的</span>状态信息。<br><br>(5) <span class="hljs-string">SENTINEL </span><span class="hljs-built_in">get-master-addr-by-name</span><br><br>通过<span class="hljs-string">sentinel中</span>的节点名获取其<span class="hljs-string">ip地</span>址<br></code></pre></div></td></tr></table></figure><p><strong>2）添加或删除监控节点</strong></p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">（1）sentinel monitor    <br> <br>name: sentinel中节点的名字<br><span class="hljs-built_in"><br>port ip </span>: 被监控的redis master实例<br><br>quorum : failover时，需要的法定人数。<br><br>（2）sentinel reset<br><br> 重置redis name匹配制定的状态，包括正在failover的master。<br><br> 该操作会删除该节点上的slave信息、已经发现和关联的sentinel节点信息。<br><br> sentinel将会重新发现sentinel和redis slave节点。<br><br>（3) sentinel <span class="hljs-builtin-name">remove</span> <br><br>删除master节点，sentinel不再监控该节点。<br></code></pre></div></td></tr></table></figure><h4 id="redis安装"><a href="#redis安装" class="headerlink" title="redis安装"></a>redis安装</h4><p>此处略去，参考官方文档 <a href="https://redis.io/" target="_blank" rel="noopener">https://redis.io/</a></p><h4 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h4><h5 id="复制功能的运作原理"><a href="#复制功能的运作原理" class="headerlink" title="复制功能的运作原理"></a>复制功能的运作原理</h5><p>无论是初次连接还是重新连接，当建立一个从服务器时，从服务器都将向主服务器发送一个SYNC 命令。<br>接到SYNC 命令的主服务器将开始执行BGSAVE ，并在保存操作执行期间，将所有新执行的写入命令都保<br>存到一个缓冲区里面。<br>当BGSAVE 执行完毕后，主服务器将执行保存操作所得的 .rdb 文件发送给从服务器，从服务器接收这个<br>.rdb 文件，并将文件中的数据载入到内存中。<br>之后主服务器会以 Redis 命令协议的格式，将写命令缓冲区中积累的所有内容都发送给从服务器。</p><p>可用telnet测试</p><figure class="highlight lsl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">#  telnet <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.15</span> <span class="hljs-number">6379</span> <br>Trying <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.15</span>...<br>Connected to <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.15</span>.<br>Escape character is '^]'.<br>sync<br>$<span class="hljs-number">98</span><br>REDIS0007dis-ver3<span class="hljs-number">.2</span><span class="hljs-number">.3</span>edis-bitsctimeYed-mem<br></code></pre></div></td></tr></table></figure><p><a href="http://redis.io/topics/replication" target="_blank" rel="noopener">参考官方文档</a></p><h4 id="1-主备复制"><a href="#1-主备复制" class="headerlink" title="1.主备复制"></a>1.主备复制</h4><p>环境：192.168.0.15为主节点，192.168.0.12-13为从节点</p><p>Master redis的配置<code>redis.conf</code>修改如下配置即可，其他保存默认。</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">master redis 绑定的IP地址<br>bind 192.168.0.15<br>监听的端口，使用默认的 2679<span class="hljs-built_in"><br>port </span>6379<br><span class="hljs-comment"># 以后台进程运行</span><br>daemonize <span class="hljs-literal">yes</span><br><span class="hljs-comment"># 日志输出位置，便查看实验结果</span><br>logfile <span class="hljs-string">"/logfile/var/log/redis/redis.log"</span><br></code></pre></div></td></tr></table></figure><p>Slaveof redis的配置<code>redis.conf</code>#另一节点的slave修改绑定IP即可。</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-comment"># slave redis 绑定的IP地址</span><br>bind 192.168.0.12<br><span class="hljs-comment"># 监听的端口，使用默认的 2679</span><span class="hljs-built_in"><br>port </span>6379<br><span class="hljs-comment"># 以后台进程运行</span><br>daemonize <span class="hljs-literal">yes</span><br><span class="hljs-comment"># 日志输出位置，便查看实验结果</span><br>logfile <span class="hljs-string">"/logfile/var/log/redis/redis.log"</span><br><span class="hljs-comment"># 作为 master redis 的 slave redis</span><br>slaveof 192.168.0.15 6379<br></code></pre></div></td></tr></table></figure><p>修改好配置后，先后启动 master redis 和 slave redis：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">#</span><span class="bash"> redis-server /etc/redis.conf</span><br></code></pre></div></td></tr></table></figure><p>主备复制完成</p><h5 id="2-配置-Sentinel"><a href="#2-配置-Sentinel" class="headerlink" title="2.配置 Sentinel"></a>2.配置 Sentinel</h5><p>Redis 源码中包含了一个名为<code>sentinel.conf</code>的文件， 这个文件是一个带有详细注释的 Sentinel 配置文件示例。</p><p>运行一个 Sentinel 所需的最少配置如下所示：</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-comment"># 绑定的IP地址</span><br>bind 192.168.0.15<br><span class="hljs-comment"># 监听的端口</span><span class="hljs-built_in"><br>port </span>26379<br><span class="hljs-comment"># 监控的 master redis 信息，</span><br><br>sentinel monitor mymaster 192.168.0.15 6379 2<br><span class="hljs-comment"># 判断 master redis 主观下线的时长（subjectively down，简称 SDOWN ），单位为毫秒,如果master在多少秒内无反应哨兵会开始进行master-slave间的切换，使用“选举”机制</span><br>sentinel down-after-milliseconds mymaster 30000<br><span class="hljs-comment">#如果在该时间（ms）内未能完成failover操作，则认为该failover失败</span><br>sentinel failover-timeout mymaster 180000<br>sentinel parallel-syncs mymaster 1<br></code></pre></div></td></tr></table></figure><p>各个选项的功能如下：</p><ul><li><p>sentinel monitor mymaster 192.168.0.15 6379 2</p><p> mymaster是主数据的别名，考虑到故障恢复后主数据库的地址和端口号会发生变化，哨兵提供了命令可以通过别名获取主数据库的地址和端口号。 其中的数字 2 表示判断这个服务器失效，至少需要2 个Sentinel 同意.<br>master redis 只要同意 Sentinel 的数量不达标，自动故障迁移就不会执行,-2该参数用来表示执行故障恢复操作前至少需要几个哨兵节点同意，一般设置为N/2+1(N为哨兵总数).此标记客观下线（objectively down， 简称 ODOWN ）</p></li></ul><ul><li>down-after-milliseconds` 选项指定了 Sentinel 认为服务器已经断线所需的毫秒数。</li></ul><p>如果服务器在给定的毫秒数之内， 没有返回 Sentinel 发送的 <a href="http://redisdoc.com/connection/ping.html#ping" target="_blank" rel="noopener">PING</a> 命令的回复， 或者返回一个错误， 那么 Sentinel 将这个服务器标记为<strong>主观下线</strong>（subjectively down，简称 <code>SDOWN</code> ）。</p><p>不过只有一个 Sentinel 将服务器标记为主观下线并不一定会引起服务器的自动故障迁移： 只有在足够数量的 Sentinel 都将一个服务器标记为主观下线之后， 服务器才会被标记为<strong>客观下线</strong>（objectively down， 简称 <code>ODOWN</code> ）， 这时自动故障迁移才会执行。</p><p>将服务器标记为客观下线所需的 Sentinel 数量由对主服务器的配置决定。</p><ul><li><code>parallel-syncs</code> 选项指定了在执行故障转移时， 最多可以有多少个从服务器同时对新的主服务器进行同步， 这个数字越小， 完成故障转移所需的时间就越长。</li></ul><p>其他节点同上配置，其中只修改本机绑定IP地址</p><figure class="highlight armasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"># 绑定的<span class="hljs-built_in">IP</span>地址<br><span class="hljs-keyword">bind </span><span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">0</span>.$<br></code></pre></div></td></tr></table></figure><p>配置完成，启动</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">$</span><span class="bash"> redis-sentinel redis-sentinel.conf</span><br></code></pre></div></td></tr></table></figure><p>####　常用代码</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">#</span><span class="bash"> 强制杀死redis，模仿宕机</span><br>ps aux |grep redis |awk '&#123;print $2&#125;'|xargs kill -9<br><span class="hljs-meta">#</span><span class="bash"> 优化模拟宕机 【根据Dual-X-raY提示-_-】</span><br><span class="hljs-meta">redis&gt;</span><span class="bash"> DEBUG SEGFAULT</span><br><span class="hljs-meta">#</span><span class="bash"> 重启，指定conf</span><br>/home/work/xxx/bin/redis-server /home/work/xxx/etc/redis.conf<br><span class="hljs-meta">#</span><span class="bash"> 压测，具体参数可以参考benchmark</span><br><span class="hljs-meta">$</span><span class="bash">  ./redis-benchmark -h 127.0.0.1  -p 端口 -a 密码  -c 1000 -n 10000000  -d 1024 -r 100000 -t <span class="hljs-built_in">set</span>,get,incr,del</span><br></code></pre></div></td></tr></table></figure><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>这里直接关闭主数据库，终端输入：</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">redis-cli -<span class="hljs-selector-tag">p</span> <span class="hljs-number">7000</span> shutdown<br></code></pre></div></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-addition">+sdown 表示哨兵主观认为数据库下线</span><br><span class="hljs-addition">+odown 表示哨兵客观认为数据库下线</span><br><span class="hljs-addition">+try-failover 表示哨兵开始进行故障恢复</span><br><span class="hljs-addition">+failover-end 表示哨兵完成故障修复，其中包括了领头哨兵的选举、备选从数据库的选择等等较为复杂的过程</span><br><span class="hljs-addition">+switch-master表示主数据库从51服务器迁移到52服务器</span><br><span class="hljs-addition">+slave列出了新的主数据库的2个从数据库，而哨兵并没有彻底清除51服务器的实力信息，这是因为停止的实例有可能会在将来恢复，哨兵会让其重新加入进来</span><br></code></pre></div></td></tr></table></figure><h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><ul><li><a href="http://blog.nosqlfan.com/html/4166.html" target="_blank" rel="noopener">NoSQL</a></li><li><a href="http://www.cnblogs.com/zhoujinyi/p/5570024.html" target="_blank" rel="noopener">Redis 复制、Sentinel的搭建和原理说明</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git 进阶指南</title>
    <link href="/2017/06/05/Git_advancedguide/"/>
    <url>/2017/06/05/Git_advancedguide/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/GIT/github-for-atom.png" srcset="/img/loading.gif" lazyload alt></p><p>在掌握了基础的 <a href="http://www.cnblogs.com/tugenhua0707/p/4050072.html" target="_blank" rel="noopener">Git 使用</a> 之后，可能会遇到一些问题。以下是猫哥筛选总结的部分常见问题，分享给各位朋友，掌握了这些问题的中的要点之后，git 进阶也就完成了，它包含以下部分：</p><ul><li>如何修改 origin 仓库信息</li><li>如何配置 git ssh keys</li><li>如何撤销修改</li><li>遇到冲突了怎么解决</li><li>git stash / alias / submodule 的使用问题等</li></ul><a id="more"></a><h2 id="问：如何修改-origin-仓库信息？"><a href="#问：如何修改-origin-仓库信息？" class="headerlink" title="问：如何修改 origin 仓库信息？"></a>问：如何修改 origin 仓库信息？</h2><h3 id="1、添加-origin-仓库信息"><a href="#1、添加-origin-仓库信息" class="headerlink" title="1、添加 origin 仓库信息"></a>1、添加 origin 仓库信息</h3><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">git remote <span class="hljs-keyword">add</span><span class="bash"> origin &lt;git仓库地址&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2、查看-origin-仓库信息"><a href="#2、查看-origin-仓库信息" class="headerlink" title="2、查看 origin 仓库信息"></a>2、查看 origin 仓库信息</h3><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-comment"># 以下三种方式均可</span><br>git<span class="hljs-built_in"> config </span><span class="hljs-builtin-name">get</span> --remote.origin.url<br>git remote -v<br>git remote show origin<br></code></pre></div></td></tr></table></figure><h3 id="3、删除-origin-仓库信息"><a href="#3、删除-origin-仓库信息" class="headerlink" title="3、删除 origin 仓库信息"></a>3、删除 origin 仓库信息</h3><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attribute">git remote rm origin</span><br></code></pre></div></td></tr></table></figure><h2 id="问：如何配置-git-ssh-keys-？"><a href="#问：如何配置-git-ssh-keys-？" class="headerlink" title="问：如何配置 git ssh keys ？"></a>问：如何配置 git ssh keys ？</h2><ol><li>在本地生成 ssh 私钥 / 公钥 文件</li><li>将「公钥」添加到 git 服务（github、gitlab、coding.net 等）网站后台</li><li>测试 git ssh 连接是否成功</li></ol><p>接下来以添加 github ssh keys 为例，请注意替换 github 文件名。</p><p>注：如果对密钥机制不熟悉，建议不要指定 -f 参数，直接使用默认的 id_rsa 文件名。</p><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-comment"># 运行以下命令，一直回车，文件名可随意指定</span><br>ssh-keygen -t rsa -b <span class="hljs-number">4096</span> -C <span class="hljs-string">"kaiye@macbook"</span> -f ~<span class="hljs-regexp">/.ssh/github</span><br><br><span class="hljs-comment"># 如果不是默认密钥 id_rsa ，则需要以下命令注册密钥文件，-K 参数将密钥存入 Mac Keychain</span><br>ssh-add -K ~<span class="hljs-regexp">/.ssh/github</span><br><br><span class="hljs-comment"># 将 pub 公钥的内容粘贴到线上网站的后台</span><br>cat ~<span class="hljs-regexp">/.ssh/github</span>.pub<br><br><span class="hljs-comment"># 测试 git ssh 是否连接成功</span><br>ssh -T git<span class="hljs-variable">@github</span>.com<br></code></pre></div></td></tr></table></figure><h2 id="问：如何撤销修改？"><a href="#问：如何撤销修改？" class="headerlink" title="问：如何撤销修改？"></a>问：如何撤销修改？</h2><p>修改包含四种情况，需单独区分。</p><h3 id="1、新建的文件和目录，且从未提交至版本库"><a href="#1、新建的文件和目录，且从未提交至版本库" class="headerlink" title="1、新建的文件和目录，且从未提交至版本库"></a>1、新建的文件和目录，且从未提交至版本库</h3><p>此类文件的状态为 <code>Untracked files</code> ，撤销方法如下：</p><figure class="highlight erlang"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">git clean -fd .<br></code></pre></div></td></tr></table></figure><p>其中，<code>.</code> 表示当前目录及所有子目录中的文件，也可以直接指定对应的文件路径，以下其他情况类似。</p><h3 id="2、提交过版本库，但未提交至暂存区的文件（未执行-git-add）"><a href="#2、提交过版本库，但未提交至暂存区的文件（未执行-git-add）" class="headerlink" title="2、提交过版本库，但未提交至暂存区的文件（未执行 git add）"></a>2、提交过版本库，但未提交至暂存区的文件（未执行 git add）</h3><p>此类文件的状态为 <code>Changes not staged for commit</code>，撤销方法：</p><figure class="highlight erlang"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">git checkout .<br></code></pre></div></td></tr></table></figure><h3 id="3、已提交至暂存区的文件"><a href="#3、已提交至暂存区的文件" class="headerlink" title="3、已提交至暂存区的文件"></a>3、已提交至暂存区的文件</h3><p>此类文件的状态为 <code>Changes to be committed</code>，撤销方法：</p><figure class="highlight erlang"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">git reset .<br></code></pre></div></td></tr></table></figure><p>执行之后文件将会回到以上的 1 或者 2 状态，可继续按以上步骤执行撤销，若 git reset 同时加上 <code>--hard</code>参数，将会把修改过的文件也还原成版本库中的版本。</p><h3 id="4、已提交至版本库（执行了-git-commit）"><a href="#4、已提交至版本库（执行了-git-commit）" class="headerlink" title="4、已提交至版本库（执行了 git commit）"></a>4、已提交至版本库（执行了 git commit）</h3><p>每次提交都会生成一个 hash 版本号，通过以下命令可查阅版本号并将其回滚：</p><figure class="highlight maxima"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">git <span class="hljs-built_in">log</span><br>git <span class="hljs-built_in">reset</span> &lt;版本号&gt;<br></code></pre></div></td></tr></table></figure><p>如果需要「回滚至上一次提交」，可直接使用以下命令：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">git <span class="hljs-keyword">reset</span> <span class="hljs-keyword">head</span>~<span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p>执行之后，再按照 1 或者 2 状态进行处理即可，如果回滚之后的代码同时需要提交至 origin 仓库（即回滚 origin 线上仓库的代码），需要使用 <code>-f</code> 强制提交参数，且当前用户需要具备「强制提交的权限」。</p><h3 id="5、如果回滚了之后又不想回滚了怎么办？"><a href="#5、如果回滚了之后又不想回滚了怎么办？" class="headerlink" title="5、如果回滚了之后又不想回滚了怎么办？"></a>5、如果回滚了之后又不想回滚了怎么办？</h3><p>如果是以上的情况 1 或者 2，只能歇屁了，因为修改没入过版本库，无法回滚。</p><p>如果是情况 4，回滚之后通过 git log 将看不到回滚之前的版本号，但可通过 <code>git reflog</code> 命令（所有使用过的版本号）找到回滚之前的版本号，然后 <code>git reset &lt;版本号&gt;</code> 。</p><h2 id="问：遇到冲突了怎么解决？"><a href="#问：遇到冲突了怎么解决？" class="headerlink" title="问：遇到冲突了怎么解决？"></a>问：遇到冲突了怎么解决？</h2><p>两个分支进行合并时（通常是 git pull 时），可能会遇到冲突，同时被修改的文件会进入 <code>Unmerged</code> 状态，需要解决冲突。</p><h3 id="1、最快的办法"><a href="#1、最快的办法" class="headerlink" title="1、最快的办法"></a>1、最快的办法</h3><p>大部分时候，「最快解决冲突」的办法是：使用当前 HEAD 的版本（ours），或使用合并进来的分支版本（theirs）。</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta"># 使用当前分支 HEAD 版本，通常是冲突源文件的 &lt;&lt;&lt;&lt;&lt;&lt;&lt; 标记部分，======= 的上方</span><br>git checkout --ours <span class="hljs-params">&lt;文件名&gt;</span><br><br><span class="hljs-meta"># 使用合并分支版本，通常是源冲突文件的 &gt;&gt;&gt;&gt;&gt;&gt;&gt; 标记部分</span><br>git checkout --theirs <span class="hljs-params">&lt;文件名&gt;</span><br><br><span class="hljs-meta"># 标记为解决状态加入暂存区</span><br>git add <span class="hljs-params">&lt;文件名&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="2、最通用的办法"><a href="#2、最通用的办法" class="headerlink" title="2、最通用的办法"></a>2、最通用的办法</h3><p>用编辑器打开冲突的源文件进行修改，可能会发生遗留，且体验不好，通常需要借助 git mergetool 命令。</p><p>在 Mac 系统下，运行 <code>git mergetool &lt;文件名&gt;</code> 可以开启配置的第三方工具进行 merge，默认的是 FileMerge 应用程序，还可以配置成 <a href="http://www.gitguys.com/topics/merging-with-a-gui/" target="_blank" rel="noopener">Meld 或 kdiff3</a>，体验更佳。</p><h3 id="3、最好的习惯"><a href="#3、最好的习惯" class="headerlink" title="3、最好的习惯"></a>3、最好的习惯</h3><p>有三个好的习惯，可以减少代码的冲突：</p><ul><li>在开始修改代码前先 <code>git pull</code> 一下；</li><li>将业务代码进行划分，尽量不要多个人在同一时间段修改同一文件；</li><li>通过 <a href="http://www.ituring.com.cn/article/56870" target="_blank" rel="noopener">Gitflow 工作流</a> 也可以提升 git 流程效率，减少发生冲突的可能性。</li></ul><h3 id="4、最复杂的情况"><a href="#4、最复杂的情况" class="headerlink" title="4、最复杂的情况"></a>4、最复杂的情况</h3><p>如果你的项目周期比较长，还应该养成「定期 rebase 的习惯」，<code>git pull --rebase</code>可以让分支的代码和 origin 仓库的代码保持兼容，同时还不会破坏线上代码的可靠性。</p><p>它的大概原理是，先将 origin 仓库的代码按 origin 的时间流在本地分支中提交，再将本地分支的修改记录追加到 origin 分支上。如果发生冲突，则可以即时的发现问题并解决，否则到项目上线时再解决冲突，可能会发生额外的风险。</p><p>rebase 大概的操作步骤如下：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">#</span><span class="bash"> 将当前分支的版本追加到从远程 pull 回来的节点之后</span><br>git pull --rebase<br><span class="hljs-meta"><br>#</span><span class="bash"> 若发生冲突，则按以上其他方法进行解决，解决后继续</span><br>git rebase --continue<br><span class="hljs-meta"><br>#</span><span class="bash"> 直到所有冲突得以解决，待项目最后上线前再执行</span><br>git push origin<br><span class="hljs-meta"><br>#</span><span class="bash"> 若多次提交修改了同一文件，可能需要直接跳过后续提交，按提示操作即可</span><br>git rebase --skip<br></code></pre></div></td></tr></table></figure><h2 id="问：如何在不提交修改的前提下，执行-pull-merge-等操作？"><a href="#问：如何在不提交修改的前提下，执行-pull-merge-等操作？" class="headerlink" title="问：如何在不提交修改的前提下，执行 pull / merge 等操作？"></a>问：如何在不提交修改的前提下，执行 pull / merge 等操作？</h2><p>有些修改没有完全完成之前，可能不需要提交到版本库，圡方法是将修改的文件 copy 到 git 仓库之外的目录临时存放，pull / merge 操作完成之后，再 copy 回来。</p><p>这样的做法一个是效率不高，另外一个可能会遗漏潜在的冲突。此类需求最好是通过 <code>git stash</code> 命令来完成，它可以将当前工作状态（WIP，work in progress）临时存放在 stash 队列中，待操作完成后再从 stash 队列中重新应用这些修改。</p><p>以下是 git stash 常用命令：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">#</span><span class="bash"> 查看 stash 队列中已暂存了多少 WIP</span><br>git stash list<br><span class="hljs-meta"><br>#</span><span class="bash"> 恢复上一次的 WIP 状态，并从队列中移除</span><br>git stash pop<br><span class="hljs-meta"><br>#</span><span class="bash"> 添加当前 WIP，注意：未提交到版本库的文件会自动忽略，只要不运行 git clean -fd . 就不会丢失</span><br>git stash<br><span class="hljs-meta"><br>#</span><span class="bash"> 恢复指定编号的 WIP，同时从队列中移除</span><br>git stash pop stash@&#123;num&#125;<br><span class="hljs-meta"><br>#</span><span class="bash"> 恢复指定编号的 WIP，但不从队列中移除</span><br>git stash apply stash@&#123;num&#125;<br></code></pre></div></td></tr></table></figure><h2 id="问：如何在-git-log-中查看修改的文件列表？"><a href="#问：如何在-git-log-中查看修改的文件列表？" class="headerlink" title="问：如何在 git log 中查看修改的文件列表？"></a>问：如何在 git log 中查看修改的文件列表？</h2><p>默认的 git log 会显示较全的信息，且不包含文件列表。使用 <code>--name-status</code> 可以看到修改的文件列表，使用 <code>--oneline</code> 可以将参数简化成一行。</p><figure class="highlight fortran"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">git <span class="hljs-built_in">log</span> --<span class="hljs-keyword">name</span>-<span class="hljs-keyword">status</span> --oneline<br></code></pre></div></td></tr></table></figure><p>每次手动加上参数很麻烦，可以通过自定义快捷命令的方式来简化操作：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">git config <span class="hljs-params">--global</span> <span class="hljs-keyword">alias</span>.<span class="hljs-keyword">ls</span> 'log <span class="hljs-params">--name-status</span> <span class="hljs-params">--oneline</span> <span class="hljs-params">--graph</span>'<br></code></pre></div></td></tr></table></figure><p>运行以上配置后，可通过 <code>git ls</code> 命令来实现「自定义 git log」效果，通过该方法也可以创建 <code>git st</code> 、<code>git ci</code> 等一系列命令，以便沿用 svn 命令行习惯。</p><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">git config --<span class="hljs-keyword">global</span> <span class="hljs-keyword">alias</span>.st <span class="hljs-string">'status --porcelain'</span><br></code></pre></div></td></tr></table></figure><p>更多 git log 参数，可通过 <code>git help log</code> 查看手册。</p><p>如果是看上一次提交的版本日志，直接运行 <code>git show</code> 即可。</p><h2 id="问：git-submodule-update-时出错怎么解决？"><a href="#问：git-submodule-update-时出错怎么解决？" class="headerlink" title="问：git submodule update 时出错怎么解决？"></a>问：git submodule update 时出错怎么解决？</h2><p>例如，在执行 git submodule update 时有以下错误信息：</p><figure class="highlight oxygene"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">fatal: <span class="hljs-keyword">reference</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> a tree: f869da471c5d8a185cd110bbe4842d6757b002f5<br>Unable <span class="hljs-keyword">to</span> checkout <span class="hljs-string">'f869da471c5d8a185cd110bbe4842d6757b002f5'</span> <span class="hljs-keyword">in</span> submodule path <span class="hljs-string">'source/i18n-php-server'</span><br></code></pre></div></td></tr></table></figure><p>在此例中，发生以上错误是因为 i18n-php-server 子仓库在某电脑 A 的「本地」commit 了新的版本 「f869da471c5d8a185cd110bbe4842d6757b002f5」，且该次 commit 未 push origin。但其父级仓库 i18n-www 中引用了该子仓库的版本号，且将引用记录 push origin，导致其他客户机无法 update 。</p><p>解决方法，在电脑 A 上将 i18n-php-server 版本库 push origin 后，在其他客户机上执行 git submodule update 。或者用以上提到的 git reset 方法，将子仓库的引用版本号还原成 origin 上存在的最新版本号。</p><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><ul><li>设置本地分支与远程分支保持同步，在第一次 git push 的时候带上</li></ul>  <figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-deletion">-u</span><br></code></pre></div></td></tr></table></figure><p>  参数即可</p>  <figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">git push origin <span class="hljs-keyword">master</span> <span class="hljs-title">-u</span><br></code></pre></div></td></tr></table></figure><ul><li><p>支持中文目录与文件名的显示（git 默认将非 ASCII 编码的目录与文件名以八进制编码展示）</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">git<span class="hljs-built_in"> config </span>core.quotepath off<br></code></pre></div></td></tr></table></figure></li><li><p>常用的打 tag 操作，更多请查看《</p><p>Git 基础 – 打标签</p><p>》</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-comment"># 列出所有本地 tag</span><br>git <span class="hljs-keyword">tag</span>   <br><br><span class="hljs-title"># 本地新增一个 tag</span>，推送至 origin 服务器<br>git <span class="hljs-keyword">tag</span> <span class="hljs-title">-a</span> v1.<span class="hljs-number">0.0</span> -m '<span class="hljs-keyword">tag</span> <span class="hljs-title">description</span>'<br>git push origin v1.<span class="hljs-number">0.0</span><br><br><span class="hljs-comment"># 删除本地与 origin tag</span><br>git <span class="hljs-keyword">tag</span> <span class="hljs-title">-d</span> v1.<span class="hljs-number">0.0</span><br>git push origin --delete v1.<span class="hljs-number">0.0</span><br></code></pre></div></td></tr></table></figure></li><li><p>使用 git GUI 客户端（如，</p><p>SoureTree</p><p>、</p><p>Github Desktop</p><p>）能极大的提升分支管理效率。分支合并操作通常只有两种情况：从 origin merge 到本地，使用</p></li></ul>  <figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attribute">git pull</span><br></code></pre></div></td></tr></table></figure><p>  即可；从另外一个本地分支 merge 到当前分支，使用</p>  <figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">git merge <span class="hljs-tag">&lt;<span class="hljs-name">分支名</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>  ，以下是常用命令：</p>  <figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-comment"># 新建分支 branch1，并切换过去</span><br>git checkout -<span class="hljs-keyword">b </span><span class="hljs-keyword">branch1<br></span><br><span class="hljs-comment"># 查看所有本地与远程分支</span><br>git <span class="hljs-keyword">branch </span>-a<br><br><span class="hljs-comment"># 修改完成后，切换回 master 分支，将 branch1 分支合并进来</span><br>git checkout master<br>git merge <span class="hljs-keyword">branch1<br></span><br><span class="hljs-comment"># 删除已完成合并的分支 branch1</span><br>git <span class="hljs-keyword">branch </span>-d <span class="hljs-keyword">branch1</span><br></code></pre></div></td></tr></table></figure><p>如有其他问题，请在 <a href="https://github.com/kaiye/kaiye.github.com/issues/7" target="_blank" rel="noopener">github</a> 上留言补充 ：）</p><p>via：<a href="https://github.com/kaiye/kaiye.github.com/issues/7" target="_blank" rel="noopener">github.com</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git常用指令</title>
    <link href="/2017/06/03/Git_bash/"/>
    <url>/2017/06/03/Git_bash/</url>
    
    <content type="html"><![CDATA[<p>下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。</p><p><img src="/images/GIT/gitwork.png" srcset="/img/loading.gif" lazyload alt></p><ul><li>Workspace：工作区</li><li>Index / Stage：暂存区</li><li>Repository：仓库区（或本地仓库）</li><li>Remote：远程仓库<a id="more"></a><h3 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">#</span><span class="bash"> 在当前目录新建一个Git代码库</span><br><span class="hljs-meta">$</span><span class="bash"> git init</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 新建一个目录，将其初始化为Git代码库</span><br><span class="hljs-meta">$</span><span class="bash"> git init [project-name]</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 下载一个项目和它的整个代码历史</span><br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">clone</span> [url]</span><br></code></pre></div></td></tr></table></figure></li></ul><h3 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h3><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。<br><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-comment"># 显示当前的Git配置</span><br>$ git<span class="hljs-built_in"> config </span>--list<br><br> # 编辑Git配置文件<br>$ git<span class="hljs-built_in"> config </span>-e [--global]<br><br><span class="hljs-comment"># 设置提交代码时的用户信息</span><br>$ git<span class="hljs-built_in"> config </span>[--global] user.name <span class="hljs-string">"[name]"</span><br>$ git<span class="hljs-built_in"> config </span>[--global] user.email <span class="hljs-string">"[email address]"</span><br></code></pre></div></td></tr></table></figure></p><h3 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加/删除文件"></a>三、增加/删除文件</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">#</span><span class="bash"> 添加指定文件到暂存区</span><br><span class="hljs-meta">$</span><span class="bash"> git add [file1] [file2] ...</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 添加指定目录到暂存区，包括子目录</span><br><span class="hljs-meta">$</span><span class="bash"> git add [dir]</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 添加当前目录的所有文件到暂存区</span><br><span class="hljs-meta">$</span><span class="bash"> git add .</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 删除工作区文件，并且将这次删除放入暂存区</span><br><span class="hljs-meta">$</span><span class="bash"> git rm [file1] [file2] ...</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 停止追踪指定文件，但该文件会保留在工作区</span><br><span class="hljs-meta">$</span><span class="bash"> git rm --cached [file]</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 改名文件，并且将这个改名放入暂存区</span><br><span class="hljs-meta">$</span><span class="bash"> git mv [file-original] [file-renamed]</span><br></code></pre></div></td></tr></table></figure><h3 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">#</span><span class="bash"> 提交暂存区到仓库区</span><br><span class="hljs-meta">$</span><span class="bash"> git commit -m [message]</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 提交暂存区的指定文件到仓库区</span><br><span class="hljs-meta">$</span><span class="bash"> git commit [file1] [file2] ... -m [message]</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class="hljs-meta">$</span><span class="bash"> git commit -a</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 提交时显示所有diff信息</span><br><span class="hljs-meta">$</span><span class="bash"> git commit -v</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 使用一次新的commit，替代上一次提交</span><br><span class="hljs-meta">#</span><span class="bash"> 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class="hljs-meta">$</span><span class="bash"> git commit --amend -m [message]</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 重做上一次commit，并包括指定文件的新变化</span><br><span class="hljs-meta">$</span><span class="bash"> git commit --amend [file1] [file2] ...</span><br></code></pre></div></td></tr></table></figure><h3 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">#</span><span class="bash"> 列出所有本地分支</span><br><span class="hljs-meta">$</span><span class="bash"> git branch</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 列出所有远程分支</span><br><span class="hljs-meta">$</span><span class="bash"> git branch -r</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 列出所有本地分支和远程分支</span><br><span class="hljs-meta">$</span><span class="bash"> git branch -a</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 新建一个分支，但依然停留在当前分支</span><br><span class="hljs-meta">$</span><span class="bash"> git branch [branch-name]</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 新建一个分支，并切换到该分支</span><br><span class="hljs-meta">$</span><span class="bash"> git checkout -b [branch]</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 新建一个分支，指向指定commit</span><br><span class="hljs-meta">$</span><span class="bash"> git branch [branch] [commit]</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 新建一个分支，与指定的远程分支建立追踪关系</span><br><span class="hljs-meta">$</span><span class="bash"> git branch --track [branch] [remote-branch]</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 切换到指定分支，并更新工作区</span><br><span class="hljs-meta">$</span><span class="bash"> git checkout [branch-name]</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class="hljs-meta">$</span><span class="bash"> git branch --<span class="hljs-built_in">set</span>-upstream [branch] [remote-branch]</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 合并指定分支到当前分支</span><br><span class="hljs-meta">$</span><span class="bash"> git merge [branch]</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 选择一个commit，合并进当前分支</span><br><span class="hljs-meta">$</span><span class="bash"> git cherry-pick [commit]</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 删除分支</span><br><span class="hljs-meta">$</span><span class="bash"> git branch -d [branch-name]</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 删除远程分支</span><br><span class="hljs-meta">$</span><span class="bash"> git push origin --delete [branch-name]</span><br><span class="hljs-meta">$</span><span class="bash"> git branch -dr [remote/branch]</span><br></code></pre></div></td></tr></table></figure><h3 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">#</span><span class="bash"> 列出所有tag</span><br><span class="hljs-meta">$</span><span class="bash"> git tag</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 新建一个tag在当前commit</span><br><span class="hljs-meta">$</span><span class="bash"> git tag [tag]</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 新建一个tag在指定commit</span><br><span class="hljs-meta">$</span><span class="bash"> git tag [tag] [commit]</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 查看tag信息</span><br><span class="hljs-meta">$</span><span class="bash"> git show [tag]</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 提交指定tag</span><br><span class="hljs-meta">$</span><span class="bash"> git push [remote] [tag]</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 提交所有tag</span><br><span class="hljs-meta">$</span><span class="bash"> git push [remote] --tags</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 新建一个分支，指向某个tag</span><br><span class="hljs-meta">$</span><span class="bash"> git checkout -b [branch] [tag]</span><br></code></pre></div></td></tr></table></figure><h3 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">#</span><span class="bash"> 显示有变更的文件</span><br><span class="hljs-meta">$</span><span class="bash"> git status</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 显示当前分支的版本历史</span><br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span></span><br><span class="hljs-meta"><br>#</span><span class="bash"> 显示commit历史，以及每次commit发生变更的文件</span><br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --<span class="hljs-built_in">stat</span></span><br><span class="hljs-meta"><br>#</span><span class="bash"> 显示某个文件的版本历史，包括文件改名</span><br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --follow [file]</span><br><span class="hljs-meta">$</span><span class="bash"> git whatchanged [file]</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 显示指定文件相关的每一次diff</span><br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> -p [file]</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 显示指定文件是什么人在什么时间修改过</span><br><span class="hljs-meta">$</span><span class="bash"> git blame [file]</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 显示暂存区和工作区的差异</span><br><span class="hljs-meta">$</span><span class="bash"> git diff</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 显示暂存区和上一个commit的差异</span><br><span class="hljs-meta">$</span><span class="bash"> git diff --cached [file]</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 显示工作区与当前分支最新commit之间的差异</span><br><span class="hljs-meta">$</span><span class="bash"> git diff HEAD</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 显示两次提交之间的差异</span><br><span class="hljs-meta">$</span><span class="bash"> git diff [first-branch]...[second-branch]</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 显示某次提交的元数据和内容变化</span><br><span class="hljs-meta">$</span><span class="bash"> git show [commit]</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 显示某次提交发生变化的文件</span><br><span class="hljs-meta">$</span><span class="bash"> git show --name-only [commit]</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 显示某次提交时，某个文件的内容</span><br><span class="hljs-meta">$</span><span class="bash"> git show [commit]:[filename]</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 显示当前分支的最近几次提交</span><br><span class="hljs-meta">$</span><span class="bash"> git reflog</span><br></code></pre></div></td></tr></table></figure><h3 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">#</span><span class="bash"> 下载远程仓库的所有变动</span><br><span class="hljs-meta">$</span><span class="bash"> git fetch [remote]</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 显示所有远程仓库</span><br><span class="hljs-meta">$</span><span class="bash"> git remote -v</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 显示某个远程仓库的信息</span><br><span class="hljs-meta">$</span><span class="bash"> git remote show [remote]</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 增加一个新的远程仓库，并命名</span><br><span class="hljs-meta">$</span><span class="bash"> git remote add [shortname] [url]</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 取回远程仓库的变化，并与本地分支合并</span><br><span class="hljs-meta">$</span><span class="bash"> git pull [remote] [branch]</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 上传本地指定分支到远程仓库</span><br><span class="hljs-meta">$</span><span class="bash"> git push [remote] [branch]</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 强行推送当前分支到远程仓库，即使有冲突</span><br><span class="hljs-meta">$</span><span class="bash"> git push [remote] --force</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 推送所有分支到远程仓库</span><br><span class="hljs-meta">$</span><span class="bash"> git push [remote] --all</span><br></code></pre></div></td></tr></table></figure><h3 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">#</span><span class="bash"> 恢复暂存区的指定文件到工作区</span><br><span class="hljs-meta">$</span><span class="bash"> git checkout [file]</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 恢复某个commit的指定文件到工作区</span><br><span class="hljs-meta">$</span><span class="bash"> git checkout [commit] [file]</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 恢复上一个commit的所有文件到工作区</span><br><span class="hljs-meta">$</span><span class="bash"> git checkout .</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><br><span class="hljs-meta">$</span><span class="bash"> git reset [file]</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 重置暂存区与工作区，与上一次commit保持一致</span><br><span class="hljs-meta">$</span><span class="bash"> git reset --hard</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br><span class="hljs-meta">$</span><span class="bash"> git reset [commit]</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><br><span class="hljs-meta">$</span><span class="bash"> git reset --hard [commit]</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><br><span class="hljs-meta">$</span><span class="bash"> git reset --keep [commit]</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 新建一个commit，用来撤销指定commit</span><br><span class="hljs-meta">#</span><span class="bash"> 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br><span class="hljs-meta">$</span><span class="bash"> git revert [commit]</span><br></code></pre></div></td></tr></table></figure><h3 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">#</span><span class="bash"> 生成一个可供发布的压缩包</span><br><span class="hljs-meta">$</span><span class="bash"> git archive</span><br></code></pre></div></td></tr></table></figure><ul><li><p>忽略</p><figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">在工程根目录下建立.gitignore文件，将要排除的文件或目录 写到.gitignore这个文件中，其中有两种写入方法：<br><span class="hljs-section">一：<br>==================</span><br>单独项目<br>1. echo "<span class="hljs-strong">*.pyc" &gt; .gitignore # 例 排除以 .pyc 结尾的文件名<br>2. vim .gitignore <br>   *</span>~<br><span class="hljs-code">  .DS_Store</span><br><span class="hljs-code">  .idea</span><br><span class="hljs-code">  .venv</span><br><span class="hljs-code">  </span><br><br>===================<br><br>二：<br>全局设置排除文件：<br># git config --global core.excludesfile ~/.gitignore<br># vim .gitconfig<br>会有如下字段配置路径<br>[core]<br>excludesfile = /Users/toorl/.gitignore_global<br>设置完成，重复方法一，设置排除路径。<br><br>===================<br><br>三：<br>单独工程设置排除文件。找到路径下 .git/info/exclude 。vim 编辑即可。<br></code></pre></div></td></tr></table></figure></li></ul><p>（完）</p><p><a href="https://github.com/kinzun/kinzun.github.io/blob/master/images/GIT/GIT%E5%AD%A6%E4%B9%A0%E8%84%91%E5%9B%BE.jpg" target="_blank" rel="noopener">Git思维导图</a></p><p>via：<a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">ruanyifeng.com</a></p><p><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="noopener">git - 简明指南</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ansible总结</title>
    <link href="/2017/05/27/ansibleo/"/>
    <url>/2017/05/27/ansibleo/</url>
    
    <content type="html"><![CDATA[<h4 id="安装目录"><a href="#安装目录" class="headerlink" title="安装目录"></a>安装目录</h4><p><img src="images/ansible/config.png" srcset="/img/loading.gif" lazyload alt></p><h4 id="ansible工作原理图"><a href="#ansible工作原理图" class="headerlink" title="ansible工作原理图"></a>ansible工作原理图</h4><p><img src="/images/ansible/ansibleyuanli.png" srcset="/img/loading.gif" lazyload alt></p><p>####ansible重要组成部分</p><ul><li>ANSIBLE PLAYBOOKS ： 任 务 剧 本 （ 任 务 集 ） ， 编 排 定 义Ansible 任 务 集 的 配 置 文 件 ， 由 Ansible 顺 序 依 次 执 行 ， 通 常 是JSON 格 式 的 YML 文 件 </li><li>INVENTORY ： Ansible 管 理 主 机 的 清 单 ；</li><li>MODULES ： Ansible 执 行 命 令 的 功 能 模 块 ， 多 数 为 内 置 的 核心 模 块 ， 也 可 自 定 义 ；</li><li>PLUGINS ： 模 块 功 能 的 补 充 ， 如 连 接 类 型 插 件 、 循 环 插 件 、变 量 插 件 、 过 滤 插 件 等 ， 该 功 能 不 常 用 。</li><li>API ： 供 第 三 方 程 序 调 用 的 应 用 程 序 编 程 接 口 ；</li><li>ANSIBLE ： 该 部 分 图 中 表 示 的 不 明 显 ， 组 合 INVENTORY 、API 、 MODULES 、 PLUGINS 的 绿 框 大</li></ul><h4 id="Ansible-组-件-调-用-关"><a href="#Ansible-组-件-调-用-关" class="headerlink" title="Ansible 组 件 调 用 关"></a>Ansible 组 件 调 用 关</h4><p><img src="/images/ansible/ansiblediaoyong.png" srcset="/img/loading.gif" lazyload alt></p><h4 id="ansible配置文件ansible-cfg常用配置项"><a href="#ansible配置文件ansible-cfg常用配置项" class="headerlink" title="ansible配置文件ansible.cfg常用配置项"></a>ansible配置文件ansible.cfg常用配置项</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">1）inventory<br>该参数表示资源清单inventory文件的位置，资源清单就是一些Ansible需要连接管理的主机列表 <br>inventory = /root/ansible/hosts<br><br>2）library<br>Ansible的操作动作，无论是本地或远程，都使用一小段代码来执行，这小段代码称为模块，这个library参数就是指向存放Ansible模块的目录 <br>library = /usr/share/ansible<br><br>3）forks<br>设置默认情况下Ansible最多能有多少个进程同时工作，默认设置最多5个进程并行处理。具体需要设置多少个，可以根据控制主机的性能和被管理节点的数量来确定。 <br>forks = 5<br><br>4）sudo_user<br>这是设置默认执行命令的用户，也可以在playbook中重新设置这个参数 <br>sudo_user = root<br>//注意:新版本已经作了修改，如ansible2.4.1下已经为：<br>default_sudo_user = root<br><br>5）remote_port<br>这是指定连接被关节点的管理端口，默认是22，除非设置了特殊的SSH端口，不然这个参数一般是不需要修改的 <br>remote_port = 22<br><br>6）host_key_checking<br>这是设置是否检查SSH主机的密钥。可以设置为True或False <br>host_key_checking = False<br><br>7）timeout<br>这是设置SSH连接的超时间隔，单位是秒。 <br>timeout = 20<br><br>8）log_path<br>Ansible系统默认是不记录日志的，如果想把Ansible系统的输出记录到人i治稳健中，需要设置log_path来指定一个存储Ansible日志的文件 <br>log_path = /var/log/ansible.log<br><br>另外需要注意，执行Ansible的用户需要有写入日志的权限，模块将会调用被管节点的syslog来记录，口令是不会出现的日志中的<br><br>9）private_key_file<br><br>在使用ssh公钥私钥登录系统时候，使用的密钥路径。<br><br>private_key_file=/path/to/file.pem<br></code></pre></div></td></tr></table></figure><p><a href="http://docs.ansible.com/ansible/latest/intro_configuration.html#private-key-file" target="_blank" rel="noopener">更多参考官方文档</a></p><h4 id="ad-hoc模式使用参数介绍"><a href="#ad-hoc模式使用参数介绍" class="headerlink" title="ad-hoc模式使用参数介绍"></a>ad-hoc模式使用参数介绍</h4><figure class="highlight haml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">-<span class="ruby">v, --verbose：输出更详细的执行过程信息，-vvv可得到所有执行过程信息。<br></span>-<span class="ruby">i PATH, --inventory=PATH：指定inventory信息，默认/etc/ansible/hosts。<br></span>-<span class="ruby">f NUM, --forks=NUM：并发线程数，默认<span class="hljs-number">5</span>个线程。<br></span>-<span class="ruby">-private-key=PRIVATE_KEY_FILE：指定密钥文件。<br></span>-<span class="ruby">m NAME, --<span class="hljs-class"><span class="hljs-keyword">module</span>-<span class="hljs-title">name</span>=<span class="hljs-title">NAME</span>：指定执行使用的模块。</span><br></span>-<span class="ruby">M DIRECTORY, --<span class="hljs-class"><span class="hljs-keyword">module</span>-<span class="hljs-title">path</span>=<span class="hljs-title">DIRECTORY</span>：指定模块存放路径，默认/<span class="hljs-title">usr</span>/<span class="hljs-title">share</span>/<span class="hljs-title">ansible</span>，也可以通过<span class="hljs-title">ANSIBLE_LIBRARY</span>设定默认路径。</span><br></span>-<span class="ruby">a <span class="hljs-string">'ARGUMENTS'</span>, --args=<span class="hljs-string">'ARGUMENTS'</span>：模块参数。-k, --ask-pass SSH：认证密码。<br></span>-<span class="ruby">K, --ask-sudo-pass sudo：用户的密码（—sudo时使用）。<br></span>-<span class="ruby">o, --one-line：标准输出至一行。-s, --sudo：相当于Linux系统下的sudo命令。<br></span>-<span class="ruby">t DIRECTORY, --tree=DIRECTORY：输出信息至DIRECTORY目录下，结果文件以远程主机名命名。<br></span>-<span class="ruby">T SECONDS, --timeout=SECONDS：指定连接远程主机的最大超时，单位是：秒。<br></span>-<span class="ruby">B NUM, --background=NUM：后台执行命令，超NUM秒后kill正在执行的任务。<br></span>-<span class="ruby">P NUM, --poll=NUM：定期返回后台任务进度。<br></span>-<span class="ruby">u USERNAME, --user=USERNAME：指定远程主机以USERNAME运行命令。<br></span>-<span class="ruby">U SUDO_USERNAME, --sudo-user=SUDO_USERNAM：E使用sudo，相当于Linux下的sudo命令。<br></span>-<span class="ruby">c CONNECTION, --connection=CONNECTION：指定连接方式，可用选项paramiko (SSH), ssh, local。<br></span>Local方式常用于crontab 和 kickstarts。-l SUBSET, --limit=SUBSET：指定运行主机。<br>-<span class="ruby">l ~REGEX, --limit=~REGEX：指定运行主机（正则）。<br></span>-<span class="ruby">-list-hosts：列出符合条件的主机列表，不执行任何其他命令</span><br></code></pre></div></td></tr></table></figure><h4 id="ad-hoc模块常用模块"><a href="#ad-hoc模块常用模块" class="headerlink" title="ad-hoc模块常用模块"></a>ad-hoc模块常用模块</h4><p><img src="http://oq5o9vwna.bkt.clouddn.com/ansiblemodules0.png" srcset="/img/loading.gif" lazyload alt="modules1"></p><p><img src="http://oq5o9vwna.bkt.clouddn.com/ansiblemodules1.png" srcset="/img/loading.gif" lazyload alt="modules1"></p><p>ansible-doc -l #全部可用模块</p><ul><li><p>具体用法</p><p>ansible-doc models #模块使用文档</p></li></ul><h4 id="ansible中普通用户执行sudo"><a href="#ansible中普通用户执行sudo" class="headerlink" title="ansible中普通用户执行sudo"></a>ansible中普通用户执行sudo</h4><ul><li><p>示 例// 以 mantou 用 户 执 行 ping 存 活 检 测</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ansible all -m ping -u mantou<br></code></pre></div></td></tr></table></figure></li><li><p>以 mantou sudo 至 root 执 行 ping 存 活 检 测</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ansible all -m ping -u mantou --sudo<br></code></pre></div></td></tr></table></figure><p>以 mantou sudo 至 batman 用 户 执 行 ping 存 活 检 测ansible all -m ping -u mantou –sudo –sudo-user </p></li></ul><p>batman但 在 新 版 本 中 Ansible <code>sudo</code> 命 令 废 弃 改 –become 或 -b ，如 上 命 令 需 改 为 如 下 ：</p><ul><li><p>以 mantou sudo 至 root 执 行 ping 存 活 检 测</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ansible all -m ping -u mantou -b<br></code></pre></div></td></tr></table></figure></li><li><p>以 mantou sudo 至 netash用 户 执 行 ping 存 活 检 测</p></li><li><p>​</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ansible all -m ping -u mantou -b --become-user netash<br></code></pre></div></td></tr></table></figure></li></ul><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">-u REMOTE_USER, --user=REMOTE_USER <br>＃ ssh 连接的用户名 <br>-k, --ask-pass ＃ssh登录认证密码 <br>-s, --sudo ＃sudo 到root用户，相当于Linux系统下的sudo命令 <br>-U SUDO_USER, --sudo-user=SUDO_USER ＃sudo 到对应的用户 <br>-K, --ask-sudo-pass ＃用户的密码（—sudo时使用）<br>-T TIMEOUT, --timeout=TIMEOUT ＃ ssh 连接超时，默认 10 秒<br>-C, --check ＃ 指定该参数后，执行 playbook 文件不会真正去执行，而是模拟执行一遍，然后输出本次执行会对远程主机造成的修改<br>-e EXTRA_VARS, --extra-vars=EXTRA_VARS ＃ 设置额外的变量如：key=value 形式 或者 YAML or JSON，以空格分隔变量，或用多个-e <br>-f FORKS, --forks=FORKS ＃ 进程并发处理，默认 5<br>-i INVENTORY, --inventory-file=INVENTORY <br>＃ 指定 hosts 文件路径，默认 default=/etc/ansible/hosts<br>-l SUBSET, --limit=SUBSET<br>＃ 指定一个 pattern，对- hosts:匹配到的主机再过滤一次 <br>--list-hosts <br>＃ 只打印有哪些主机会执行这个 playbook 文件，不是实际执行该 playbook <br>--list-tasks <br>＃ 列出该 playbook 中会被执行的 task <br>--private-key=PRIVATE_KEY_FILE <br>＃ 私钥路径 --step ＃ 同一时间只执行一个 task，每个 task 执行前都会提示确认一遍 --syntax-check ＃ 只检测 playbook 文件语法是否有问题，不会执行该 playbook <br>-t TAGS, --tags=TAGS <br>＃当 play 和 task 的 tag 为该参数指定的值时才执行，多个 tag 以逗号分隔 <br>--skip-tags=SKIP_TAGS <br>＃ 当 play 和 task 的 tag 不匹配该参数指定的值时，才执行 <br>-v, --verbose <br>＃输出更详细的执行过程信息，-vvv可得到所有执行过程信息。<br></code></pre></div></td></tr></table></figure><h5 id="ansible-playbook"><a href="#ansible-playbook" class="headerlink" title="ansible playbook"></a>ansible playbook</h5><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">---<br>- hosts: 192.168.10.10<br>  remote_user: root<br>  vars:<br>   touch_file: test.file<br>  tasks:<br>   - name: touch file<br>     shell: "touch /tmp/&#123;&#123; touch_file &#125;&#125;"<br></code></pre></div></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">vintour<br><br><span class="hljs-section">web:vars</span><br><br>touch_file=je<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">---<br>- hosts: 192.168.10.10<br>  remote_user: root<br><span class="hljs-meta">  #</span><span class="bash">vars:</span><br><span class="hljs-meta">   #</span><span class="bash">touch_file: test.file</span><br>  tasks:<br>   - name: get date<br>     command: date<br>     register: date_output<br>   - name: touch file<br>     shell: "touch /tmp/datefile"<br>   - name: echo date_ouput<br>     shell: "echo &#123;&#123; date_output &#125;&#125; &gt;&gt; /tmp/datefile "<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">- hosts : 192.168.10.10,192.168.10.12<br>  remote_user : root<br>  tasks :<br>  - name : "touch flag file"<br>    command : "touch /tmp/this_is_&#123;&#123;ansible_distribution&#125;&#125;_system"<br>    when: (ansible_distribution == "CentOS" )<br>~<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ansible</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tomcat memcache sticky sessions</title>
    <link href="/2017/05/20/tomcat/"/>
    <url>/2017/05/20/tomcat/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是tomcat？"><a href="#什么是tomcat？" class="headerlink" title="什么是tomcat？"></a>什么是tomcat？</h2><p>Apache Tomcat 是由<a href="http://www.apache.org/" target="_blank" rel="noopener">Apache</a> 软件基金会 开发的开源web服务器和servlet容器。它实现了Java Servlet，JavaServer页面（JSP），Java的统一表达式语言，以及Sun Microsystems的Java的WebSocket规范，并提供了一个运行java代码的web服务器环境。</p><h3 id="Install-and-Config-Java"><a href="#Install-and-Config-Java" class="headerlink" title="Install and Config Java"></a>Install and Config Java</h3><p>Tomcat要求安装在服务器端Java，Java web应用程序代码才可执行<br>利用 yum 安装执行下面命令。</p><ul><li><p><a href="http://openjdk.java.net/" target="_blank" rel="noopener">OpenJDK</a></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> yum install java-1.8.0-openjdk-devel</span><br></code></pre></div></td></tr></table></figure><p>alternatives 在常用用于安装同类软件不同版本</p></li></ul><p>tomcat通过JAVA_HOME变量找jdk安装目录。</p><p>设置JAVA_HOME环境变量<br><a id="more"></a>  </p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><br><span class="hljs-comment"># vim /etc/profile.d/java.sh</span><br><br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">JAVA_HOME</span>=/usr<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$JAVA_HOME</span>/bin:$PATH<br><span class="hljs-comment"># chmod u+x java.sh</span><br></code></pre></div></td></tr></table></figure><ul><li><p><a href="http://www.oracle.com/technetwork/java/javase/overview/index.html" target="_blank" rel="noopener">Oracle JDK</a></p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-comment"># vim /etc/profile.d/java.sh</span><br><br>epport <span class="hljs-attribute">JAVA_HOME</span>=/usr/java/default<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$JAVA_HOME</span>/bin:$PATH<br><span class="hljs-comment"># chmod u+x java.sh</span><br></code></pre></div></td></tr></table></figure></li><li><p>相关阅读</p><ul><li><a href="http://www.oracle.com/technetwork/java/javase/tech/index-jsp-140763.html" target="_blank" rel="noopener">To explain the difference between JDK and JRE</a></li><li><a href="http://stackoverflow.com/questions/11547458/what-is-the-difference-between-jvm-jdk-jre-openjdk" target="_blank" rel="noopener">What is the difference between JVM, JDK, JRE &amp; OpenJDK?</a></li></ul></li></ul><h3 id="Tomcat-install"><a href="#Tomcat-install" class="headerlink" title="Tomcat install"></a>Tomcat install</h3><p>我们前往<a href="http://tomcat.apache.org/" target="_blank" rel="noopener">tomcat官方站点下载</a></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">#</span><span class="bash"></span><br><span class="hljs-meta">#</span><span class="bash"> tar xvf apache-tomcat-VERSION.tar.gz -C /usr/<span class="hljs-built_in">local</span>/ </span><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">cd</span> /usr/<span class="hljs-built_in">local</span>/ </span><br><span class="hljs-meta">#</span><span class="bash"> ln -sv apache-tomcat-VERSION tomcat </span><br><span class="hljs-meta"><br>#</span><span class="bash"> 添加变量</span><br><span class="hljs-meta">#</span><span class="bash"> vim /etc/profile.d/tomcat.sh </span><br>export CATALINA_BASE=/usr/local/tomcat <br>export PATH=$CATALINA_BASE/bin:$PATH<br><span class="hljs-meta"><br>#</span><span class="bash"> . /etc/profile.d/tomcat.sh</span><br></code></pre></div></td></tr></table></figure><h3 id="Add-tomcat-user-amp-group"><a href="#Add-tomcat-user-amp-group" class="headerlink" title="Add tomcat user &amp; group"></a>Add tomcat user &amp; group</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">#</span><span class="bash"> groupadd tomcat</span><br><span class="hljs-meta">#</span><span class="bash"> useradd -g tomcat -s /sbin/nologin -d /usr/<span class="hljs-built_in">local</span>/tomcat/ tomcat</span><br><span class="hljs-meta">#</span><span class="bash"> chown -Rf tomcat.tomcat /usr/<span class="hljs-built_in">local</span>/tomcat</span><br></code></pre></div></td></tr></table></figure><h3 id="Runing-Tomcat"><a href="#Runing-Tomcat" class="headerlink" title="Runing Tomcat"></a>Runing Tomcat</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta"><br>#</span><span class="bash"> /usr/<span class="hljs-built_in">local</span>/tomcat/bin/catalina.sh  start  或  <span class="hljs-comment">#catalina.sh  start</span></span><br></code></pre></div></td></tr></table></figure><h3 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h3><ul><li><p>tomcat目录结构</p><ul><li>bin： 脚本启动时用到的类</li><li>lib： 类库</li><li>conf： 配置文件</li><li>logs： 日志文件</li><li>webapps： 应用默认程序部署目录</li><li>work： 工作目录</li><li>tmp： 临时文件目录</li></ul></li><li><p>配置文件</p><ul><li>server.xml: 主配置文件；</li><li>context.xml: 每个webapp可以有专有的配置文件，这些配置文件通常位于webapp应用程序目录下的WEB-INF,用于定义会话管理，JDBC等；conf/context.xml是为webapp提供默认配置；</li><li>web.xml：每个webapp“部署”之后才可以被访问；此文件用于所以webapp的默认配置文件；</li><li>tomcat-users.xml: 用户认证帐号密码配置文件;</li><li>catalina.policy: 当使用-security选项启动tomcat实例，会读取此配置文件来实现其安全运行策略；</li><li>catalina.properties: Java属性定义文件，用于设定类加载器路径，以及一些JVM相关性能调优参数；</li><li>logging.properties; 日志相关的配置信息；</li></ul></li></ul><h3 id="测速页"><a href="#测速页" class="headerlink" title="测速页"></a>测速页</h3><p> vim </p><p>创建目录<br><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">cd</span> tomcat/webapps</span><br><span class="hljs-meta"><br>#</span><span class="bash"> mkdir myapp/&#123;lib,class,WEB-INF,META-INF&#125; -pv</span><br></code></pre></div></td></tr></table></figure></p><p><code># vim myapp/index.jsp</code><br><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br>&lt;%@ page language="java" %&gt;<br>&lt;html&gt;<br>  &lt;head&gt;&lt;title&gt;TomcatA&lt;/title&gt;&lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;h1&gt;&lt;font color="red"&gt;TomcatA.magedu.com&lt;/font&gt;&lt;/h1&gt;<br>    &lt;table align="centre" border="1"&gt;<br>      &lt;tr&gt;<br>        &lt;td&gt;Session ID&lt;/td&gt;<br>    &lt;% session.setAttribute("magedu.com","magedu.com"); %&gt;<br>        &lt;td&gt;&lt;%= session.getId() %&gt;&lt;/td&gt;<br>      &lt;/tr&gt;<br>      &lt;tr&gt;<br>        &lt;td&gt;Created on&lt;/td&gt;<br>        &lt;td&gt;&lt;%= session.getCreationTime() %&gt;&lt;/td&gt;<br>     &lt;/tr&gt;<br>    &lt;/table&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure></p><p>###<br>环境目录如下<br>/usr/share/tomcat/webapps</p><p><code># tree /data/wepapps/</code></p><figure class="highlight crystal"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">/data/wepapps/<br>└── ROOT<br>    ├── <span class="hljs-class"><span class="hljs-keyword">class</span></span><br>    ├── index.jsp<br>    ├── <span class="hljs-class"><span class="hljs-keyword">lib</span></span><br>    ├── META-INF<br>    └── WEB-INF<br></code></pre></div></td></tr></table></figure><ul><li><a href="https://my.oschina.net/sunchp/blog/616526" target="_blank" rel="noopener">Docker搭建Tomcat</a></li></ul><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><img src="/images/tomcat/tomcatconfigvar.jpg" srcset="/img/loading.gif" lazyload alt="tomcat"></p><h4 id="memcached-session-manager项目地址下载地址，"><a href="#memcached-session-manager项目地址下载地址，" class="headerlink" title="memcached-session-manager项目地址下载地址，"></a>memcached-session-manager项目地址下载地址，</h4><ul><li><a href="http://code.google.com/p/memcached-session-manager" target="_blank" rel="noopener">Google</a> </li><li><a href="https://github.com/magro/memcached-session-manager" target="_blank" rel="noopener">GitHub</a></li></ul><p>需准备用到的jar扩展</p><blockquote><p>注意：不同的tomcat版本（tomcat6，tomcat7，tomcat8）所需的包不一样，需要针对tomcat版本下载对应的包.</p></blockquote><p>这是采用的javolution的序列化方式所有需要的包:</p><ul><li><a href="http://repo1.maven.org/maven2/de/javakaffee/msm/memcached-session-manager/" target="_blank" rel="noopener">memcached-session-manager-${version}.jar</a></li><li><a href="http://repo1.maven.org/maven2/de/javakaffee/msm/" target="_blank" rel="noopener">memcached-session-manager-tc${6,7,8}-${version}.jar</a></li><li><a href="http://repo1.maven.org/maven2/net/spy/spymemcached/2.11.1/spymemcached-2.11.1.jar" target="_blank" rel="noopener">spymemcached-${version}.jar</a></li><li><a href="http://repo1.maven.org/maven2/de/javakaffee/msm/msm-javolution-serializer/" target="_blank" rel="noopener">msm-javolution-serializer-${version}.jar</a></li><li><a href="https://raw.githubusercontent.com/kinzun/Config-Script/master/tomcat/memchachetestjavo/javolution-5.4.3.1.jar" target="_blank" rel="noopener">javolution-${version}.jar</a></li></ul><p>移动所有jar包到<br>mv *.jar /usr/share/tomcat/lib</p><p>配置memcache</p><p>###　Example for sticky sessions + javolution</p><p><code># vim $TOMCAT_HOME/conf/server.xml</code></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br>&lt;!-- &lt;Host name="localhost"  appBase="webapps" unpackWARs="true" autoDeploy="true"&gt; <br>   此处下添加如--&gt;<br> &lt;Context path="" docBase="/usr/share/tomcat/webapps/test/" reloadable="true"&gt;<br>  &lt;Manager className="de.javakaffee.web.msm.MemcachedBackupSessionManager" memcachedNodes="n1:192.168.0.10:11211,n2:192.168.0.12:11211" <br>  failoverNodes="n1"<br>  requestUriIgnorePattern=".*\.(ico|png|gif|jpg|css|js)$"<br>  transcoderFactoryClass="de.javakaffee.web.msm.serializer.javolution.JavolutionTranscoderFactory"<br>              /&gt;<br>             &lt;/Context&gt;<br></code></pre></div></td></tr></table></figure><p>另一节点如此。</p><h3 id="Config-nginx-load-balancing"><a href="#Config-nginx-load-balancing" class="headerlink" title="Config nginx load balancing"></a>Config nginx load balancing</h3><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-comment">#安装nginx</span><br><span class="hljs-attribute">yum</span> install nginx<br><span class="hljs-comment">#配置负载均衡</span><br>upstream tomcat_server &#123;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.0.12</span>;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.0.10</span>;<br>&#125;<br><br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span> <span class="hljs-number">192.168.0.13</span>;<br><br><span class="hljs-attribute">location</span> / &#123;<br><br>    <span class="hljs-attribute">proxy_pass</span> http://tomcat_server;<br>        <span class="hljs-attribute">proxy_set_header</span>  X-Real-IP  <span class="hljs-variable">$remote_addr</span>;  <br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>tomcat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zabbix安装部署</title>
    <link href="/2017/05/18/zabbixInstalldeploy/"/>
    <url>/2017/05/18/zabbixInstalldeploy/</url>
    
    <content type="html"><![CDATA[<p>Alexei Vladishev创建了<a href="http://www.ttlsa.com/monitor/zabbix/" target="_blank" rel="noopener">Zabbix</a>项目，当前处于活跃开发状态，Zabbix SIA提供支持.Zabbix是一个企业级的、开源的、分布式的监控套件</p><p>Zabbix可以监控网络和服务的监控状况. Zabbix利用灵活的告警机制，允许用户对事件发送基于Email的告警. 这样可以保证快速的对问题作出相应. Zabbix可以利用存储数据提供杰出的报告及图形化方式. 这一特性将帮助用户完成容量规划.Zabbix支持polling和trapping两种方式. 所有的Zabbix报告都可以通过配置参数在WEB前端进行访问. Web前端将帮助你在任何区域都能够迅速获得你的网络及服务状况. Zabbix可以通过尽可能的配置来扮演监控你的IT基础框架的角色，而不管你是来自于小型组织还是大规模的公司.</p><p>Zabbix是零成本的. 因为Zabbix编写和发布基于GPL V2协议. 意味着源代码是免费发布的.</p><p>Zabbix公司也提供商业化的技术支持.</p> <a id="more"></a><h4 id="程序构成"><a href="#程序构成" class="headerlink" title="程序构成"></a>程序构成</h4><figure class="highlight axapta"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">进程介绍<br><span class="hljs-number">1</span>）- zabbix_agentd<br>客户端守护进程，此进程收集客户端数据，例如cpu负载、内存、硬盘使用情况等<br><br><span class="hljs-number">2</span>）- zabbix_get<br>zabbix工具，单独使用的命令，通常在<span class="hljs-keyword">server</span>或者proxy端执行获取远程客户端信息的命令。<br>通常用户排错。例如在<span class="hljs-keyword">server</span>端获取不到客户端的内存数据，<br>我们可以使用zabbix_get获取客户端的内容的方式来做故障排查。<br><br><span class="hljs-number">3</span>)- zabbix_sender<br>zabbix工具，用于发送数据给<span class="hljs-keyword">server</span>或者proxy，<br>通常用于耗时比较长的检查。很多检查非常耗时间，导致zabbix超时。<br>于是我们在脚本执行完毕之后，使用sender主动提交数据。<br><br><span class="hljs-number">4</span>)- zabbix_server<br>zabbix服务端守护进程。zabbix_agentd、zabbix_get、zabbix_sender、<br>zabbix_proxy、zabbix_java_gateway的数据最终都是提交到<span class="hljs-keyword">server</span><br>备注：当然不是数据都是主动提交给zabbix_server,也有的是<span class="hljs-keyword">server</span>主动去取数据。<br><br><span class="hljs-number">5</span>)- zabbix_proxy<br>zabbix代理守护进程。功能类似<span class="hljs-keyword">server</span>，唯一不同的是它只是一个中转站，<br>它需要把收集到的数据提交/被提交到<span class="hljs-keyword">server</span>里。<br>为什么要用代理？代理是做什么的？卖个关子，请继续关注运维生存时间zabbix教程系列。<br><br><span class="hljs-number">6</span>)- zabbix_java_gateway<br>zabbix2<span class="hljs-number">.0</span>之后引入的一个功能。顾名思义：Java网关，类似agentd，<br>但是只用于Java方面。需要特别注意的是，它只能主动去获取数据，而不能被动获取数据。<br>它的数据最终会给到<span class="hljs-keyword">server</span>或者proxy。<br></code></pre></div></td></tr></table></figure><h4 id="zabbix部署（服务端）"><a href="#zabbix部署（服务端）" class="headerlink" title="zabbix部署（服务端）"></a>zabbix部署（服务端）</h4><p>1）zabbix依赖数据库配置</p><p><code>yum install mariadb-server</code></p><p>vim /etc/my.cnf,在[mysqld]下加上</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attr">skip_name_resolve</span>=<span class="hljs-literal">on</span><br><span class="hljs-attr">innodb_file_per_table</span>=<span class="hljs-literal">on</span><br></code></pre></div></td></tr></table></figure><p>创建zabbix授权</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">mysql -uroot -h127.0.0.1 -e "<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span>  zabbix <span class="hljs-keyword">CHARSET</span> <span class="hljs-string">'utf8'</span>;<br><span class="hljs-keyword">GRANT</span> ALL <span class="hljs-keyword">ON</span> zabbix.* <span class="hljs-keyword">TO</span> zbxuser@<span class="hljs-string">'192.168.%.%'</span> <span class="hljs-keyword">IDENTIFIED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">'zbxpass'</span>;<br><span class="hljs-keyword">GRANT</span> ALL <span class="hljs-keyword">ON</span> zabbix.* <span class="hljs-keyword">TO</span> zbxuser@<span class="hljs-string">'127.0.0.1'</span> <span class="hljs-keyword">IDENTIFIED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">'zbxpass'</span>;<br><span class="hljs-keyword">FLUSH</span> <span class="hljs-keyword">PRIVILEGES</span>;<br>quit<br>"<br></code></pre></div></td></tr></table></figure><p>2)配置服务端组件</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">安装服务端：yum <span class="hljs-keyword">install</span> zabbix-<span class="hljs-keyword">server</span>-mysql zabbix-<span class="hljs-keyword">get</span><br><br>安装webGUI：yum <span class="hljs-keyword">install</span> zabbix-web zabbix-web-mysql<br><br>安装<span class="hljs-keyword">agent</span>端（可以监控自己）：yum <span class="hljs-keyword">install</span> zabbix-<span class="hljs-keyword">agent</span> zabbix-sender<br></code></pre></div></td></tr></table></figure><p>zabbix server 数据库初始化：（将create.sql 导入到database中）\</p><figure class="highlight lsl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"># rpm -ql zabbix-server-mysql |grep create<br>/usr/share/doc/zabbix-server-mysql<span class="hljs-number">-3.0</span><span class="hljs-number">.2</span>/create.sql.gz<br>gzip -d creat.sql.gz <br>mysql  -h192<span class="hljs-number">.168</span><span class="hljs-number">.1</span><span class="hljs-number">.108</span>  -uzbxuser -p zabbix &lt; create.sql<br></code></pre></div></td></tr></table></figure><p>php时区更改（可直接执行</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">sed -i <span class="hljs-string">'/# php_value date.timezone.*/c\\tphp_value date.timezone Asia/Shanghai'</span> <span class="hljs-regexp">/etc/</span>httpd<span class="hljs-regexp">/conf.d/</span>zabbix.conf<br></code></pre></div></td></tr></table></figure><p>修改服务端配置文件：/etc/zabbix/zabbix_server.conf（先备份）</p><figure class="highlight clean"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">[centos ~]# grep -i <span class="hljs-string">"#####"</span> /etc/zabbix/zabbix_server.conf<br>############ GENERAL PARAMETERS ################# 通用参数<br>############ ADVANCED PARAMETERS ################ 高级参数<br>####### LOADABLE MODULES ####### 加载的模块<br>####### TLS-RELATED PARAMETERS ####### TLS相关的参数<br><br><br><br>[centos ~]# egrep -v <span class="hljs-string">"(#|^$)"</span> /etc/zabbix/zabbix_server.conf<br>LogFile=/var/log/zabbix/zabbix_server.log<br>LogFileSize=<span class="hljs-number">0</span><br>PidFile=/var/run/zabbix/zabbix_server.pid<br>DBHost= <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span><br>DBName=zabbix<br>DBUser=zabuser<br>DBPassword=zabpass<br>SNMPTrapperFile=/var/log/snmptrap/snmptrap.log<br>Timeout=<span class="hljs-number">4</span><br>AlertScriptsPath=/usr/lib/zabbix/alertscripts<br>ExternalScripts=/usr/lib/zabbix/externalscripts<br>LogSlowQueries=<span class="hljs-number">3000</span><br></code></pre></div></td></tr></table></figure><p>常用部分配置解释</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">#</span><span class="bash"> ListenPort=10051 监听的端口 默认为10051，默认即可</span><br><span class="hljs-meta">#</span><span class="bash"></span><br><span class="hljs-meta">#</span><span class="bash">SourceIP：若是有多个IP，启用一个源IP，对方授权的IP</span><br><span class="hljs-meta">#</span><span class="bash"></span><br><span class="hljs-meta">#</span><span class="bash">DBHost：数据库服务地址</span><br><span class="hljs-meta">#</span><span class="bash"></span><br><span class="hljs-meta">#</span><span class="bash">DBname：zabbix数据库名</span><br><span class="hljs-meta">#</span><span class="bash"></span><br><span class="hljs-meta">#</span><span class="bash">DBuser：zabbix数据库账户名</span><br><span class="hljs-meta">#</span><span class="bash"></span><br><span class="hljs-meta">#</span><span class="bash">DBpassword：zabbix数据库密码 </span><br><span class="hljs-meta">#</span><span class="bash"></span><br><span class="hljs-meta">#</span><span class="bash">DBSocket：如果database与server在同一台主机就要改，不在就没事。</span><br><span class="hljs-meta">#</span><span class="bash"></span><br><span class="hljs-meta">#</span><span class="bash">logfile：日志文件地址</span><br><span class="hljs-meta">#</span><span class="bash"></span><br><span class="hljs-meta">#</span><span class="bash">logfilesize：日志文件大小，（最大为1G，0为用不滚动）</span><br><span class="hljs-meta">#</span><span class="bash"></span><br><span class="hljs-meta">#</span><span class="bash">DebugLevel：日志记录等级（1-5）</span><br><span class="hljs-meta">#</span><span class="bash"></span><br><span class="hljs-meta">#</span><span class="bash">pidfile：pid文件</span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#启动：systemctl start zabbix-server，注意如果是centos是7.0或者7.1版本的trousers包要更新.</span></span><br></code></pre></div></td></tr></table></figure><p>测试环境配置中仅改以下配置，其余配置保持默认、按需更改</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-comment"># vim /etc/zabbix/zabbix_server.conf</span><br><span class="hljs-attr">DBHost</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">0.10</span><br><span class="hljs-attr">DBname</span>=zabbix<br><span class="hljs-attr">DBUser</span>=zabuser<br><span class="hljs-attr">DBPassword</span>=zabpass<br></code></pre></div></td></tr></table></figure><p>服务端配置完成</p><figure class="highlight x86asm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">启动httpd：systemctl start httpd.service<br><br>访问：<span class="hljs-number">192.168</span><span class="hljs-meta">.0</span><span class="hljs-meta">.10</span>/zabbix<br><span class="hljs-symbol">http:</span>//<span class="hljs-number">192.168</span><span class="hljs-meta">.0</span><span class="hljs-meta">.10</span>/zabbix/setup.php<br>默认账户密码<br>admin/zabbix<br></code></pre></div></td></tr></table></figure><p>zabbix/setup.php。</p><h4 id="配置客户端agent"><a href="#配置客户端agent" class="headerlink" title="配置客户端agent"></a>配置客户端agent</h4><p>Zabbix Agent检查有两种模式,分为主动(Agent Active)和被动(Agent)两种形式。主动与被动的说法均是相对于Agent来讨论的。</p><ul><li>主动检查：Agent请求Server获取主动的监控项列表，并主动将监控项内需要检测的数据提交给Server/Proxy</li><li>被动检查：Server向Agent请求获取监控项的数据，Agent返回数据。</li></ul><p>安装agent端（可以监控自己）：<code>yum install zabbix-agent zabbix-sender</code></p><p>配置部分解释</p><figure class="highlight clean"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">root@c7<span class="hljs-number">-02</span>:[~]: grep  <span class="hljs-string">"####"</span> /etc/zabbix/zabbix_agentd.conf  <br>############ GENERAL PARAMETERS #################<br>EnableRemoteCommands：是否允许远程执行命令<br>LogRemoteCommands：远程命令执行是否记录日志<br>##### Passive checks related<br>Server：服务端地址（允许哪个ip获取数据）<br>StartAgents：服务启动时预生成的进程数（注意不能为<span class="hljs-number">0</span>，为<span class="hljs-number">0</span>是代表禁用被动模式）<br>##### Active checks related<br>ServerActive：#主动模式的server IP地址<br>Hostname：主#机名（用于主动发送数据时用于标示主机名）<br>RefreshActiveChecks：#多长时间去服务端刷新一次配置间隔<br>############ ADVANCED PARAMETERS #################<br>####### USER-DEFINED MONITORED PARAMETERS #######<br>####### LOADABLE MODULES #######<br>####### TLS-RELATED PARAMETERS #######<br><br><br><br>root@c7<span class="hljs-number">-02</span>:[~]: egrep -v <span class="hljs-string">"(#|^$)"</span> /etc/zabbix/zabbix_agentd.conf<br>LogFile=/var/log/zabbix/zabbix_agentd.log<br>LogFileSize=<span class="hljs-number">0</span><br>EnableRemoteCommands=<span class="hljs-number">1</span>  <br>Server=<span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span><br>ServerActive=<span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span><br>Hostname=Zabbix server<br>Include=/etc/zabbix/zabbix_agentd.d/<br></code></pre></div></td></tr></table></figure><p>测试环境更改以下</p><figure class="highlight makefile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-comment">#被动监控，agent等待server过来请求数据</span><br><span class="hljs-comment">#passive checks related 下</span><br><br>Server=192.168.0.10  可以用逗号隔开授权的有哪些<br><br><span class="hljs-comment">#主动监控：被监控端把数据主动发给服务端</span><br><span class="hljs-comment">#active checks related 下</span><br><br>ServerActive=192.168.0.10<br>Hostname=在Web UI上声明主机时所使用相同的主机名(区分大小写)，不配置则使用主机名。<br><br><span class="hljs-comment">#启动服务即可</span><br>systemctl start zabbix-agent.service<br></code></pre></div></td></tr></table></figure><h5 id="修改-Zabbix-Server-系统语言为简体中文"><a href="#修改-Zabbix-Server-系统语言为简体中文" class="headerlink" title="修改 Zabbix Server 系统语言为简体中文"></a>修改 Zabbix Server 系统语言为简体中文</h5><p>对于 3.0 版本的 Zabbix Server 系统语言选择下拉框中默认是没有简体中文的，需要改动其源码，改动方式如下：</p><ul><li><code>vim /usr/share/zabbix/include/locales.inc.php`，修改文件中的 `&#39;zh_CN&#39; =&gt; [&#39;name&#39; =&gt; _(&#39;Chinese (zh_CN)&#39;), &#39;display&#39; =&gt; false]` 的 `false` 为 `true` 即可。</code> </li></ul><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">sed -E <span class="hljs-string">"55s/display.*/display' =&gt; true],/"</span> /usr/share/zabbix/include/locales<span class="hljs-selector-class">.inc</span><span class="hljs-selector-class">.php</span><br></code></pre></div></td></tr></table></figure><p>不过中文翻译得并不贴切，而且还会有乱码（需要修改字体解决）的可能，不建议修改此项。</p>]]></content>
    
    
    
    <tags>
      
      <tag>zabbix</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub Hexo Blog</title>
    <link href="/2017/05/17/hexodep/"/>
    <url>/2017/05/17/hexodep/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/githexo.png" srcset="/img/loading.gif" lazyload alt="githexo"></p><h3 id="什么是-Hexo？"><a href="#什么是-Hexo？" class="headerlink" title="什么是 Hexo？"></a>什么是 <a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo</a>？</h3><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用<a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><h3 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h3><p>应用程序：</p><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Nodejs</a></li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">github</a></li><li><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">vscode</a> [^mark]</li></ul><p>[^mark]: &lt;&lt;用作编辑markdown，根据个人喜好，比如<a href="http://www.markdownpad.com/" target="_blank" rel="noopener">mdpad</a>&gt;&gt;</p><a id="more"></a><h3 id="配置npm镜像源"><a href="#配置npm镜像源" class="headerlink" title="配置npm镜像源"></a>配置npm镜像源</h3><blockquote><p>npm全称Node Package Manager，是node.js的模块依赖管理工具。</p></blockquote><p>由于npm的源在国外，配置源以淘宝源为例：</p><ul><li><p>临时使用</p><figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-built_in">npm</span> --registry https:<span class="hljs-regexp">//</span>registry.<span class="hljs-built_in">npm</span>.taobao.org install express<br></code></pre></div></td></tr></table></figure></li><li><p>持久使用</p><figure class="highlight gams"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">npm config <span class="hljs-keyword">set</span> registry <span class="hljs-comment">https:</span>//<span class="hljs-comment">registry.npm.taobao.org</span><br></code></pre></div></td></tr></table></figure></li></ul><blockquote><h6 id="配置后可通过下面方式来验证是否成功"><a href="#配置后可通过下面方式来验证是否成功" class="headerlink" title="// 配置后可通过下面方式来验证是否成功"></a>// 配置后可通过下面方式来验证是否成功</h6></blockquote><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">npm<span class="hljs-built_in"> config </span><span class="hljs-builtin-name">get</span> registry<br></code></pre></div></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attribute">npm</span> <span class="hljs-literal">info</span> express<br></code></pre></div></td></tr></table></figure><ul><li>通过cnpm使用</li></ul><figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-built_in">npm</span> install -g cnpm --registry=https:<span class="hljs-regexp">//</span>registry.<span class="hljs-built_in">npm</span>.taobao.org<br></code></pre></div></td></tr></table></figure><blockquote><h6 id="使用cnpm-install-expresstall-express"><a href="#使用cnpm-install-expresstall-express" class="headerlink" title="// 使用cnpm install expresstall express"></a>// 使用cnpm install expresstall express</h6></blockquote><h2 id><a href="#" class="headerlink" title></a><img src="/images/snipaste_20170517_161507.png" srcset="/img/loading.gif" lazyload alt="taobao"></h2><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> npm install -g hexo-cli</span><br></code></pre></div></td></tr></table></figure><p>#-g表示全局安装, npm默认为当前b安装</p><h3 id="npm-基本指令"><a href="#npm-基本指令" class="headerlink" title="npm 基本指令"></a>npm 基本指令</h3><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">- 卸载全局安装模块  npm uninstall -g &lt;package&gt;<br><br>卸载后，你可以到去全局安装目录查看/node_modules/ 目录下查看包是否还存在，或者使用以下命令查看：npm ls<br><br>- 获取全局安装目录 npm<span class="hljs-built_in"> config </span><span class="hljs-builtin-name">get</span><span class="hljs-built_in"> prefix<br></span><br>- 查看所有全局安装的模块 npm ls -g<br><br>- 查看npm默认设置（部分） npm<span class="hljs-built_in"> config </span>ls<br><br>- 查看npm默认设置（全部） npm<span class="hljs-built_in"> config </span>ls -l<br></code></pre></div></td></tr></table></figure><p>npm指令英文文档，如 ：<a href="https://docs.npmjs.com/" target="_blank" rel="noopener">https://docs.npmjs.com</a></p><p>如需了解更多 <a href="https://docs.npmjs.com/getting-started/what-is-npm" target="_blank" rel="noopener">npm docs page</a></p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>若在安装中遇到，提供的页面中有常见安装问题。</p><p>如果遇到相同问题，移步<a href="https://github.com/hexojs/hexo/issues/2569" target="_blank" rel="noopener">472</a></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">module.js:472<br>    throw err;<br>    ^<br><br>Error: Cannot find module 'D:\Program Files\Git\node_modules\hexo-cli\bin\hexo'<br></code></pre></div></td></tr></table></figure><ul><li><p><a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">hexo issues</a></p></li><li><p><a href="http://wp.huangshiyang.com/hexo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88" target="_blank" rel="noopener">huangshiyuang常见问题</a></p></li><li><p><a href="http://www.jianshu.com/p/67c57c70f275" target="_blank" rel="noopener">hexo 部署至Git遇到的坑</a></p></li></ul><h3 id="hexo-建立默认站点"><a href="#hexo-建立默认站点" class="headerlink" title="hexo 建立默认站点"></a>hexo 建立默认站点</h3><p>在我的电脑中建立一个名字叫「Hexo」的文件夹，然后在此文件夹中右键打开Git Bash。执行</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">$</span><span class="bash"> hexo init</span><br></code></pre></div></td></tr></table></figure><p>如果无法使用右击“Git Bash”，则可以切换到指定目录</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> i:/hexo</span><br></code></pre></div></td></tr></table></figure><p>安装依赖包Hexo随后会自动生产建立网站所需的文件</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">$</span><span class="bash"> npm install</span><br></code></pre></div></td></tr></table></figure><p>开启预览访问端口（默认端口4000，’ctrl + c’关闭server）可选开启调试模式（即加上 –debug）</p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attribute">hexo</span> s --<span class="hljs-literal">debug</span> <span class="hljs-comment">#调试模式</span><br>hexo server<br></code></pre></div></td></tr></table></figure><p>然后到浏览器输入localhost:4000。</p><p>一个默认的本地hexo站点完成。</p><p><img src="/images/hexonext.png" srcset="/img/loading.gif" lazyload alt="hexo"></p><h3 id="hexo切换主题"><a href="#hexo切换主题" class="headerlink" title="hexo切换主题"></a>hexo切换主题</h3><ul><li>安装主题</li></ul><p>Hexo 安装只需要将主题文件拷贝至站点目录的 themes 目录下， 然后修改下配置文件即可。</p><p>在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 </p><p>_config.yml 位于站点根目录下</p><p><img src srcset="/img/loading.gif" lazyload alt></p><ul><li>启用主题</li></ul><p>打开 _config.yml 找到 theme 字段 ，修改值为主题</p><figure class="highlight autoit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">theme: <span class="hljs-keyword">next</span><br></code></pre></div></td></tr></table></figure><p><img src="/images/snipaste_20170517_171942.png" srcset="/img/loading.gif" lazyload alt="theme"></p><p>在切换主题之后、验证之前， 我们最好使用 hexo clean 来清除 Hexo 的缓存。</p><ul><li>验证主题</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attribute">hexo s</span><br></code></pre></div></td></tr></table></figure><p>此时即可使用浏览器访问 <a href="http://localhost:4000，检查站点是否正确运行。" target="_blank" rel="noopener">http://localhost:4000，检查站点是否正确运行。</a></p><h3 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h3><ul><li>安装 hexo-deployer-git。</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">npm <span class="hljs-keyword">install</span> hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></div></td></tr></table></figure><ul><li>修改主配置文件_config.yml,</li></ul><figure class="highlight less"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attribute">deploy</span>:<br>  <span class="hljs-attribute">type</span>: git<br>  <span class="hljs-attribute">repo</span>: git<span class="hljs-variable">@github</span>.<span class="hljs-attribute">com</span>:kinzun/kinzun.github.io.git<br>  <span class="hljs-attribute">branch</span>: master<br>  # <span class="hljs-attribute">message</span>: [message]<br></code></pre></div></td></tr></table></figure><p><img src="/images/snipaste_20170517_170651.png" srcset="/img/loading.gif" lazyload alt="deploy"></p><ul><li>生成静态文件</li></ul><figure class="highlight verilog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">hexo <span class="hljs-keyword">generate</span><br></code></pre></div></td></tr></table></figure><ul><li>快速部署</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attribute">hexo deployer</span><br></code></pre></div></td></tr></table></figure><p>同时执行，两条作用相同。</p><figure class="highlight verilog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">hexo <span class="hljs-keyword">generate</span> --deploy <br>hexo deploy --<span class="hljs-keyword">generate</span><br></code></pre></div></td></tr></table></figure><ul><li>每次需要写博客可以使用</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attribute">hexo n</span><br></code></pre></div></td></tr></table></figure><p>soure文件夹下的_post文件夹下新建一个markdown文件.</p><figure class="highlight vbnet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><br>    首先我们需要检查你电脑上现有的ssh <span class="hljs-keyword">key</span>：<br>$ cd ~/. ssh 检查本机的ssh密钥<br>    如果提示：No such file <span class="hljs-keyword">or</span> directory 说明你是第一次使用git。<br>    生成新的SSH <span class="hljs-keyword">Key</span>：<br>$ ssh-keygen -t rsa -C <span class="hljs-string">"邮件地址@youremail.com"</span><br>Generating <span class="hljs-keyword">public</span>/<span class="hljs-keyword">private</span> rsa <span class="hljs-keyword">key</span> pair.<br>Enter file <span class="hljs-keyword">in</span> which <span class="hljs-keyword">to</span> save the <span class="hljs-keyword">key</span> <br>(/Users/your_user_directory/.ssh/id_rsa):&lt;回车就好&gt;<br></code></pre></div></td></tr></table></figure><p>.ssh/id_rsa.pub<br> 登陆github系统。点击右上角的 Account Settings—&gt;SSH Public keys —&gt; add another public keys</p><p><strong>注意</strong> 将私钥权限 设置 700 其他人无法访问即可。</p><figure class="highlight verilog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">chmod <span class="hljs-number">700</span> id_rsa<br>测试<br>$ ssh -T git@github<span class="hljs-variable">.com</span><br><br>Hi cnfeat! You've successfully authenticated, <br>but GitHub does <span class="hljs-keyword">not</span> provide shell access.<br><br>验证成功<br><br>进行下一步，配置全局<br><br>$ git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.name</span> <span class="hljs-string">"cnfeat"</span><span class="hljs-comment">//用户名</span><br>$ git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.email</span> <span class="hljs-string">"cnfeat@gmail.com"</span><span class="hljs-comment">//填写自己的邮箱</span><br><br>SSH Key配置成功，本机已成功连接到github<br></code></pre></div></td></tr></table></figure><h3 id="hexo-常用命令"><a href="#hexo-常用命令" class="headerlink" title="hexo 常用命令"></a>hexo 常用命令</h3><figure class="highlight axapta"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">"postName"</span> <span class="hljs-meta">#新建文章</span><br>hexo <span class="hljs-keyword">new</span> page <span class="hljs-string">"pageName"</span> <span class="hljs-meta">#新建页面</span><br>hexo generate <span class="hljs-meta">#生成静态页面至public目录</span><br>hexo <span class="hljs-keyword">server</span> <span class="hljs-meta">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span><br>hexo deploy <span class="hljs-meta">#将.deploy目录部署到GitHub</span><br>hexo help <span class="hljs-meta">#查看帮助</span><br>hexo version <span class="hljs-meta">#查看Hexo的版本</span><br></code></pre></div></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo 官方文档</a></p><p><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NEXT 主题文档 </a></p><p><a href="https://luuman.github.io/categories/Hexo/" target="_blank" rel="noopener">世平阜康</a></p><p><a href="http://www.jianshu.com/p/e99ed60390a8" target="_blank" rel="noopener">hexo搭建github博客</a></p><p><a href="http://artori.us/git-github-usage/" target="_blank" rel="noopener">Git/Github使用方法小记</a></p><p><a href="http://www.voidking.com/2015/05/30/deve-hexo-build-environment/" target="_blank" rel="noopener"></a></p><p><a href="https://docs.npmjs.com/getting-started/installing-node" target="_blank" rel="noopener">Node.js Docs</a></p><p><a href="http://www.jianshu.com/p/1e402922ee32/" target="_blank" rel="noopener">Markdown——入门指南</a></p><p><a href="http://www.jianshu.com/p/82e730892d42" target="_blank" rel="noopener">Markdown的常用语法</a></p><p><a href="https://sanwen8.cn/p/670KuHA.html" target="_blank" rel="noopener">Markdown|让文本更加精致</a></p><p><a href="https://www.zhihu.com/question/24422335" target="_blank" rel="noopener">主题推荐</a></p><p><a href="http://www.jianshu.com/p/701b1095da11" target="_blank" rel="noopener">手把手教你建github技术博客</a></p>]]></content>
    
    
    <categories>
      
      <category>主题博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Keeplaived 高可用nginx负载均衡</title>
    <link href="/2017/05/16/keepalived/"/>
    <url>/2017/05/16/keepalived/</url>
    
    <content type="html"><![CDATA[<p>Single Point of Failure</p><p><img src="/images/htmt5a.jpg" srcset="/img/loading.gif" lazyload alt="htmt5a"></p><p>系统环境： CentOS-7.3</p><p>软件： nginx-1.12.0,keepalived,ipvsadm<br>安装方式： 源码编译安装、YUM</p><p>安装位置： /usr/local/nginx/</p><p>下载地址： <a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">nignx</a><br><img src="/images/keepalivedag.png" srcset="/img/loading.gif" lazyload alt="keepalived"><br><a id="more"></a><br>集群由两台调度器（DirectorServer，DS）</p><p> 192.168.0.80/24</p><p>192.168.0.81/24</p><p>两台真实服务器（RealServer，RS）构成</p><p>192.168.0.10/24</p><p>192.168.0.12/24</p><p>调度器一主一备，两台台真实服务器进行负载均衡提供服务。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-string">./configure</span> <span class="hljs-params">--prefix=/usr/local/nginx</span> <span class="hljs-params">--with-http_stub_status_module</span> <span class="hljs-params">--with-http_ssl_module</span> <span class="hljs-params">--with-http_flv_module</span> <span class="hljs-params">--with-http_gzip_static_module</span><br>make&amp;&amp;make install<br></code></pre></div></td></tr></table></figure><h3 id="keepalived的配置文件global-defs"><a href="#keepalived的配置文件global-defs" class="headerlink" title="keepalived的配置文件global_defs"></a>keepalived的配置文件global_defs</h3><figure class="highlight lsl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">! Configuration File for keepalived<br><br>global_defs &#123;<br><br>   notification_email &#123;<br><br>     abc@abc.com<br><br>   &#125;<br><br>   notification_email_from guang384@<span class="hljs-number">163.</span>com<br><br>   smtp_server <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> #STMP服务<br><br>   smtp_connect_timeout <span class="hljs-number">30</span><br><br>   #服务器全局属性，在收到提醒邮件的时候会用来作为当前服务器的标识，所以每台服务器都要唯一<br><br>   router_id LVS_DR_DS1<br><br>   vrrp_mcast_group4 <span class="hljs-number">224.0</span><span class="hljs-number">.100</span><span class="hljs-number">.19</span> #d多播地址<br><br>     <br><br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>notification_email 故障发生时给谁发邮件通知。</li><li>notification_email_from 通知邮件从哪个地址发出。</li><li>smpt_server 通知邮件的smtp地址。</li><li>smtp_connect_timeout 连接smtp服务器的超时时间。</li><li>enable_traps 开启SNMP陷阱（ Simple Network Management Protocol ）。</li><li>router_id 标识本节点的字条串，通常为hostname，但不一定非得是hostname。故障发生<br>时，邮件通知会用到。</li></ul><p>vrrp_mcast_group4 224.0.100.19 多播地址</p><p>224.0.0.0～239.255.255.255</p><hr><h3 id="static-ipaddress和static-routes区域"><a href="#static-ipaddress和static-routes区域" class="headerlink" title="static_ipaddress和static_routes区域"></a>static_ipaddress和static_routes区域</h3><figure class="highlight pf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">vrrp_instance VI_1 &#123;<br><br>    <span class="hljs-keyword">state</span> MASTER    <span class="hljs-comment">#指定Keepalived的角色， MASTER 为主机服务器， BACKUP 为备用服务器</span><br><br>    interface eth0 <span class="hljs-comment">#通过哪一个发送心跳信息</span><br><br>    virtual_router_id <span class="hljs-number">51</span> <span class="hljs-comment">#当前虚拟路由器的惟一标识，范围是0-255；相同虚拟服务器相同，</span><br><br>    priority <span class="hljs-number">100</span>    <span class="hljs-comment">#定义优先级，数字越大，优先级越高，主DR必须大于备用DR。当前主机在此虚拟路径器中的优先级；范围1-254；</span><br><br>    advert_int <span class="hljs-number">1</span>    <span class="hljs-comment">#心跳间隔，MASTER每隔1秒发送报文告知组内其他机器自己还活着。（主备状态依靠心跳维持）vrrp通告的时间间隔；</span><br><br>    authentication &#123;<br><br>        auth_type PASS<br><br>        auth_pass <span class="hljs-number">571</span>f97b2<br><br>    &#125;<br><br>     virtual_ipaddress &#123;<br><br>                        <span class="hljs-number">10.1</span>.<span class="hljs-number">0.91</span>/<span class="hljs-number">16</span> dev eno16777736   <span class="hljs-comment">#设置主DR的虚拟IP地址(virtual IP),可多设，但必须每行1个</span><br><br>           &#125;<br><br>    &#125;<br><br> <br><br>virtual_ipaddress &#123;<br><br>                            <span class="hljs-variable">&lt;IPADDR&gt;</span>/<span class="hljs-variable">&lt;MASK&gt;</span> brd <span class="hljs-variable">&lt;IPADDR&gt;</span> dev <span class="hljs-variable">&lt;STRING&gt;</span> scope <span class="hljs-variable">&lt;SCOPE&gt;</span> <span class="hljs-keyword">label</span> <span class="hljs-variable">&lt;LABEL&gt;</span><br><br>                            <span class="hljs-number">192.168</span>.<span class="hljs-number">200.17</span>/<span class="hljs-number">24</span> dev eth1<br><br>                            <span class="hljs-number">192.168</span>.<span class="hljs-number">200.18</span>/<span class="hljs-number">24</span> dev eth2 <span class="hljs-keyword">label</span> eth2:<span class="hljs-number">1</span><br><br>                        &#125; <br>static_routes &#123;  <br>                           <span class="hljs-number">192.168</span>.<span class="hljs-number">100</span>/<span class="hljs-number">24</span> via <span class="hljs-number">172.18</span>.<span class="hljs-number">0.1</span> dev eth0    ...&#125;<br></code></pre></div></td></tr></table></figure><h4 id="上分别表示启动keepalived时在本机执行命令："><a href="#上分别表示启动keepalived时在本机执行命令：" class="headerlink" title="上分别表示启动keepalived时在本机执行命令："></a>上分别表示启动keepalived时在本机执行命令：</h4><figure class="highlight armasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"># /sbin/<span class="hljs-built_in">ip</span> <span class="hljs-keyword">addr </span><span class="hljs-keyword">add </span><span class="hljs-built_in">IP</span> <span class="hljs-keyword">brd </span><span class="hljs-built_in">IP</span> dev eth0         <br># /sbin/<span class="hljs-built_in">ip</span> route <span class="hljs-keyword">add </span><span class="hljs-built_in">IP</span> via  dev eth0    <br>```     <br>         <br>         <br>``` <br><br><span class="hljs-symbol">track_interface</span> &#123;<br><br>                            eth0<br><br>                            eth1<br><br>                            ...<br><br>                        &#125;<br><br><br>配置要监控的网络接口，一旦接口出现故障，则转为FAULT状态；<br><br><span class="hljs-keyword">nopreempt：定义工作模式为非抢占模式；<br></span><br><span class="hljs-symbol">preempt_delay</span> <span class="hljs-number">300</span>：抢占式模式下，节点上线后触发新选举操作的延迟时长；<br><br><br><br>定义通知脚本：<br><br><span class="hljs-symbol">notify_master</span> &lt;<span class="hljs-keyword">STRING&gt;|&lt;QUOTED-STRING&gt;：当前节点成为主节点时触发的脚本；<br></span><span class="hljs-symbol">notify_backup</span> &lt;<span class="hljs-keyword">STRING&gt;|&lt;QUOTED-STRING&gt;：当前节点转为备节点时触发的脚本； </span><br><span class="hljs-symbol">notify_fault</span> &lt;<span class="hljs-keyword">STRING&gt;|&lt;QUOTED-STRING&gt;：当前节点转为“失败”状态时触发的脚本；<br></span><br><br><br><span class="hljs-symbol">notify</span> &lt;<span class="hljs-keyword">STRING&gt;|&lt;QUOTED-STRING&gt;：通用格式的通知触发机制，一个脚本可完成以上三种状态的转换时的通知；<br></span><br><br>`<br></code></pre></div></td></tr></table></figure><hr><h4 id="通知脚本示例"><a href="#通知脚本示例" class="headerlink" title="通知脚本示例"></a>通知脚本示例</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta"><br>#</span><span class="bash">!/bin/bash</span><br><span class="hljs-meta">#</span><span class="bash"></span><br><br>contact='root@localhost'<br>notify() &#123;<br>     mailsubject="$(hostname) to be $1, vip floating"<br>     mailbody="$(date +'%F %T'): vrrp transition, $(hostname) changed to be $1"<br>     echo "$mailbody" | mail -s "$mailsubject" $contact<br>&#125;<br>case $1 in<br>master)<br>    notify master<br>     ;;<br>backup)<br>    notify backup<br>     ;;<br><br>fault)<br>    notify fault<br>     ;;<br><br>*)<br>     echo "Usage: $(basename $0) &#123;master|backup|fault&#125;"<br>     exit 1<br>     ;;<br><br>esac  <br>```    <br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">## 主keeplived调度配置</span></span><br>``` <br><br>! Configuration File for keepalived<br><br>global_defs &#123;<br>   notification_email &#123;<br>        root@localhost<br>   &#125;<br>   notification_email_from Alexandre.Cassen@firewall.loc<br>   smtp_server 127.0.0.1<br>   smtp_connect_timeout 30<br>   router_id vser<br>   virtual_ipaddress 224.0.100.10<br>&#125;<br>vrrp_instance kpone &#123;<br>    state MASTER<br>    interface eth0<br>    virtual_router_id 51<br>    priority 100<br>    advert_int 2<br>    authentication &#123;<br>        auth_type PASS<br>        auth_pass j7dPTXjI<br>    &#125;<br>    virtual_ipaddress &#123;<br>        192.168.0.80/24 dev eth0<br>    &#125;<br> notify_master "/etc/keepalived/notify.sh master"<br> notify_backup "/etc/keepalived/notify.sh backup"<br> notify_fault "/etc/keepalived/notify.sh fault"   <br>&#125;<br><br>vrrp_instance kptwo &#123;<br>    state BACKUP<br>    interface eth0<br>    virtual_router_id 52<br>    priority 98<br>    advert_int 2<br>    authentication &#123;<br>        auth_type PASS<br>        auth_pass j1dPTXjI<br>    &#125;<br>    virtual_ipaddress &#123;<br>        192.168.0.81/24 dev eth0<br>    &#125;<br>&#125;<br><br>```    <br><span class="hljs-meta"> <br><br>#</span><span class="bash"><span class="hljs-comment">## 配置备用调度器的 keepalived</span></span><br>``` <br>scp /etc/keepliaved/keeplived.conf 192.168.0.12:/etc/keepalived/<br></code></pre></div></td></tr></table></figure><p>只需要将 state MASTER 改为 state BACKUP,降低 priority 100 的值:</p><p>state MASTER —&gt; state BACKUP</p><p>priority 100 —&gt; priority 95 （此值必须低于主的)</p><p>双主模型中</p><p>virtual_router_id 52 值不同</p><h4 id="keepalived主备用高可用负载均衡"><a href="#keepalived主备用高可用负载均衡" class="headerlink" title="keepalived主备用高可用负载均衡"></a>keepalived主备用高可用负载均衡</h4><figure class="highlight lsl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">virtual_server <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.80</span> <span class="hljs-number">80</span>&#123;<br>    delay_loop <span class="hljs-number">3</span><br>    lb_algo wrr<br>    lb_kind DR<br>    protocol TCP<br>    sorry_server <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> <span class="hljs-number">80</span><br>    real_server <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span> <span class="hljs-number">80</span> &#123;<br>        weight <span class="hljs-number">1</span><br>        HTTP_GET &#123;<br>            url &#123;<br>              path /<br>              status_code <span class="hljs-number">200</span><br>            &#125;<br>            connect_timeout <span class="hljs-number">3</span><br>            nb_get_retry <span class="hljs-number">3</span><br>            delay_before_retry <span class="hljs-number">3</span><br>        &#125;<br>    &#125;<br><br>    real_server <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.12</span> <span class="hljs-number">80</span> &#123;<br>        weight <span class="hljs-number">1</span><br>        HTTP_GET &#123;<br>           url &#123;<br>              path /<br>              status_code <span class="hljs-number">200</span>             <br>            &#125;<br>            connect_timeout <span class="hljs-number">3</span><br>            nb_get_retry <span class="hljs-number">3</span><br>            delay_before_retry <span class="hljs-number">3</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/images/nginxh.png" srcset="/img/loading.gif" lazyload alt="m"></p><h3 id="keepalived-nginx-proxy-集群"><a href="#keepalived-nginx-proxy-集群" class="headerlink" title="keepalived nginx proxy 集群"></a>keepalived nginx proxy 集群</h3><figure class="highlight x86asm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><br>http上下文      <br>       upstream websrvs &#123;<br>                server <span class="hljs-number">192.168</span><span class="hljs-meta">.0</span><span class="hljs-meta">.10</span>:<span class="hljs-number">80</span><span class="hljs-comment">;</span><br>                server <span class="hljs-number">192.168</span><span class="hljs-meta">.0</span><span class="hljs-meta">.12</span>:<span class="hljs-number">80</span><span class="hljs-comment">;</span><br>                server <span class="hljs-number">127.0</span><span class="hljs-meta">.0</span><span class="hljs-meta">.1</span>:<span class="hljs-number">80</span> backup<span class="hljs-comment">;</span><br>        &#125;<br><br>        server &#123;<br>           <br>           proxy_pass http://websrvs<span class="hljs-comment">;</span><br><br>        &#125;<br></code></pre></div></td></tr></table></figure><p>配置选项说明<br>Master<br><figure class="highlight clean"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"># cat /etc/keepalived/keepalived.conf <br>global_defs &#123;<br>   notification_email &#123;<br>   #  acassen@firewall.loc   # 指定keepalived在发生切换时需要发送email到的对象，一行一个<br>   #  sysadmin@firewall.loc<br>   &#125;<br>   #notification_email_from Alexandre.Cassen@firewall.loc  # 指定发件人<br>   #smtp_server <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.1</span>     # smtp 服务器地址 <br>   #smtp_connect_timeout <span class="hljs-number">30</span>       # smtp 服务器连接超时时间<br>   router_id LVS_DEVEL            # 标识本节点的字符串,通常为hostname,但不一定非得是hostname,故障发生时,邮件通知会用到<br>&#125;<br>###　新增　###<br>vrrp_script chk_httpd &#123;<br>    script <span class="hljs-string">"/etc/keepalived/check_and_start_httpd.sh"</span>   # apache httpd 服务检测并试图重启<br>    interval <span class="hljs-number">2</span>                    # 每<span class="hljs-number">2</span>s检查一次<br>    weight <span class="hljs-number">-5</span>                     # 检测失败（脚本返回非<span class="hljs-number">0</span>）则优先级减少<span class="hljs-number">5</span>个值<br>    fall <span class="hljs-number">3</span>                        # 如果连续失败次数达到此值，则认为服务器已down<br>    rise <span class="hljs-number">2</span>                        # 如果连续成功次数达到此值，则认为服务器已up，但不修改优先级<br>&#125;<br><br>vrrp_instance VI_1 &#123;              # 实例名称<br>    state MASTER                  # 可以是MASTER或BACKUP，不过当其他节点keepalived启动时会自动将priority比较大的节点选举为MASTER<br>    interface eth0                # 节点固有IP（非VIP）的网卡，用来发VRRP包做心跳检测<br>    virtual_router_id <span class="hljs-number">51</span>          # 虚拟路由ID,取值在<span class="hljs-number">0</span><span class="hljs-number">-255</span>之间,用来区分多个<span class="hljs-keyword">instance</span>的VRRP组播,同一网段内ID不能重复;主备必须为一样<br>    priority <span class="hljs-number">100</span>                  # 用来选举master的,要成为master那么这个选项的值最好高于其他机器<span class="hljs-number">50</span>个点,该项取值范围是<span class="hljs-number">1</span><span class="hljs-number">-255</span>(在此范围之外会被识别成默认值<span class="hljs-number">100</span>)<br>    advert_int <span class="hljs-number">1</span>                  # 检查间隔默认为<span class="hljs-number">1</span>秒,即<span class="hljs-number">1</span>秒进行一次master选举(可以认为是健康查检时间间隔)<br>    authentication &#123;              # 认证区域,认证类型有PASS和HA（IPSEC）,推荐使用PASS(密码只识别前<span class="hljs-number">8</span>位)<br>        auth_type PASS            # 默认是PASS认证<br>        auth_pass <span class="hljs-number">1111</span>            # PASS认证密码<br>    &#125;<br>    virtual_ipaddress &#123;<br>        <span class="hljs-number">192.168</span><span class="hljs-number">.14</span><span class="hljs-number">.166</span>            # 虚拟VIP地址,允许多个,一行一个<br>    #    <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.17</span><br>    &#125;<br>    ###　新增　###<br>    track_script &#123;                # 引用VRRP脚本，即在 vrrp_script 部分指定的名字。定期运行它们来改变优先级，并最终引发主备切换。<br>        chk_httpd          <br>    &#125;                <br>&#125;<br></code></pre></div></td></tr></table></figure></p><p>Backup<br><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">state BACKUP     # 此值可设置或不设置，只要保证下面的priority不一致即可<span class="hljs-built_in"><br>interface </span>eth0   # 根据实际情况选择网卡<br>priority 40      # 此值要一定小于Master机器上的值，最好相差不少于50<br><br>mcast_src_ip 172.29.88.224 -&gt; mcast_src_ip 172.29.88.225<br></code></pre></div></td></tr></table></figure></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://weizhifeng.net/using-keepalived.html" target="_blank" rel="noopener">keepalived</a></li><li><a href="http://seanlook.com/2015/05/18/nginx-keepalived-ha/" target="_blank" rel="noopener">seanlook</a></li><li><a href="http://www.cnblogs.com/wang-meng/p/5861174.html" target="_blank" rel="noopener">cnblogs</a></li><li><a href="http://cpper.info/2016/09/15/keepalived-for-master-backup.html" target="_blank" rel="noopener">cpper</a></li><li><a href="http://patrick-tang.blogspot.com/2012/06/redis-keepalived-failover-system.html" target="_blank" rel="noopener">http://patrick-tang.blogspot.com/2012/06/redis-keepalived-failover-system.html</a></li><li><a href="http://heylinux.com/archives/1942.html" target="_blank" rel="noopener">http://heylinux.com/archives/1942.html</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Nginx 配置文件总结</title>
    <link href="/2017/05/05/nginx-config-summary/"/>
    <url>/2017/05/05/nginx-config-summary/</url>
    
    <content type="html"><![CDATA[<h4 id="顶级配置"><a href="#顶级配置" class="headerlink" title="顶级配置"></a>顶级配置</h4><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-comment">#定义 Nginx 运行的用户和用户组</span><span class="hljs-built_in"><br>user </span>nginx;<br><br><span class="hljs-comment">#进程文件</span><br>pid /var/run/nginx.pid;<br><br><span class="hljs-comment">#错误日志位置和级别，debug、info、notice、warn、error、crit</span><br>error_log  /var/log/nginx/error.log warn;<br><br><span class="hljs-comment">#Nginx worker 的进程数，一般可设置为可用的CPU内核数。</span><br>worker_processes 8;<br><br><span class="hljs-comment">#每个 worker 打开文件描述符的最大数量限制。理论值应该是最多打开文件数（系统的值ulimit -n）与 nginx 进程数相除，但是 nginx 分配请求并不均匀，所以建议与ulimit -n的值保持一致。</span><br>worker_rlimit_nofile 65535;<br></code></pre></div></td></tr></table></figure><a id="more"></a><p>修改系统文件打开数量限制：</p><figure class="highlight lsl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">sudo sh -c ulimit -HSn <span class="hljs-number">65535</span> <span class="hljs-comment">//临时修改</span><br></code></pre></div></td></tr></table></figure><p>重启后永久生效，则需要设置修改：</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">sudo <span class="hljs-keyword">vim</span> /etc/security/limits.<span class="hljs-keyword">conf</span><br></code></pre></div></td></tr></table></figure><p>在文件尾部添加：</p><figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-bullet">* </span>soft nofile 200000<br><span class="hljs-bullet">* </span>hard nofile 200000<br></code></pre></div></td></tr></table></figure><h4 id="Events-模块"><a href="#Events-模块" class="headerlink" title="Events 模块"></a>Events 模块</h4><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-comment">#设置一个worker进程同时打开的最大连接数</span><br>    <span class="hljs-attribute">worker_connections</span> <span class="hljs-number">2048</span>;<br><br>    <span class="hljs-comment">#告诉nginx收到一个新连接通知后接受尽可能多的连接</span><br>    <span class="hljs-attribute">multi_accept</span> <span class="hljs-literal">on</span>;<br><br>    <span class="hljs-comment">#设置用于复用客户端线程的轮询方法。如果你使用Linux 2.6+，你应该使用epoll。如果你使用*BSD，你应该使用kqueue。</span><br>    <span class="hljs-attribute">use</span> <span class="hljs-literal">epoll</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="HTTP-模块"><a href="#HTTP-模块" class="headerlink" title="HTTP 模块"></a>HTTP 模块</h4><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-comment">#隐藏 Nginx 的版本号，提高安全性。</span><br>    <span class="hljs-attribute">server_tokens</span> <span class="hljs-literal">off</span>;<br><br>    <span class="hljs-comment">#开启高效文件传输模式，sendfile 指令指定 Nginx 是否调用sendfile 函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘 IO 重负载应用，可设置为 off，以平衡磁盘与网络 I/O 处理速度，降低系统的负载。</span><br>    <span class="hljs-attribute">sendfile</span> <span class="hljs-literal">on</span>;<br><br>    <span class="hljs-comment">#是否开启目录列表访问，默认关闭。</span><br>    <span class="hljs-attribute">autoindex</span> <span class="hljs-literal">off</span>;<br><br>    <span class="hljs-comment">#告诉 Nginx 在一个数据包里发送所有头文件，而不一个接一个的发送</span><br>    <span class="hljs-attribute">tcp_nopush</span> <span class="hljs-literal">on</span>;<br><br>    <span class="hljs-comment">#告诉 Nginx 不要缓存数据，而是一段一段的发送--当需要及时发送数据时，就应该给应用设置这个属性，这样发送一小块数据信息时就不能立即得到返回值。Nginx 默认会始终工作在 tcp nopush 状态下。但是当开启前面的 sendfile on; 时，它的工作特点是 nopush 的最后一个包会自动转转换到 nopush off。为了减小那200ms的延迟，开启 nodelay on; 将其很快传送出去。结论就是 sendfile on; 开启时，tcp_nopush 和 tcp_nodelay 都是on 是可以的。</span><br>    <span class="hljs-attribute">tcp_nodelay</span> <span class="hljs-literal">on</span>;<br><br>    <span class="hljs-comment">#日志格式设定</span><br>    <span class="hljs-attribute">log_format</span>  main  <span class="hljs-string">'<span class="hljs-variable">$remote_addr</span> - <span class="hljs-variable">$remote_user</span> [<span class="hljs-variable">$time_local</span>] "<span class="hljs-variable">$request</span>" '</span><br>    <span class="hljs-string">'<span class="hljs-variable">$status</span> <span class="hljs-variable">$body_bytes_sent</span> "<span class="hljs-variable">$http_referer</span>" '</span><br>    <span class="hljs-string">'"<span class="hljs-variable">$http_user_agent</span>" "<span class="hljs-variable">$http_x_forwarded_for</span>"'</span>;<br>    <span class="hljs-comment">#定义访问日志，设置为 off 可以关闭日志，提高性能</span><br>    <span class="hljs-attribute">access_log</span> /var/log/nginx/access.log main;<br><br><br>    <span class="hljs-comment">#连接超时时间，单位是秒</span><br>    <span class="hljs-attribute">keepalive_timeout</span> <span class="hljs-number">120</span>;<br><br>    <span class="hljs-comment">#读取HTTP头部的超时时间，默认值 60。客户端与服务器建立连接后将开始接收HTTP头部，在这个过程中，如果在一个时间间隔（超时时间）内没有读取到客户端发来的字节，则认为超时，并向客户端返回408 ("Request timed out")响应。</span><br>    <span class="hljs-attribute">client_header_timeout</span> <span class="hljs-number">60</span>;<br><br>    <span class="hljs-comment">#默认值 60。与client_header_timeout相似，只是这个超时时间只在读取HTTP包体时才有效。</span><br>    <span class="hljs-attribute">client_body_timeout</span> <span class="hljs-number">10</span>;<br><br>    <span class="hljs-comment">#发送响应的超时时间，默认值 60。即Nginx服务器向客户端发送了数据包，但客户端一直没有去接收这个数据包。如果某个连接超过send_timeout定义的超时时间，那么Nginx将会关闭这个连接。</span><br>    <span class="hljs-attribute">send_timeout</span> <span class="hljs-number">60</span>;<br><br>    <span class="hljs-comment">#连接超时后将通过向客户端发送RST包来直接重置连接。这个选项打开后，Nginx会在某个连接超时后，不是使用正常情形下的四次握手关闭TCP连接，而是直接向用户发送RST重置包，不再等待用户的应答，直接释放Nginx服务器上关于这个套接字使用的所有缓存（如TCP滑动窗口）。相比正常的关闭方式，它使得服务器避免产生许多处于FIN_WAIT_1、FIN_WAIT_2、TIME_WAIT状态的TCP连接。注意，使用RST重置包关闭连接会带来一些问题，默认情况下不会开启。</span><br>    <span class="hljs-attribute">reset_timedout_connection</span> <span class="hljs-literal">off</span>;<br><br>    <span class="hljs-comment">#要限制连接，必须先有一个容器对连接进行计数，"zone=" 是给它一个名字，可以随便叫，这个名字要跟下面的 limit_conn 一致。$binary_remote_addr 用二进制来储存客户端的地址，1m 可以储存 32000 个并发会话。</span><br>    <span class="hljs-attribute">limit_conn_zone</span> <span class="hljs-variable">$binary_remote_addr</span> zone=addr:<span class="hljs-number">5m</span>;<br><br>    <span class="hljs-comment">#给定的key设置最大连接数。这里key是addr，我们设置的值是100，也就是说我们允许每一个IP地址最多同时打开有100个连接。</span><br>    <span class="hljs-attribute">limit_conn</span> addr <span class="hljs-number">100</span>;<br><br>    <span class="hljs-comment">#对每个连接限速100k。这如果一个IP允许两个并发连接，那么这个IP就是限速200K。</span><br>    <span class="hljs-attribute">limit_rate</span> <span class="hljs-number">100k</span>; <br><br>    <span class="hljs-comment">#include 是一个在当前文件中包含另一个文件内容的指令。这里我们使用它来加载文件扩展名与文件类型映射表。nginx根据映射关系，设置http请求响应头的Content-Type值。当在映射表找不到时，使用nginx.conf中default-type指定的默认值。</span><br>    <span class="hljs-attribute">include</span> /etc/nginx/mime.types;<br><br>    <span class="hljs-comment">#设置文件使用的默认的MIME-type</span><br>    <span class="hljs-attribute">default_type</span> text/html;<br><br>    <span class="hljs-comment">#默认编码</span><br>    <span class="hljs-attribute">charset</span> UTF-<span class="hljs-number">8</span>;<br><br>    <span class="hljs-comment">#该模块可以读取预先压缩的gz文件，这样可以减少每次请求进行gzip压缩的CPU资源消耗。该模块启用后，nginx首先检查是否存在请求静态文件的gz结尾的文件，如果有则直接返回该gz文件内容。</span><br>    <span class="hljs-attribute">gzip_static</span> <span class="hljs-literal">off</span>;  <br><br>    <span class="hljs-comment">#开启 gzip 压缩。</span><br>    <span class="hljs-attribute">gzip</span> <span class="hljs-literal">on</span>;<br><br>    <span class="hljs-comment"># 禁用客户端为 IE6 时的 gzip功能。</span><br>    <span class="hljs-attribute">gzip_disable</span> <span class="hljs-string">"msie6"</span>;<br><br>    <span class="hljs-comment">#Nginx做为反向代理的时候启用。可选值：off|expired|no-cache|no-sotre|private|no_last_modified|no_etag|auth|any</span><br>    <span class="hljs-attribute">gzip_proxied</span> any;<br><br>    <span class="hljs-comment">#设置允许压缩的页面最小字节数，页面字节数从header头中的Content-Length中进行获取。建议设置成大于1k的字节数，小于1k可能会越压越大。</span><br>    <span class="hljs-attribute">gzip_min_length</span> <span class="hljs-number">1024</span>;<br><br>    <span class="hljs-comment">#设置数据的压缩等级。这个等级可以是1-9之间的任意数值，9是最慢但是压缩比最大的。</span><br>    <span class="hljs-attribute">gzip_comp_level</span> <span class="hljs-number">5</span>;<br><br>    <span class="hljs-comment">#设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。 例如 4 4k 代表以4k为单位，按照原始数据大小以4k为单位的4倍申请内存。如果没有设置，默认值是申请跟原始数据相同大小的内存空间去存储gzip压缩结果。</span><br>    <span class="hljs-attribute">gzip_buffers</span> <span class="hljs-number">4</span> <span class="hljs-number">16k</span>;<br><br>    <span class="hljs-comment">#设置需要压缩的数据格式。Nginx默认只对text/html进行压缩。</span><br>    <span class="hljs-attribute">gzip_types</span> text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;<br><br>    <span class="hljs-comment">#为打开文件指定缓存，默认是没有启用的，max 指定缓存数量，建议和打开文件数一致，inactive 是指经过多长时间文件没被请求后删除缓存。</span><br>    <span class="hljs-attribute">open_file_cache</span> max=<span class="hljs-number">65535</span> inactive=<span class="hljs-number">30s</span>;<br><br>    <span class="hljs-comment">#多长时间检查一次缓存的有效信息</span><br>    <span class="hljs-attribute">open_file_cache_valid</span> <span class="hljs-number">30s</span>;<br><br>    <span class="hljs-comment">#open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的。出现 Last-Modified 不变的情况，就是因为当nginx对一个静态文件缓存后，如果30s内还在访问它，那么它的缓存就一直存在，直到30s内你不访问了为止。</span><br>    <span class="hljs-attribute">open_file_cache_min_uses</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-comment">#是否记录cache错误</span><br>    <span class="hljs-attribute">open_file_cache_errors</span> <span class="hljs-literal">on</span>;<br><br>    <span class="hljs-attribute">include</span> /etc/nginx/conf.d/<span class="hljs-regexp">*.conf</span>;<br>    <span class="hljs-attribute">include</span> /etc/nginx/sites-enabled/*;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="SERVER-模块"><a href="#SERVER-模块" class="headerlink" title="SERVER 模块"></a>SERVER 模块</h4><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-comment">#监听端口，nginx 会根据请求的 HOST 来决定使用哪个 SERVER 段的配置。如果没有匹配的 server_name，则默认使用配置文件中第一个。加上 default_server 则可以以指定没有匹配时的默认规则。</span><br>    <span class="hljs-comment">#listen 80;</span><br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span> default_server;<br><br>    <span class="hljs-comment">#域名可以有多个，用空格隔开</span><br>    <span class="hljs-attribute">server_name</span> www.test.com test.com;<br>    <span class="hljs-attribute">root</span> /user/share/nginx/html/test;<br><br>    <span class="hljs-comment">#404页面配置</span><br>    <span class="hljs-attribute">error_page</span>   <span class="hljs-number">404</span>   /<span class="hljs-number">404</span>.html;<br><br>    <span class="hljs-comment">#配置 ssl，有需要时开启。</span><br>    <span class="hljs-attribute">ssl</span> <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">ssl_certificate</span> /etc/nginx/ssl/server.crt;<br>    <span class="hljs-attribute">ssl_certificate_key</span> /etc/nginx/ssl/server.key;<br><br>    <span class="hljs-attribute">location</span> / &#123;<br>        <span class="hljs-attribute">index</span>   index.html index.php;<br>    &#125;<br><br>    <span class="hljs-comment">#图片缓存时间设置</span><br>    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ .*.(gif|jpg|jpeg|png|bmp|swf)$</span> &#123;<br>        <span class="hljs-attribute">expires</span> <span class="hljs-number">10d</span>;<br>    &#125;<br><br>    <span class="hljs-comment">#JS和CSS缓存时间设置</span><br>    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ .*.(js|css)?$</span> &#123;<br>        <span class="hljs-attribute">expires</span> <span class="hljs-number">1h</span>;<br>    &#125;<br><br>    <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ [^/]\.php(/|$)</span> &#123;<br>        <span class="hljs-attribute">fastcgi_index</span>   index.php;<br>        <span class="hljs-comment">#开启 PATH_INFO 支持，作用就是把参数按照给定的正则表达式分割成 $fastcgi_script_name 和 $fastcgi_path_info。</span><br>        <span class="hljs-comment">#例如：请求 index.php/id/1 不加此行配置时，fastcgi_script_name 是 /index.php/id/1，fastcgi_path_info 是空。</span><br>        <span class="hljs-comment">#加上之后，fastcgi_script_name 是 index.php，fastcgi_path_info 是 /id/1</span><br>        <span class="hljs-attribute">fastcgi_split_path_info</span><span class="hljs-regexp"> ^(.+\.php)(.*)$</span>;<br><br>        <span class="hljs-comment">#此值即是 PHP 中 $_SERVER['SCRIPT_FILENAME'] 的值</span><br>        <span class="hljs-attribute">fastcgi_param</span>   SCRIPT_FILENAME <span class="hljs-variable">$document_root</span><span class="hljs-variable">$fastcgi_script_name</span>;<br>        <span class="hljs-attribute">fastcgi_param</span>   PATH_INFO               <span class="hljs-variable">$fastcgi_path_info</span>;<br>        <span class="hljs-attribute">fastcgi_param</span>   PATH_TRANSLATED <span class="hljs-variable">$document_root</span><span class="hljs-variable">$fastcgi_path_info</span>;<br><br>        <span class="hljs-comment">#指定FastCGI服务器监听端口与地址。须和 PHP-FPM 的设置相同。</span><br>        <span class="hljs-comment">#fastcgi_pass   127.0.0.1:9000;</span><br>        <span class="hljs-attribute">fastcgi_pass</span>    unix:/var/run/php5-fpm.sock;<br>        <span class="hljs-attribute">include</span> fastcgi_params;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4><ul><li><a href="http://nginx.org/en/docs/" target="_blank" rel="noopener">http://nginx.org/en/docs/</a></li><li><a href="http://www.oschina.net/translate/nginx-setup" target="_blank" rel="noopener">http://www.oschina.net/translate/nginx-setup</a></li><li><a href="http://www.ha97.com/5194.html" target="_blank" rel="noopener">http://www.ha97.com/5194.html</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx 服务器安装及配置文件详解</title>
    <link href="/2017/05/04/NginxInstall-and-config/"/>
    <url>/2017/05/04/NginxInstall-and-config/</url>
    
    <content type="html"><![CDATA[<p>nginx在工作中已经有好几个环境在使用了，每次都是重新去网上扒博客，各种编译配置，今天自己也整理一份安装文档和nginx.conf配置选项的说明，留作以后参考。像负载均衡配置（包括健康检查）、缓存（包括清空缓存）配置实例，请参考<a href="http://seanlook.com/2015/05/17/nginx-install-and-config" target="_blank" rel="noopener">http://seanlook.com/2015/05/17/nginx-install-and-config</a> ，ssl加密请参考 <a href="http://seanlook.com/2015/05/28/nginx-ssl/" target="_blank" rel="noopener">http://seanlook.com/2015/05/28/nginx-ssl/</a> 。</p><a id="more"></a><h3 id="1-安装nginx"><a href="#1-安装nginx" class="headerlink" title="1. 安装nginx"></a>1. 安装nginx</h3><h4 id="1-1-选择稳定版本"><a href="#1-1-选择稳定版本" class="headerlink" title="1.1 选择稳定版本"></a>1.1 选择稳定版本</h4><p>我们编译安装nginx来定制自己的模块，机器CentOS 6.2 x86_64。首先安装缺少的依赖包：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">#</span><span class="bash"> yum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel</span><br></code></pre></div></td></tr></table></figure><p>这些软件包如果yum上没有的话可以下载源码来编译安装，只是要注意编译时默认安装的目录，确保下面在安装nginx时能够找到这些动态库文件（ldconfig）。</p><p>从 <a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">http://nginx.org/en/download.html</a> 下载稳定版<code>nginx-1.6.3.tar.gz</code>到<code>/usr/local/src</code>下解压。</p><p>为了后续准备我们另外下载2个插件模块：<a href="https://github.com/yaoweibin/nginx_upstream_check_module/releases" target="_blank" rel="noopener">nginx_upstream_check_module-0.3.0.tar.gz</a> —— 检查后端服务器的状态，<a href="https://bitbucket.org/nginx-goodies/nginx-sticky-module-ng/downloads" target="_blank" rel="noopener">nginx-goodies-nginx-sticky-module-ng-bd312d586752.tar.gz</a>（建议在/usr/local/src下解压后将目录重命名为<code>nginx-sticky-module-ng-1.2.5</code>） —— 后端做负载均衡解决session sticky问题（与upstream_check模块结合使用需要另外打补丁，请参考<a href="http://seanlook.com/2015/06/02/nginx-cache-check/" target="_blank" rel="noopener">nginx负载均衡配置实战</a>）。</p><p>请注意插件与nginx的版本兼容问题，一般插件越新越好，nginx不用追新，稳定第一。nginx-1.4.7，nginx-sticky-module-1.1，nginx_upstream_check_module-0.2.0，这个搭配也没问题。sticky-1.1与nginx-1.6版本由于更新没跟上编译出错。（可以直接使用Tengine，默认就包括了这些模块）</p><figure class="highlight livescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">[root@cachets nginx-<span class="hljs-number">1.6</span>.<span class="hljs-number">3</span>]<span class="hljs-comment"># pwd</span><br>/usr/local/src/nginx-<span class="hljs-number">1.6</span>.<span class="hljs-number">3</span><br>[root@cachets nginx-<span class="hljs-number">1.6</span>.<span class="hljs-number">3</span>]<span class="hljs-comment"># ./configure --prefix=/usr/local/nginx-1.6 --with-pcre \</span><br>&gt; --<span class="hljs-keyword">with</span>-http_stub_status_module --<span class="hljs-keyword">with</span>-http_ssl_module <span class="hljs-string">\</span><br>&gt; --<span class="hljs-keyword">with</span>-http_gzip_static_module --<span class="hljs-keyword">with</span>-http_realip_module <span class="hljs-string">\</span><br>&gt; --add-<span class="hljs-built_in">module</span>=../nginx_upstream_check_module-<span class="hljs-number">0.3</span>.<span class="hljs-number">0</span><br>[root@cachets nginx-<span class="hljs-number">1.6</span>.<span class="hljs-number">3</span>]<span class="hljs-comment"># make &amp;&amp; make install</span><br></code></pre></div></td></tr></table></figure><h4 id="1-2-常用编译选项说明"><a href="#1-2-常用编译选项说明" class="headerlink" title="1.2 常用编译选项说明"></a>1.2 常用编译选项说明</h4><p>nginx大部分常用模块，编译时./configure –help以–without开头的都默认安装。</p><ul><li>–prefix=PATH ： 指定nginx的安装目录。默认 /usr/local/nginx</li><li>–conf-path=PATH ： 设置nginx.conf配置文件的路径。nginx允许使用不同的配置文件启动，通过命令行中的-c选项。默认为prefix/conf/nginx.conf</li><li>–user=name： 设置nginx工作进程的用户。安装完成后，可以随时在nginx.conf配置文件更改user指令。默认的用户名是nobody。–group=name类似</li><li>–with-pcre ： 设置PCRE库的源码路径，如果已通过yum方式安装，使用–with-pcre自动找到库文件。使用–with-pcre=PATH时，需要从PCRE网站下载pcre库的源码（版本4.4 – 8.30）并解压，剩下的就交给Nginx的./configure和make来完成。perl正则表达式使用在location指令和 ngx_http_rewrite_module模块中。</li><li>–with-zlib=PATH ： 指定 zlib（版本1.1.3 – 1.2.5）的源码解压目录。在默认就启用的网络传输压缩模块ngx_http_gzip_module时需要使用zlib 。</li><li>–with-http_ssl_module ： 使用https协议模块。默认情况下，该模块没有被构建。前提是openssl与openssl-devel已安装</li><li>–with-http_stub_status_module ： 用来监控 Nginx 的当前状态</li><li>–with-http_realip_module ： 通过这个模块允许我们改变客户端请求头中客户端IP地址值(例如X-Real-IP 或 X-Forwarded-For)，意义在于能够使得后台服务器记录原始客户端的IP地址</li><li>–add-module=PATH ： 添加第三方外部模块，如nginx-sticky-module-ng或缓存模块。每次添加新的模块都要重新编译（Tengine可以在新加入module时无需重新编译）</li></ul><p>再提供一种编译方案：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">./configure \<br><span class="hljs-meta">&gt;</span><span class="bash"> --prefix=/usr \</span><br><span class="hljs-meta">&gt;</span><span class="bash"> --sbin-path=/usr/sbin/nginx \</span><br><span class="hljs-meta">&gt;</span><span class="bash"> --conf-path=/etc/nginx/nginx.conf \</span><br><span class="hljs-meta">&gt;</span><span class="bash"> --error-log-path=/var/<span class="hljs-built_in">log</span>/nginx/error.log \</span><br><span class="hljs-meta">&gt;</span><span class="bash"> --http-log-path=/var/<span class="hljs-built_in">log</span>/nginx/access.log \</span><br><span class="hljs-meta">&gt;</span><span class="bash"> --pid-path=/var/run/nginx/nginx.pid  \</span><br><span class="hljs-meta">&gt;</span><span class="bash"> --lock-path=/var/lock/nginx.lock \   </span><br><span class="hljs-meta">&gt;</span><span class="bash"> --user=nginx \</span><br><span class="hljs-meta">&gt;</span><span class="bash"> --group=nginx \</span><br><span class="hljs-meta">&gt;</span><span class="bash"> --with-http_ssl_module \</span><br><span class="hljs-meta">&gt;</span><span class="bash"> --with-http_stub_status_module \</span><br><span class="hljs-meta">&gt;</span><span class="bash"> --with-http_gzip_static_module \</span><br><span class="hljs-meta">&gt;</span><span class="bash"> --http-client-body-temp-path=/var/tmp/nginx/client/ \</span><br><span class="hljs-meta">&gt;</span><span class="bash"> --http-proxy-temp-path=/var/tmp/nginx/proxy/ \</span><br><span class="hljs-meta">&gt;</span><span class="bash"> --http-fastcgi-temp-path=/var/tmp/nginx/fcgi/ \</span><br><span class="hljs-meta">&gt;</span><span class="bash"> --http-uwsgi-temp-path=/var/tmp/nginx/uwsgi \</span><br><span class="hljs-meta">&gt;</span><span class="bash"> --with-pcre=../pcre-7.8</span><br><span class="hljs-meta">&gt;</span><span class="bash"> --with-zlib=../zlib-1.2.3</span><br></code></pre></div></td></tr></table></figure><h4 id="1-3-启动关闭nginx"><a href="#1-3-启动关闭nginx" class="headerlink" title="1.3 启动关闭nginx"></a>1.3 启动关闭nginx</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 检查配置文件是否正确</span></span><br><span class="hljs-meta">#</span><span class="bash"> /usr/<span class="hljs-built_in">local</span>/nginx-1.6/sbin/nginx -t </span><br><span class="hljs-meta">#</span><span class="bash"> ./sbin/nginx -V     <span class="hljs-comment"># 可以看到编译选项</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 启动、关闭</span></span><br><span class="hljs-meta">#</span><span class="bash"> ./sbin/nginx        <span class="hljs-comment"># 默认配置文件 conf/nginx.conf，-c 指定</span></span><br><span class="hljs-meta">#</span><span class="bash"> ./sbin/nginx -s stop</span><br>或 pkill nginx<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 重启，不会改变启动时指定的配置文件</span></span><br><span class="hljs-meta">#</span><span class="bash"> ./sbin/nginx -s reload</span><br>或 kill -HUP `cat /usr/local/nginx-1.6/logs/nginx.pid`<br></code></pre></div></td></tr></table></figure><p>当然也可以将 nginx 作为系统服务管理，下载 nginx 到/etc/init.d/，修改里面的路径然后赋予可执行权限。</p><figure class="highlight coq"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"># service nginx &#123;start|<span class="hljs-type">stop</span>|<span class="hljs-type">status</span>|<span class="hljs-type">restart</span>|<span class="hljs-type">reload</span>|<span class="hljs-type">configtest</span>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="1-4-yum安装"><a href="#1-4-yum安装" class="headerlink" title="1.4 yum安装"></a>1.4 yum安装</h4><p>—— 2015-05-22更新<br>yum安装rpm包会比编译安装简单很多，默认会安装许多模块，但缺点是如果你想以后安装第三方模块那就没办法了。</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-comment"># vi /etc/yum.repo.d/nginx.repo </span><br><span class="hljs-section">[nginx]</span> <br><span class="hljs-attr">name</span>=nginx repo <br><span class="hljs-attr">baseurl</span>=http://nginx.org/packages/centos/<span class="hljs-variable">$releasever</span>/<span class="hljs-variable">$basearch</span>/ <br><span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">0</span> <br><span class="hljs-attr">enabled</span>=<span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p>剩下的就<code>yum install nginx</code>搞定，也可以<code>yum install nginx-1.6.3</code>安装指定版本（前提是你去packages里看到有对应的版本，默认是最新版稳定版）。</p><h3 id="2-nginx-conf配置文件"><a href="#2-nginx-conf配置文件" class="headerlink" title="2. nginx.conf配置文件"></a>2. nginx.conf配置文件</h3><p>Nginx配置文件主要分成四部分：main（全局设置）、server（主机设置）、upstream（上游服务器设置，主要为反向代理、负载均衡相关配置）和 location（URL匹配特定位置后的设置），每部分包含若干个指令。main部分设置的指令将影响其它所有部分的设置；server部分的指令主要用于指定虚拟主机域名、IP和端口；upstream的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡；location部分用于匹配网页位置（比如，根目录“/”,“/images”,等等）。他们之间的关系式：server继承main，location继承server；upstream既不会继承指令也不会被继承。它有自己的特殊指令，不需要在其他地方的应用。<br>当前nginx支持的几个指令上下文：</p><h4 id="2-1-通用"><a href="#2-1-通用" class="headerlink" title="2.1 通用"></a>2.1 通用</h4><p>下面的nginx.conf简单的实现nginx在前端做反向代理服务器的例子，处理js、png等静态文件，jsp等动态请求转发到其它服务器tomcat：</p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attribute">user</span>  www www;<br><span class="hljs-attribute">worker_processes</span>  <span class="hljs-number">2</span>;<br><span class="hljs-attribute">error_log</span>  logs/error.log;<br><span class="hljs-comment">#error_log  logs/error.log  notice;</span><br><span class="hljs-comment">#error_log  logs/error.log  info;</span><br><span class="hljs-attribute">pid</span>        logs/nginx.pid;<br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-attribute">use</span> <span class="hljs-literal">epoll</span>;<br>    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">2048</span>;<br>&#125;<br><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">include</span>       mime.types;<br>    <span class="hljs-attribute">default_type</span>  application/octet-stream;<br>    <span class="hljs-comment">#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span><br>    <span class="hljs-comment">#                  '$status $body_bytes_sent "$http_referer" '</span><br>    <span class="hljs-comment">#                  '"$http_user_agent" "$http_x_forwarded_for"';</span><br>    <span class="hljs-comment">#access_log  logs/access.log  main;</span><br>    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;<br>    <span class="hljs-comment"># tcp_nopush     on;</span><br>    <span class="hljs-attribute">keepalive_timeout</span>  <span class="hljs-number">65</span>;<br>  <span class="hljs-comment"># gzip压缩功能设置</span><br>    <span class="hljs-attribute">gzip</span> <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">gzip_min_length</span> <span class="hljs-number">1k</span>;<br>    <span class="hljs-attribute">gzip_buffers</span>    <span class="hljs-number">4</span> <span class="hljs-number">16k</span>;<br>    <span class="hljs-attribute">gzip_http_version</span> <span class="hljs-number">1</span>.<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">gzip_comp_level</span> <span class="hljs-number">6</span>;<br>    <span class="hljs-attribute">gzip_types</span> text/html text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;<br>    <span class="hljs-attribute">gzip_vary</span> <span class="hljs-literal">on</span>;<br>  <br>  <span class="hljs-comment"># http_proxy 设置</span><br>    <span class="hljs-attribute">client_max_body_size</span>   <span class="hljs-number">10m</span>;<br>    <span class="hljs-attribute">client_body_buffer_size</span>   <span class="hljs-number">128k</span>;<br>    <span class="hljs-attribute">proxy_connect_timeout</span>   <span class="hljs-number">75</span>;<br>    <span class="hljs-attribute">proxy_send_timeout</span>   <span class="hljs-number">75</span>;<br>    <span class="hljs-attribute">proxy_read_timeout</span>   <span class="hljs-number">75</span>;<br>    <span class="hljs-attribute">proxy_buffer_size</span>   <span class="hljs-number">4k</span>;<br>    <span class="hljs-attribute">proxy_buffers</span>   <span class="hljs-number">4</span> <span class="hljs-number">32k</span>;<br>    <span class="hljs-attribute">proxy_busy_buffers_size</span>   <span class="hljs-number">64k</span>;<br>    <span class="hljs-attribute">proxy_temp_file_write_size</span>  <span class="hljs-number">64k</span>;<br>    <span class="hljs-attribute">proxy_temp_path</span>   /usr/local/nginx/proxy_temp <span class="hljs-number">1</span> <span class="hljs-number">2</span>;<br>  <span class="hljs-comment"># 设定负载均衡后台服务器列表 </span><br>    <span class="hljs-attribute">upstream</span>  backend  &#123; <br>              <span class="hljs-comment">#ip_hash; </span><br>              <span class="hljs-attribute">server</span>   <span class="hljs-number">192.168.10.100:8080</span> max_fails=<span class="hljs-number">2</span> fail_timeout=<span class="hljs-number">30s</span> ;  <br>              <span class="hljs-attribute">server</span>   <span class="hljs-number">192.168.10.101:8080</span> max_fails=<span class="hljs-number">2</span> fail_timeout=<span class="hljs-number">30s</span> ;  <br>    &#125;<br>  <span class="hljs-comment"># 很重要的虚拟主机配置</span><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span>  itoatest.example.com;<br>        <span class="hljs-attribute">root</span>   /apps/oaapp;<br>        <span class="hljs-attribute">charset</span> utf-<span class="hljs-number">8</span>;<br>        <span class="hljs-attribute">access_log</span>  logs/host.access.log  main;<br>        <span class="hljs-comment">#对 / 所有做负载均衡+反向代理</span><br>        <span class="hljs-attribute">location</span> / &#123;<br>            <span class="hljs-attribute">root</span>   /apps/oaapp;<br>            <span class="hljs-attribute">index</span>  index.jsp index.html index.htm;<br>            <span class="hljs-attribute">proxy_pass</span>        http://backend;  <br>            <span class="hljs-attribute">proxy_redirect</span> <span class="hljs-literal">off</span>;<br>            <span class="hljs-comment"># 后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br>            <span class="hljs-attribute">proxy_set_header</span>  Host  <span class="hljs-variable">$host</span>;<br>            <span class="hljs-attribute">proxy_set_header</span>  X-Real-IP  <span class="hljs-variable">$remote_addr</span>;  <br>            <span class="hljs-attribute">proxy_set_header</span>  X-Forwarded-For  <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>            <span class="hljs-attribute">proxy_next_upstream</span> <span class="hljs-literal">error</span> timeout invalid_header http_500 http_502 http_503 http_504;<br>            <br>        &#125;<br>        <span class="hljs-comment">#静态文件，nginx自己处理，不去backend请求tomcat</span><br>        <span class="hljs-attribute">location</span>  <span class="hljs-regexp">~* /download/</span> &#123;  <br>            <span class="hljs-attribute">root</span> /apps/oa/fs;  <br>            <br>        &#125;<br>        <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ .*\.(gif|jpg|jpeg|bmp|png|ico|txt|js|css)$</span>   <br>        &#123;   <br>            <span class="hljs-attribute">root</span> /apps/oaapp;   <br>            <span class="hljs-attribute">expires</span>      <span class="hljs-number">7d</span>; <br>        &#125;<br>       <span class="hljs-attribute">location</span> /nginx_status &#123;<br>            <span class="hljs-attribute">stub_status</span> <span class="hljs-literal">on</span>;<br>            <span class="hljs-attribute">access_log</span> <span class="hljs-literal">off</span>;<br>            <span class="hljs-attribute">allow</span> <span class="hljs-number">192.168.10.0</span>/<span class="hljs-number">24</span>;<br>            <span class="hljs-attribute">deny</span> all;<br>        &#125;<br>        <span class="hljs-attribute">location</span> <span class="hljs-regexp">~ ^/(WEB-INF)/</span> &#123;   <br>            <span class="hljs-attribute">deny</span> all;   <br>        &#125;<br>        <span class="hljs-comment">#error_page  404              /404.html;</span><br>        <span class="hljs-comment"># redirect server error pages to the static page /50x.html</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;<br>        <span class="hljs-attribute">location</span> = /50x.html &#123;<br>            <span class="hljs-attribute">root</span>   html;<br>        &#125;<br>    &#125;<br>  <span class="hljs-comment">## 其它虚拟主机，server 指令开始</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="2-2-常用指令说明"><a href="#2-2-常用指令说明" class="headerlink" title="2.2 常用指令说明"></a>2.2 常用指令说明</h3><h4 id="2-2-1-main全局配置"><a href="#2-2-1-main全局配置" class="headerlink" title="2.2.1 main全局配置"></a>2.2.1 main全局配置</h4><p>nginx在运行时与具体业务功能（比如http服务或者email服务代理）无关的一些参数，比如工作进程数，运行的身份等。</p><ul><li><code>woker_processes 2</code><br>在配置文件的顶级<em>main</em>部分，worker角色的工作进程的个数，master进程是接收并分配请求给worker处理。这个数值简单一点可以设置为cpu的核数<code>grep ^processor /proc/cpuinfo | wc -l</code>，也是 auto 值，如果开启了ssl和gzip更应该设置成与逻辑CPU数量一样甚至为2倍，可以减少I/O操作。如果nginx服务器还有其它服务，可以考虑适当减少。</li><li><code>worker_cpu_affinity</code><br>也是写在<em>main</em>部分。在高并发情况下，通过设置cpu粘性来降低由于多CPU核切换造成的寄存器等现场重建带来的性能损耗。如<code>worker_cpu_affinity 0001 0010 0100 1000;</code> （四核）。</li><li><code>worker_connections 2048</code><br>写在<em>events</em>部分。每一个worker进程能并发处理（发起）的最大连接数（包含与客户端或后端被代理服务器间等所有连接数）。nginx作为反向代理服务器，计算公式 <code>最大连接数 = worker_processes * worker_connections/4</code>，所以这里客户端最大连接数是1024，这个可以增到到8192都没关系，看情况而定，但不能超过后面的<code>worker_rlimit_nofile</code>。当nginx作为http服务器时，计算公式里面是除以2。</li><li><code>worker_rlimit_nofile 10240</code><br>写在<em>main</em>部分。默认是没有设置，可以限制为操作系统最大的限制65535。</li><li><code>use epoll</code><br>写在<code>events</code>部分。在Linux操作系统下，nginx默认使用epoll事件模型，得益于此，nginx在Linux操作系统下效率相当高。同时Nginx在OpenBSD或FreeBSD操作系统上采用类似于epoll的高效事件模型kqueue。在操作系统不支持这些高效模型时才使用select。</li></ul><h4 id="2-2-2-http服务器"><a href="#2-2-2-http服务器" class="headerlink" title="2.2.2 http服务器"></a>2.2.2 http服务器</h4><p>与提供http服务相关的一些配置参数。例如：是否使用keepalive啊，是否使用gzip进行压缩等。</p><ul><li><code>sendfile on</code><br>开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，减少用户空间到内核空间的上下文切换。对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。</li><li><code>keepalive_timeout 65</code> : 长连接超时时间，单位是秒，这个参数很敏感，涉及浏览器的种类、后端服务器的超时设置、操作系统的设置，可以另外起一片文章了。长连接请求大量小文件的时候，可以减少重建连接的开销，但假如有大文件上传，65s内没上传完成会导致失败。如果设置时间过长，用户又多，长时间保持连接会占用大量资源。</li><li><code>send_timeout</code> : 用于指定响应客户端的超时时间。这个超时仅限于两个连接活动之间的时间，如果超过这个时间，客户端没有任何活动，Nginx将会关闭连接。</li><li><code>client_max_body_size 10m</code><br>允许客户端请求的最大单文件字节数。如果有上传较大文件，请设置它的限制值</li><li><code>client_body_buffer_size 128k</code><br>缓冲区代理缓冲用户端请求的最大字节数</li></ul><p><strong>模块http_proxy：</strong><br>这个模块实现的是nginx作为反向代理服务器的功能，包括缓存功能（另见<a href="http://seanlook.com/2015/06/02/nginx-cache-check/" target="_blank" rel="noopener">文章</a>）</p><ul><li><code>proxy_connect_timeout 60</code><br>nginx跟后端服务器连接超时时间(代理连接超时)</li><li><code>proxy_read_timeout 60</code><br>连接成功后，与后端服务器两个成功的响应操作之间超时时间(代理接收超时)</li><li><code>proxy_buffer_size 4k</code><br>设置代理服务器（nginx）从后端realserver读取并保存用户<strong>头</strong>信息的缓冲区大小，默认与proxy_buffers大小相同，其实可以将这个指令值设的小一点</li><li><code>proxy_buffers 4 32k</code><br>proxy_buffers缓冲区，nginx针对单个连接缓存来自后端realserver的<strong>响应</strong>，网页平均在32k以下的话，这样设置</li><li><code>proxy_busy_buffers_size 64k</code><br>高负荷下缓冲大小（proxy_buffers*2）</li><li><code>proxy_max_temp_file_size</code><br>当 proxy_buffers 放不下后端服务器的响应内容时，会将一部分保存到硬盘的临时文件中，这个值用来设置最大临时文件大小，默认1024M，它与 proxy_cache 没有关系。大于这个值，将从upstream服务器传回。设置为0禁用。</li><li><code>proxy_temp_file_write_size 64k</code><br>当缓存被代理的服务器响应到临时文件时，这个选项限制每次写临时文件的大小。<code>proxy_temp_path</code>（可以在编译的时候）指定写到哪那个目录。</li></ul><p>proxy_pass，proxy_redirect见 location 部分。</p><p>模块http_gzip：</p><ul><li>gzip on : 开启gzip压缩输出，减少网络传输。</li><li>gzip_min_length 1k ： 设置允许压缩的页面最小字节数，页面字节数从header头得content-length中进行获取。默认值是20。建议设置成大于1k的字节数，小于1k可能会越压越大。</li><li>gzip_buffers 4 16k ： 设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。4 16k代表以16k为单位，安装原始数据大小以16k为单位的4倍申请内存。</li><li>gzip_http_version 1.0 ： 用于识别 http 协议的版本，早期的浏览器不支持 Gzip 压缩，用户就会看到乱码，所以为了支持前期版本加上了这个选项，如果你用了 Nginx 的反向代理并期望也启用 Gzip 压缩的话，由于末端通信是 http/1.0，故请设置为 1.0。</li><li>gzip_comp_level 6 ： gzip压缩比，1压缩比最小处理速度最快，9压缩比最大但处理速度最慢(传输快但比较消耗cpu)</li><li>gzip_types ：匹配mime类型进行压缩，无论是否指定,”text/html”类型总是会被压缩的。</li><li>gzip_proxied any ： Nginx作为反向代理的时候启用，决定开启或者关闭后端服务器返回的结果是否压缩，匹配的前提是后端服务器必须要返回包含”Via”的 header头。</li><li>gzip_vary on ： 和http头有关系，会在响应头加个 Vary: Accept-Encoding ，可以让前端的缓存服务器缓存经过gzip压缩的页面，例如，用Squid缓存经过Nginx压缩的数据。</li></ul><h4 id="2-2-3-server虚拟主机"><a href="#2-2-3-server虚拟主机" class="headerlink" title="2.2.3 server虚拟主机"></a>2.2.3 server虚拟主机</h4><p>http服务上支持若干虚拟主机。每个虚拟主机一个对应的server配置项，配置项里面包含该虚拟主机相关的配置。在提供mail服务的代理时，也可以建立若干server。每个server通过监听地址或端口来区分。</p><ul><li><code>listen</code><br>监听端口，默认80，小于1024的要以root启动。可以为<code>listen *:80</code>、<code>listen 127.0.0.1:80</code>等形式。</li><li><code>server_name</code><br>服务器名，如<code>localhost</code>、<code>www.example.com</code>，可以通过正则匹配。</li></ul><p><strong>模块http_stream</strong><br>这个模块通过一个简单的调度算法来实现客户端IP到后端服务器的负载均衡，<code>upstream</code>后接负载均衡器的名字，后端realserver以 <code>host:port options;</code> 方式组织在 {} 中。如果后端被代理的只有一台，也可以直接写在 proxy_pass 。</p><h4 id="2-2-4-location"><a href="#2-2-4-location" class="headerlink" title="2.2.4 location"></a>2.2.4 location</h4><p>http服务中，某些特定的URL对应的一系列配置项。</p><ul><li><code>root /var/www/html</code><br>定义服务器的默认网站根目录位置。如果<code>location</code>URL匹配的是子目录或文件，<code>root</code>没什么作用，一般放在<code>server</code>指令里面或<code>/</code>下。</li><li><code>index index.jsp index.html index.htm</code><br>定义路径下默认访问的文件名，一般跟着<code>root</code>放</li><li><code>proxy_pass http:/backend</code><br>请求转向backend定义的服务器列表，即反向代理，对应<code>upstream</code>负载均衡器。也可以<code>proxy_pass http://ip:port</code>。</li><li><code>proxy_redirect off;</code><br><code>proxy_set_header Host $host;</code><br><code>proxy_set_header X-Real-IP $remote_addr;</code><br><code>proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</code><br>这四个暂且这样设，如果深究的话，每一个都涉及到很复杂的内容，也将通过另一篇文章来解读。</li></ul><p>关于location匹配规则的写法，可以说尤为关键且基础的，参考文章 <a href="http://seanlook.com/2015/05/17/nginx-location-rewrite/" target="_blank" rel="noopener">nginx配置location总结及rewrite规则写法</a>;</p><h4 id="2-3-其它"><a href="#2-3-其它" class="headerlink" title="2.3 其它"></a>2.3 其它</h4><h4 id="2-3-1-访问控制-allow-deny"><a href="#2-3-1-访问控制-allow-deny" class="headerlink" title="2.3.1 访问控制 allow/deny"></a>2.3.1 访问控制 allow/deny</h4><p>Nginx 的访问控制模块默认就会安装，而且写法也非常简单，可以分别有多个allow,deny，允许或禁止某个ip或ip段访问，依次满足任何一个规则就停止往下匹配。如：</p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attribute">location</span> /nginx-status &#123;<br>  <span class="hljs-attribute">stub_status</span> <span class="hljs-literal">on</span>;<br>  <span class="hljs-attribute">access_log</span> <span class="hljs-literal">off</span>;<br><span class="hljs-comment">#  auth_basic   "NginxStatus";</span><br><span class="hljs-comment">#  auth_basic_user_file   /usr/local/nginx-1.6/htpasswd;</span><br>  <span class="hljs-attribute">allow</span> <span class="hljs-number">192.168.10.100</span>;<br>  <span class="hljs-attribute">allow</span> <span class="hljs-number">172.29.73.0</span>/<span class="hljs-number">24</span>;<br>  <span class="hljs-attribute">deny</span> all;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们也常用 httpd-devel 工具的 htpasswd 来为访问的路径设置登录密码：</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-comment"># htpasswd -c htpasswd admin</span><br>New passwd:<br>Re-type new password:<br>Adding password <span class="hljs-keyword">for</span><span class="hljs-built_in"> user </span>admin<br><span class="hljs-comment"># htpasswd htpasswd admin    //修改admin密码</span><br><span class="hljs-comment"># htpasswd htpasswd sean    //多添加一个认证用户</span><br></code></pre></div></td></tr></table></figure><p>这样就生成了默认使用CRYPT加密的密码文件。打开上面nginx-status的两行注释，重启nginx生效。</p><h4 id="2-3-2-列出目录-autoindex"><a href="#2-3-2-列出目录-autoindex" class="headerlink" title="2.3.2 列出目录 autoindex"></a>2.3.2 列出目录 autoindex</h4><p>Nginx默认是不允许列出整个目录的。如需此功能，打开nginx.conf文件，在location，server 或 http段中加入<code>autoindex on;</code>，另外两个参数最好也加上去:</p><ul><li><code>autoindex_exact_size off;</code> 默认为on，显示出文件的确切大小，单位是bytes。改为off后，显示出文件的大概大小，单位是kB或者MB或者GB</li><li><code>autoindex_localtime on;</code><br>默认为off，显示的文件时间为GMT时间。改为on后，显示的文件时间为文件的服务器时间</li></ul><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attribute">location</span> /images &#123;<br>  <span class="hljs-attribute">root</span>   /var/www/nginx-default/images;<br>  <span class="hljs-attribute">autoindex</span> <span class="hljs-literal">on</span>;<br>  <span class="hljs-attribute">autoindex_exact_size</span> <span class="hljs-literal">off</span>;<br>  <span class="hljs-attribute">autoindex_localtime</span> <span class="hljs-literal">on</span>;<br>  &#125;<br></code></pre></div></td></tr></table></figure><p><strong>参考</strong></p><ul><li><a href="http://liuqunying.blog.51cto.com/3984207/1420556" target="_blank" rel="noopener">http://liuqunying.blog.51cto.com/3984207/1420556</a></li><li><a href="http://nginx.org/en/docs/ngx_core_module.html#worker_cpu_affinity" target="_blank" rel="noopener">http://nginx.org/en/docs/ngx_core_module.html#worker_cpu_affinity</a></li><li><a href="http://wiki.nginx.org/HttpCoreModule#sendfile" target="_blank" rel="noopener">http://wiki.nginx.org/HttpCoreModule#sendfile</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NetworkManager command line tool</title>
    <link href="/2017/03/07/NetworkManager-command-line-tool/"/>
    <url>/2017/03/07/NetworkManager-command-line-tool/</url>
    
    <content type="html"><![CDATA[<p>NetworkManager command line tool</p><a id="more"></a><div class="hljs code-wrapper"><pre><code>nmcli nmcli [ OPTIONS ] OBJECT { COMMAND | help }    要得到系统中所有接口的地址信息        ip addr show    检索与已连接的接口相关的数据包统计        ip -s link show eno16777736         ip route     分析主机/网站路径        tracepath linxu.com     仅显示当前活动的连接。        nmcli device status    查看新连接的配置信息：        nmcli -p connection show NEW    更新启用连接：            nmcli connection up eno1            nmcli con reload启动/停止 网络接口    使用下列命令停止某个接口：        nmcli device disconnect eno16777736    下列命令用来启动接口：        nmcli device connect eno16777736add    找出有多少连接服务于多少设备        nmcli connection show         //nmcli connection show eno1    得到网络设备状态        nmcli connection status     使用“dhcp”创建新的连接        nmcli connection add con-name &quot;dhcp&quot; type ethernet ifname eno16777736             connection add – 添加新的连接            con-name – 连接名            type – 设备类型            ifname – 接口名            autoconnect no – 禁止开机自动启动            ipv4.method manual | dhcp 静态IP或DHCP获取    添加静态IP的以太网连接        nmcli connection add type ethernet con-name NAME_OF_CONNECTION ifname interface-name ip4 IP_ADDRESS gw4 GW_ADDRESS        nmcli connection add type ethernet con-name NEW ifname eno16777736 ip4 192.168.1.141 gw4 192.168.1.1                            不通过dhcp分配IP，使用“static”添加地址                nmcli connection add con-name &quot;static&quot; ifname eno16777736 autoconnect no type ethernet ip4 192.168.1.240 gw4 192.168.1.1        增加一个使用 DHCP 的新连接        nmcli connection add type ethernet con-name NEW_DHCP ifname eno16777736</code></pre></div><p>​<br>​<br>    modify<br>        添加DNS设置到静态连接中<br>            nmcli connection modify “static” ipv4.dns 202.131.124.4<br>             添加更多的DNS<br>                 nmcli connection modify “static” +ipv4.dns 8.8.8.8<br>                     注意：要使用额外的+符号，并且要是+ipv4.dns，而不是ip4.dns。</p><div class="hljs code-wrapper"><pre><code>    添加一个额外的ip地址         nmcli connection modify &quot;static&quot; +ipv4.addresses 192.168.200.1/24    使用下列命令设置DNS服务器：        nmcli connection modify NEW ipv4.dns &quot;8.8.8.8 8.8.4.4&quot;    修改IP地址是静态还是DHCP//  manual为静态none        nmcli con mod IF-NAME ipv4.method manual | dhcpdel    删除连接        nmcli connection del NEW图形工具         nm-connection-editor         nmtui    改回传统命名方式7    (1) 编辑/etc/default/grub配置文件        GRUB_CMDLINE_LINUX=&quot;net.ifnames=0 rhgb quiet&quot;或：&quot;修改/boot/grub2/grub.cfg| biosdevname=0&quot;      (2) 为grub2生成其配置文件        grub2-mkconfig -o /boot/grub2.cfg    (3) 重启系统                        Centos6 改网卡名                /etc/undev/rules.d/70-persistent-net.rulescd                #cd /etc/undev/rules.d/                #vim 70-persistent-net.rules  改name 即可                #reboot    上面只是对于nmcli命令的简单应用，更多的用法可以参看NetworkManager(8), nmcli(1), nmcli-examples(5), NetworkManager.conf(5) 几个的man手册。    centos6改主机名        1.临时修改主机名            hostname cen7        2.永久修改主机名            vi /etc/sysconfig/network            HOSTNAME=JJ        3.             sysctl kernel.hostname=hadoop        4\/etc/hosts            127.0.0.1              localhost.localdomain                localhost.localdomain 是主机名(hostname)，也就是你待修改的。localhost 是主机名的别名（alias），它会出现在Konsole的提示符下。将第二项修改为你的主机名，第三项可选。                    #/etc/sysconfig/network网卡/etc/sysconfig/network-scripts/网卡名                    #/etc/udev/rules.d/70-persistent-net.rules                    #/etc/resolv.conf    centos7 主机名        hostnamectl set-hostname NAME[该主机名                --static 静态                --transient 瞬态                --pretty 灵活            hostnaemctl --transient set-hostnameiproute2    # net-tools    $iproute2    显示所有已连接的网络接口        # ip link show             $ifconfig -a     Assign a IP Address to Specific Interface        # ip addr add 10.0.0.1 dev eth1        # ip addr add 192.168.0.100/24 boradcast 192.168.0.12            +为自动计算            $ifconfig eth1 10.0.0.1/24             $ifconfig eth0:1 192.168.10.10 netmask 255.255.255.0 gw 172.20.0.1 up                $ip addr list dev eth0     Check an IP Address        # ip addr show        # ip -6 addr show dev eth1        # ip addr show dev eth1             $ifconfig eth1     Remove an IP Address        #ip addr del 192.168.50.5/24 dev eth1        #        ifconfig eth1:1 down #清除别名            $ifconfig eth1 0 //移除而言，除了给接口分配全0地址外。    为网络接口分配IPv6地址        #ip -6 addr add 2002:0db5:0:f102::1/64 dev eth1            $ifconfig eth1 inet6 add 2002:0db5:0:f102::1/647    添加别名        ip addr add 192.168.0.13/24 dev etho label eth0:0    移除网络设备的IPv6地址        #ip -6 addr del 2002:0db5:0:f102::1/64 dev eth1            $ifconfig eth1 inet6 del 2002:0db5:0:f102::1/64    Enable Network Interface        # ip link set eth1 up // 开启网络接口        # ip link set eth1 down                    $sudo ifconfig eth1 up                    $sudo ifconfig eth1 down     Check Route Table?        # ip route show    Add Static Route        # ip route add 10.10.20.0/24 via 192.168.50.100 dev eth0        # ip route add 192.168.0.100 dev eth0                        $route add -host 172.18.0.100 dev eth0    Remove Static Route        # ip route add 172.16.32.0/24 via 192.168.1.1 dev eth0        # ip route del 172.16.32.0/24 \            $route add -net 172.16.32.0/24 gw 192.168.1.1 dev eth0            $route del -net 172.16.32.0/24      Add Persistence Static Routes         //etc/sysconfig/network-scripts/route-eth0              //default route-eth0 file will not be there         # vi /etc/sysconfig/network-scripts/route-eth0            10.10.20.0/24 via 192.168.50.100 dev eth0            For Ubuntu/Debian/Linux Mint                $ sudo vi /etc/network/interfaces                        auto eth0                        iface eth0 inet static                        address 192.168.50.2                        netmask 255.255.255.0                        gateway 192.168.50.100                        ipadd_start=                         ipadd_end=                        #########{Static Route}###########            永久添加ip 别名                如果要永久添加ip别名，则可以在/etc/sysconfig/network-scripts/ 下添加别名配置文件                配置文件名：ifcfg-eth0:0                内容：                    DEVICE=eth0:0                    IPADDR=192.168.1.111                    PREFIX=24                    ONPARENT=yes             ifup eth0                                                up ip route add 10.10.20.0/24 via 192.168.50.100 dev eth0    Add Default Gateway        #ip route add default via 192.168.50.100        #ip route add default via 192.168.1.2 dev eth0        #ip route replace default via 192.168.1.2 dev eth0 #删除。            $route add default gw 192.168.1.2 eth0            $route del default gw 192.168.1.1 eth0     ‘    临时改变接口MAC地址            #ip link set dev eth1 address 08:00:27:75:2a:67            $ifconfig eth1 hw ether 08:00:27:75:2a:66     查看ARP表            # ip neigh              $arp -an     添加或删除静态ARP项        #ip neigh add 192.168.1.100 lladdr 00:0c:29:c0:5a:ef dev eth0        #ip neigh del 192.168.1.100 dev eth0             $arp -s 192.168.1.100 00:0c:29:c0:5a:ef            $arp -d 192.168.1.100     添加、删除或查看多播地址            # ip maddr add 33:44:00:00:00:01 dev eth0            # ip maddr del 33:44:00:00:00:01 dev eth0             # ip maddr list dev eth0                 $ipmaddr add 33:44:00:00:00:01 dev eth0                $ipmaddr del 33:44:00:00:00:01 dev eth0                $ipmaddr show dev eth0                $netstat -g     用包转发：            # echo &quot;1&quot; &gt; /proc/sys/net/ipv4/ip_forward</code></pre></div><p>ip link set 命令组 （接口硬件操作相关）<br>ip -s -s link show                                  # 显示所有接口详细信息<br>ip -s -s link show eth1.11                          # 显示单独接口信息<br>ip link set dev eth1 up                             # 启动设备，相当于 ifconfig eth1 up<br>ip link set dev eth1 down                           # 停止设备，相当于 ifconfig eth1 down<br>ip link set dev eth1 txqueuelen 100                 # 改变设备传输队列长度<br>ip link set dev eth1 mtu 1200                       # 改变 MTU 长度<br>ip link set dev eth1 address 00:00:00:AA:BB:CC      # 改变 MAC 地址<br>ip link set dev eth1 name myeth                     # 接口名变更</p><p>ip neighbor 命令组 （ARP地址表相关）\\</p><p>ip neighbor show                                                # 查看 ARP 表<br>ip neighbor add 10.1.1.1 lladdr 0:0:0:0:0:1 dev eth0 nud permit # 添加一条 ARP 相关表项<br>ip neighbor change 10.1.1.1 dev eth0 nud reachable              # 修改相关表项<br>ip neighbor del 10.1.1.1 dev eth0                               # 删除一条表项<br>ip neighbor flush                                               # 清除整个 ARP 表</p><p>ip -6 route add 2000:ff::/80 via 2000:ff04::1 dev eth1.11   # 添加一条路由<br>ip -6 route add default via 2000:ff04::1 dev eth1.11        # 添加默认路由<br>ip -6 route show                                            # 查看完整路由表<br>ip -6 route show dev eth1.11                                # 查看指定接口路由项<br>ip -6 route del 2000:ff04::/64                              # 删除所有相关路由表<br>ip -6 route del 2000:ff04::/64 dev eth1.11                  # 删除相关接口上的路由表<br>ip -6 route change 2000:ff04::/64 dev eth1.12               # 修改路由表项<br>ip route add nat 192.168.10.100 via 202.6.10.1              # 添加 NAT 路由项，将 192 地址转换成 202 地址<br>ip route replace default equalize nexthop via 211.139.218.145 dev eth0 weight 1 nexthop via 211.139.218.145 dev eth1 weight 1   # 添加负载均衡路由</p>]]></content>
    
    
    
    <tags>
      
      <tag>Network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>26-Linux-Common-Command</title>
    <link href="/2016/12/27/26-Linux-Common-Commands/"/>
    <url>/2016/12/27/26-Linux-Common-Commands/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/shell/26-Linux-Common-Commands.png" srcset="/img/loading.gif" lazyload alt></p><p>当你进入了 Linux 的世界，在下载、安装 了某个 Linux 发行版，体验了 Linux 桌面并安装了一些你喜爱和需要的 软件 之后，应该去了解下 Linux 真正的魅力所在：<strong>命令行</strong> 。每一个命令其实就是一个程序，借助这些命令，我们可以办到非常多的事情。下面将会为大家介绍一下几个常用的命令。</p><a id="more"></a><ul><li>如何寻求帮助？<ul><li><a href="http://webres.wang/26-linux-common-commands/#man" target="_blank" rel="noopener">man</a></li><li><a href="http://webres.wang/26-linux-common-commands/#info" target="_blank" rel="noopener">info</a></li><li><a href="http://webres.wang/26-linux-common-commands/#command_help" target="_blank" rel="noopener">help</a></li></ul></li><li>如何简单操作？<ul><li><a href="http://webres.wang/26-linux-common-commands/#cursor" target="_blank" rel="noopener">光标</a></li><li><a href="http://webres.wang/26-linux-common-commands/#tab" target="_blank" rel="noopener">Tab 补全</a></li></ul></li><li>常用命令<ul><li><a href="http://webres.wang/26-linux-common-commands/#cd" target="_blank" rel="noopener">cd</a></li><li><a href="http://webres.wang/26-linux-common-commands/#ls" target="_blank" rel="noopener">ls</a></li><li><a href="http://webres.wang/26-linux-common-commands/#pwd" target="_blank" rel="noopener">pwd</a></li><li><a href="http://webres.wang/26-linux-common-commands/#mkdir" target="_blank" rel="noopener">mkdir</a></li><li><a href="http://webres.wang/26-linux-common-commands/#rm" target="_blank" rel="noopener">rm</a></li><li><a href="http://webres.wang/26-linux-common-commands/#cp" target="_blank" rel="noopener">cp</a></li><li><a href="http://webres.wang/26-linux-common-commands/#mv" target="_blank" rel="noopener">mv</a></li><li><a href="http://webres.wang/26-linux-common-commands/#cat" target="_blank" rel="noopener">cat</a></li><li><a href="http://webres.wang/26-linux-common-commands/#more" target="_blank" rel="noopener">more</a></li><li><a href="http://webres.wang/26-linux-common-commands/#less" target="_blank" rel="noopener">less</a></li><li><a href="http://webres.wang/26-linux-common-commands/#nano" target="_blank" rel="noopener">nano</a></li><li><a href="http://webres.wang/26-linux-common-commands/#reboot" target="_blank" rel="noopener">reboot</a></li><li><a href="http://webres.wang/26-linux-common-commands/#poweroff" target="_blank" rel="noopener">poweroff</a></li><li><a href="http://webres.wang/26-linux-common-commands/#ping" target="_blank" rel="noopener">ping</a></li><li><a href="http://webres.wang/26-linux-common-commands/#grep" target="_blank" rel="noopener">grep</a></li><li><a href="http://webres.wang/26-linux-common-commands/#mount" target="_blank" rel="noopener">mount</a></li><li><a href="http://webres.wang/26-linux-common-commands/#umount" target="_blank" rel="noopener">umount</a></li><li><a href="http://webres.wang/26-linux-common-commands/#tar" target="_blank" rel="noopener">tar</a></li><li><a href="http://webres.wang/26-linux-common-commands/#ln" target="_blank" rel="noopener">ln</a></li><li><a href="http://webres.wang/26-linux-common-commands/#chown" target="_blank" rel="noopener">chown</a></li><li><a href="http://webres.wang/26-linux-common-commands/#chmod" target="_blank" rel="noopener">chmod</a></li><li><a href="http://webres.wang/26-linux-common-commands/#useradd" target="_blank" rel="noopener">useradd</a></li><li><a href="http://webres.wang/26-linux-common-commands/#passwd" target="_blank" rel="noopener">passwd</a></li><li><a href="http://webres.wang/26-linux-common-commands/#whereis" target="_blank" rel="noopener">whereis</a></li><li><a href="http://webres.wang/26-linux-common-commands/#find" target="_blank" rel="noopener">find</a></li><li><a href="http://webres.wang/26-linux-common-commands/#wget" target="_blank" rel="noopener">wget</a></li></ul></li></ul><h3 id="如何寻求帮助？"><a href="#如何寻求帮助？" class="headerlink" title="如何寻求帮助？"></a>如何寻求帮助？</h3><p>在 Linux 下遇到问题，最重要的是要自己寻求帮助，下面是三种寻求帮助的方法。</p><h4 id="man"><a href="#man" class="headerlink" title="man"></a>man</h4><p><code>man</code> 是 Linux 的系统手册，即 <code>manual</code> 。因为大多数程序都会自带手册，所以可以通过 <code>man</code> 命令获取帮助。执行以后，在 <strong>man page</strong> 页面中按 <code>q</code> 退出。</p><p>获取 <code>ls</code> 的帮助</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">$</span><span class="bash"> man ls</span><br></code></pre></div></td></tr></table></figure><p>查看有多少（针对不同方面的）同名的手册</p><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">$ <span class="hljs-keyword">man</span> -f <span class="hljs-keyword">ls</span><br><span class="hljs-keyword">ls</span> (1)               - <span class="hljs-keyword">list</span> directory contents<br><span class="hljs-keyword">ls</span> (1p)              - <span class="hljs-keyword">list</span> directory contents<br></code></pre></div></td></tr></table></figure><p>查看特定的手册</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">$</span><span class="bash"> man 1p ls</span><br></code></pre></div></td></tr></table></figure><h4 id="info"><a href="#info" class="headerlink" title="info"></a>info</h4><p>与 <code>man</code> 不同的是，可以像浏览网页一样在各个节点中跳转。</p><p>从文档首页开始浏览</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">$</span><span class="bash"> info</span><br></code></pre></div></td></tr></table></figure><p>获取特定程序的帮助</p><figure class="highlight fortran"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">$ info <span class="hljs-function"><span class="hljs-keyword">program</span></span><br></code></pre></div></td></tr></table></figure><h4 id="help"><a href="#help" class="headerlink" title="help"></a>help</h4><p>除了上面的两种方法外，还有一种简单使用的方法，那就是 <code>--help</code> 参数，一般程序都会有这个参数，会输出最简单有用的介绍。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">$</span><span class="bash"> man --<span class="hljs-built_in">help</span>       <span class="hljs-comment">### 获取 man 的帮助</span></span><br><span class="hljs-meta">$</span><span class="bash"> info --<span class="hljs-built_in">help</span>      <span class="hljs-comment">### 获取 info 的帮助</span></span><br></code></pre></div></td></tr></table></figure><h2 id="如何简单操作？"><a href="#如何简单操作？" class="headerlink" title="如何简单操作？"></a>如何简单操作？</h2><p>在 <code>Terminal(终端)</code> 中，有许多操作技巧，这里就介绍几个简单的。</p><h4 id="光标"><a href="#光标" class="headerlink" title="光标"></a>光标</h4><figure class="highlight haml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">-<span class="ruby"> up(方向键上)      可以调出输入历史执行记录，快速执行命令<br></span>-<span class="ruby"> down(方向键下)    配合 up 选择历史执行记录<br></span>-<span class="ruby"> Home             移动光标到本行开头<br></span>-<span class="ruby"> End              移动光标到本行结尾<br></span>-<span class="ruby"> PgUp             向上翻页<br></span>-<span class="ruby"> PaDN             向下翻页<br></span>-<span class="ruby"> ctrl + c         终止当前程序</span><br></code></pre></div></td></tr></table></figure><h4 id="Tab-补全"><a href="#Tab-补全" class="headerlink" title="Tab 补全"></a>Tab 补全</h4><p><code>Tab</code> 补全是非常有用的一个功能，可以用来自动补全命令或文件名，省时准确。</p><ul><li>未输入状态下连按<strong>两次</strong> <code>Tab</code> 列出所有可用命令</li><li>已输入部分命令名或文件名，按 <code>Tab</code> 进行自动补全，多用你就肯定会喜欢的了。</li></ul><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h4 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h4><p><code>cd</code> 是打开某个路径的命令，也就是打开某个文件夹，并跳转到该处。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> path      <span class="hljs-comment">### path 为你要打开的路径。</span></span><br></code></pre></div></td></tr></table></figure><p>其中 path 有绝对路径和相对路径之分，绝对路径强调从 <code>/</code> 起，一直到所在路径。相对路径则，相对于当前路径来说，假设当前家目录有<code>etc</code> 文件夹（绝对路径应为 <code>/home/username/etc</code>），如果直接 <code>cd etc</code> 则进入此文件夹，但若是 <code>cd /etc/</code> 则是进入系统 <code>etc</code> ，多琢磨一下就可以理解了。另外在 Linux 中， <code>.</code> 代表当前目录， <code>..</code> 代表上级目录，因此返回上级目录可以 <code>cd ..</code> 。</p><h4 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h4><p><code>ls</code> 即 <strong>list</strong> ，列出文件。</p><figure class="highlight clean"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">$ ls       ### 仅列出当前目录可见文件<br>$ ls -l    ### 列出当前目录可见文件详细信息<br>$ ls -hl   ### 列出详细信息并以可读大小显示文件大小<br>$ ls -al   ### 列出所有文件（包括隐藏）的详细信息<br></code></pre></div></td></tr></table></figure><h4 id="注意：-Linux-中-以-开头的文件或文件夹均为隐藏文件或隐藏文件夹。"><a href="#注意：-Linux-中-以-开头的文件或文件夹均为隐藏文件或隐藏文件夹。" class="headerlink" title="注意： Linux 中 以 . 开头的文件或文件夹均为隐藏文件或隐藏文件夹。"></a><strong>注意</strong>： Linux 中 以 <code>.</code> 开头的文件或文件夹均为隐藏文件或隐藏文件夹。</h4><h4 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h4><p><code>pwd</code> 用于返回当前工作目录的名字，为绝对路径名。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">pwd</span></span><br>/home<br></code></pre></div></td></tr></table></figure><h4 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h4><p><code>mkdir</code> 用于新建文件夹。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">$</span><span class="bash"> mkdir folder</span><br><span class="hljs-meta">$</span><span class="bash"> mkdir -p folder/subfolder    <span class="hljs-comment">### -p 参数为当父目录存在时忽略，若不存在则建立，用此参数可建立多级文件夹</span></span><br></code></pre></div></td></tr></table></figure><h4 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h4><p><code>rm</code> 即 <strong>remove</strong> ，删除文件。</p><figure class="highlight clean"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">$ rm filename    ### 删除 filename<br>$ rm -i filename   ### 删除 filename 前提示，若多个文件则每次提示<br>$ rm -rf folder/subfolder/  ### 递归删除 subfolder 下所有文件及文件夹，包括 subfolder 自身<br>$ rm -d folder     ###  删除空文件夹<br></code></pre></div></td></tr></table></figure><h4 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h4><p><code>cp</code> 即 <strong>copy</strong> ，复制文件。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">$</span><span class="bash"> cp <span class="hljs-built_in">source</span> dest            <span class="hljs-comment">### 将 source 复制到 dest</span></span><br><span class="hljs-meta">$</span><span class="bash"> cp folder/*  dest         <span class="hljs-comment">### 将 folder 下所有文件(不含子文件夹中的文件)复制到 dest</span></span><br><span class="hljs-meta">$</span><span class="bash"> cp -r folder  dest        <span class="hljs-comment">### 将 folder 下所有文件（包含子文件夹中的所有文件）复制到 dest</span></span><br></code></pre></div></td></tr></table></figure><h4 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h4><p><code>mv</code> 即 <strong>move</strong> ，移动文件。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">$</span><span class="bash"> mv <span class="hljs-built_in">source</span>  folder        <span class="hljs-comment">### 将 source 移动到 folder 下，完成后则为  folder/source</span></span><br><span class="hljs-meta">$</span><span class="bash"> mv -i <span class="hljs-built_in">source</span> folder      <span class="hljs-comment">### 在移动时，若文件已存在则提示 **是否覆盖** </span></span><br><span class="hljs-meta">$</span><span class="bash"> mv <span class="hljs-built_in">source</span> dest           <span class="hljs-comment">### 在 dest 不为目录的前提下，重命名 source 为 dest</span></span><br></code></pre></div></td></tr></table></figure><h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h4><p><code>cat</code> 用于输出文件内容到 Terminal 。</p><figure class="highlight clean"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">$ cat /etc/locale.gen     ### 输出 locale.gen 的内容 <br>$ cat -n /etc/locale.gen  ### 输出 locale.gen 的内容并显示行号<br></code></pre></div></td></tr></table></figure><h4 id="more"><a href="#more" class="headerlink" title="more"></a>more</h4><p><code>more</code> 与 <code>cat</code> 相似，都可以查看文件内容，所不同的是，当一个文档太长时， <code>cat</code> 只能展示最后布满屏幕的内容，前面的内容是不可见的。这时候可用 <code>more</code> 逐行显示内容。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">$</span><span class="bash"> more /etc/locale.gen</span><br><span class="hljs-meta">$</span><span class="bash"> more +100 /etc/locale.gen       <span class="hljs-comment">### 从 100 行开始显示</span></span><br></code></pre></div></td></tr></table></figure><h4 id="less"><a href="#less" class="headerlink" title="less"></a>less</h4><p><code>less</code> 与 <code>more</code> 相似，不过 <code>less</code> 支持上下滚动查看内容，而 <code>more</code> 只支持逐行显示。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">$</span><span class="bash"> less /etc/locale.gen</span><br><span class="hljs-meta">$</span><span class="bash"> less +100 /etc/locale.gen</span><br></code></pre></div></td></tr></table></figure><h4 id="nano"><a href="#nano" class="headerlink" title="nano"></a>nano</h4><p><code>nano</code> 是一个简单实用的文本编辑器，入门简单。</p><figure class="highlight clean"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">$ nano  filename       ### 编辑 filename 文件，若文件不存在，则新打开一个文件，若退出时保存，则创建该文件<br></code></pre></div></td></tr></table></figure><p>编辑完后，<code>ctrl + X</code> 提示是否保存，按 <code>y</code> 确定保存即可。</p><h4 id="注意：在使用过程中可用-ctrl-G-获取帮助。"><a href="#注意：在使用过程中可用-ctrl-G-获取帮助。" class="headerlink" title="注意：在使用过程中可用 ctrl + G 获取帮助。"></a><strong>注意</strong>：在使用过程中可用 <code>ctrl + G</code> 获取帮助。</h4><h4 id="reboot"><a href="#reboot" class="headerlink" title="reboot"></a>reboot</h4><p><code>reboot</code> 为重启命令。</p><figure class="highlight clean"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"># reboot         ### <span class="hljs-string">'$'</span> 和 <span class="hljs-string">'#'</span> 的区别在于 <span class="hljs-string">'$'</span> 普通用户即可执行，而 <span class="hljs-string">'#'</span> 为 root 用户才可执行，或普通用户使用 <span class="hljs-string">'sudo'</span><br></code></pre></div></td></tr></table></figure><h4 id="poweroff"><a href="#poweroff" class="headerlink" title="poweroff"></a>poweroff</h4><p><code>poweroff</code> 为关机命令。</p><figure class="highlight clean"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"># poweroff  ### 马上关机<br></code></pre></div></td></tr></table></figure><h4 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h4><p><code>ping</code> 主要用于测试网络连通，通过对目标机器发送数据包来测试两台主机是否连通，及延时情况。</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">$<span class="hljs-built_in"> ping </span>locez.com    ### 通过域名 ping，若<span class="hljs-built_in"> DNS </span>未设置好，可能无法<span class="hljs-built_in"> ping </span>通<br>$<span class="hljs-built_in"> ping </span>linux.cn<span class="hljs-built_in"><br>PING </span>linux.cn (211.157.2.94) 56(84) bytes of data.<br>64 bytes <span class="hljs-keyword">from</span> 211.157.2.94.static.in-addr.arpa (211.157.2.94): <span class="hljs-attribute">icmp_seq</span>=1 <span class="hljs-attribute">ttl</span>=53 <span class="hljs-attribute">time</span>=41.5 ms<br>64 bytes <span class="hljs-keyword">from</span> 211.157.2.94.static.in-addr.arpa (211.157.2.94): <span class="hljs-attribute">icmp_seq</span>=2 <span class="hljs-attribute">ttl</span>=53 <span class="hljs-attribute">time</span>=40.4 ms<br>64 bytes <span class="hljs-keyword">from</span> 211.157.2.94.static.in-addr.arpa (211.157.2.94): <span class="hljs-attribute">icmp_seq</span>=3 <span class="hljs-attribute">ttl</span>=53 <span class="hljs-attribute">time</span>=41.9 ms<br>^C<br>--- linux.cn<span class="hljs-built_in"> ping </span>statistics ---<br>3 packets transmitted, 3 received, 0% packet loss, time 2002ms<br>rtt min/avg/max/mdev = 40.406/41.287/41.931/0.644 ms<br><br>$<span class="hljs-built_in"> ping </span>211.157.2.94   ### 通过<span class="hljs-built_in"> IP </span>地址<span class="hljs-built_in"> ping </span>，若无法<span class="hljs-built_in"> ping </span>通可能是网络连接出现问题<br></code></pre></div></td></tr></table></figure><h4 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h4><p><code>grep</code> 主要用于返回匹配的项目，支持正则表达式。</p><figure class="highlight clean"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">$ grep PATTERN filename      ### 返回所有含有 PATTERN 的行<br>$ grep zh_CN /etc/locale.gen ### 返回所有含 zh_CN 的行<br></code></pre></div></td></tr></table></figure><h4 id="mount"><a href="#mount" class="headerlink" title="mount"></a>mount</h4><p><code>mount</code> 用于挂载一个文件系统，需要 <code>root</code> 用户执行。一个磁盘可分为若干个分区，在分区上面可以创建文件系统，而挂载点则是提供一个访问的入口，将一个分区的文件系统挂载到某个目录中，称这个目录为挂载点，并且可以通过这个挂载点访问该文件系统中的内容。</p><p>例如一块硬盘在 Linux 中表示为 <code>/dev/sda</code> 那么它上面的分区应该表示为 <code>/dev/sda1</code>、<code>/dev/sda2</code> 。</p><figure class="highlight clean"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"># mount                       ### 输出系统目前的挂载信息<br># mount /dev/sda1 /mnt        ### 将 sda1 挂载到 /mnt 中<br># cd /mnt                     ### 直接通过 /mnt 访问内容<br># mount -o remount,rw  /mnt   ### 重新挂载 sda1 到 /mnt 并设置为 可读写 <br># mount -a                    ### 挂载 fstab 文件配置好的文件系统<br></code></pre></div></td></tr></table></figure><h4 id="umount"><a href="#umount" class="headerlink" title="umount"></a>umount</h4><p><code>umount</code> 与 <code>moung</code> 相反，是卸载一个挂载点，即取消该入口。</p><figure class="highlight clean"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"># umount /mnt                 ### 卸载 /mnt 这个挂载点的文件系统<br># umount -a                   ### 卸载所有已挂载的文件系统<br></code></pre></div></td></tr></table></figure><h4 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h4><p><code>tar</code> 主要用于创建归档文件，和解压归档文件，其本身是没有压缩功能的，但可以调用 <code>gzip</code> 、 <code>bzip2</code> 进行压缩处理。<br>参数解释：</p><ul><li><code>-c</code> 创建归档</li><li><code>-x</code> 解压归档</li><li><code>-v</code> 显示处理过程</li><li><code>-f</code> 目标文件，其后必须紧跟 目标文件</li><li><code>-j</code> 调用 <code>bzip2</code> 进行解压缩</li><li><code>-z</code> 调用 <code>gzip</code> 进行解压缩</li><li><code>-t</code> 列出归档中的文件</li></ul><figure class="highlight clean"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">$ tar -cvf filename.tar .       ### 将当前目录所有文件归档，但不压缩，注意后面有个 ’.‘ ，不可省略，代表当前目录的意思 <br>$ tar -xvf filename.tar         ### 解压 filename.tar 到当前文件夹<br>$ tar -cvjf filename.tar.bz2 .  ### 使用 bzip2 压缩<br>$ tar -xvjf  filename.tar.bz2   ### 解压 filename.tar.bz2 到当前文件夹<br>$ tar -cvzf filename.tar.gz     ### 使用 gzip  压缩<br>$ tar -xvzf filename.tar.gz     ### 解压 filename.tar.gz 到当前文件夹<br>$ tar -tf   filename            ### 只查看 filename 归档中的文件，不解压<br></code></pre></div></td></tr></table></figure><h4 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h4><p><code>ln</code> 主要用于在两个文件中创建链接，链接又分为 <code>Hard Links</code> (硬链接)和 <code>Symbolic Links</code> (符号链接或软链接)，其中默认为创建<strong>硬链接</strong>，使用 <code>-s</code> 参数指定创建软链接。</p><ul><li>硬链接主要是增加一个文件的链接数，只要该文件的链接数不为 <code>0</code> ，该文件就不会被物理删除，所以删除一个具有多个硬链接数的文件，必须删除所有它的硬链接才可删除。</li><li>软链接简单来说是为文件创建了一个类似快捷方式的东西，通过该链接可以访问文件，修改文件，但不会增加该文件的链接数，删除一个软链接并不会删除源文件，即使源文件被删除，软链接也存在，当重新创建一个同名的源文件，该软链接则指向新创建的文件。</li><li>硬链接只可链接两个文件，不可链接目录，而软链接可链接目录，所以软链接是非常灵活的。</li></ul><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">$</span><span class="bash"> ln <span class="hljs-built_in">source</span> dest       <span class="hljs-comment">### 为 source 创建一个名为 dest 的硬链接</span></span><br><span class="hljs-meta">$</span><span class="bash"> ln -s <span class="hljs-built_in">source</span> dest    <span class="hljs-comment">### 为 source 创建一个名为 dest 的软链接</span></span><br></code></pre></div></td></tr></table></figure><h4 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h4><p><code>chown</code> 用于改变一个文件的所有者及所在的组。</p><figure class="highlight clean"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"># chown user filename        ### 改变 filename 的所有者为 user<br># chown user:group filename  ### 改变 filename 的所有者为 user，组为 group<br># chown -R root folder      ### 改变 folder 文件夹及其子文件的所有者为 root<br></code></pre></div></td></tr></table></figure><h4 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h4><p><code>chmod</code> 永远更改一个文件的权限，主要有 <strong>读取</strong> 、 <strong>写入</strong> 、 <strong>执行</strong> ，三种权限，其中 <strong>所有者</strong> 、 <strong>用户组</strong> 、 <strong>其他</strong> 各占三个，因此 <code>ls -l</code> 可以看到如下的信息</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">-rwxr--r-- 1 locez<span class="hljs-built_in"> users </span>  154 Aug 30 18:09 filename<br></code></pre></div></td></tr></table></figure><p>其中 <code>r=read</code> ， <code>w=write</code> ， <code>x=execute</code></p><figure class="highlight clean"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"># chmod +x filename        ### 为 user ，group ，others 添加执行权限<br># chmod -x filename        ### 取消 user ， group ，others 的执行权限<br># chmod +w filename        ### 为 user 添加写入权限<br># chmod ugo=rwx filename   ### 设置 user ，group ，others 具有 读取、写入、执行权限<br># chmod ug=rw filename     ### 设置 user ，group 添加 读取、写入权限<br># chmod ugo=--- filename   ### 取消所有权限<br></code></pre></div></td></tr></table></figure><h4 id="useradd"><a href="#useradd" class="headerlink" title="useradd"></a>useradd</h4><p><code>useradd</code> 用于添加一个普通用户。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">#</span><span class="bash"> useradd -m -g users -G audio -s /usr/bin/bash newuser     </span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">## -m 创建 home 目录， -g 所属的主组， -G 指定该用户在哪些附加组， -s 设定默认的 shell ，newuser 为新的用户名</span></span><br></code></pre></div></td></tr></table></figure><h4 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h4><p><code>passwd</code> 用于改变用户登录密码。</p><figure class="highlight clean"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">$ passwd                 ### 不带参数更改当前用户密码<br># passwd newuser       ### 更改上述新建的 newuser 的用户密码<br></code></pre></div></td></tr></table></figure><h4 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h4><p><code>whereis</code> 用于查找文件、手册等。</p><figure class="highlight armasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">$ whereis <span class="hljs-keyword">bash </span><br><span class="hljs-keyword">bash: </span>/usr/<span class="hljs-keyword">bin/bash </span>/etc/<span class="hljs-keyword">bash.bashrc </span>/etc/<span class="hljs-keyword">bash.bash_logout </span>/usr/share/man/man1/<span class="hljs-keyword">bash.1.gz </span>/usr/share/<span class="hljs-meta">info</span>/<span class="hljs-keyword">bash.info.gz<br></span>$ whereis -<span class="hljs-keyword">b </span><span class="hljs-keyword">bash </span>      ### 仅查找 <span class="hljs-keyword">binary<br></span><span class="hljs-keyword">bash: </span>/usr/<span class="hljs-keyword">bin/bash </span>/etc/<span class="hljs-keyword">bash.bashrc </span>/etc/<span class="hljs-keyword">bash.bash_logout<br></span>$ whereis -m <span class="hljs-keyword">bash </span>      ### 仅查找 manual<br><span class="hljs-keyword">bash: </span>/usr/share/man/man1/<span class="hljs-keyword">bash.1.gz </span>/usr/share/<span class="hljs-meta">info</span>/<span class="hljs-keyword">bash.info.gz</span><br></code></pre></div></td></tr></table></figure><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><p><code>find</code> 也用于查找文件，但更为强大，支持正则，并且可将查找结果传递到其他命令。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">$</span><span class="bash"> find . -name PATTERN    <span class="hljs-comment">### 从当前目录查找符合 PATTERN 的文件</span></span><br><span class="hljs-meta">$</span><span class="bash"> find /home -name PATTERN -<span class="hljs-built_in">exec</span> ls -l &#123;&#125; \;  <span class="hljs-comment">### 从 /home 文件查找所有符合 PATTERN 的文件，并交由 ls 输出详细信息</span></span><br></code></pre></div></td></tr></table></figure><blockquote><p>推荐阅读：</p><ul><li>《<a href="http://9iphp.com/linux/126.html" target="_blank" rel="noopener">妈咪，我找到了! — 15个实用的Linux find命令示例</a>》</li><li>《<a href="http://9iphp.com/linux/136.html" target="_blank" rel="noopener">爹地，我找到了!— 15个极好的Linux find命令示例</a>》</li></ul></blockquote><h4 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h4><p><code>wget</code> 是一个下载工具，简单强大。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">$</span><span class="bash"> wget -O newname.md https://github.com/LCTT/TranslateProject/blob/master/README.md     <span class="hljs-comment">###下载 README 文件并重命名为 newname.md</span></span><br><span class="hljs-meta">$</span><span class="bash"> wget -c url     <span class="hljs-comment">### 下载 url 并开启断点续传</span></span><br></code></pre></div></td></tr></table></figure><p>恭喜你，你已经学习了完了26 个基础的 Linux 命令。虽然这里只是一些最基础的命令，但是熟练使用这些命令就踏出了你从一位 Linux 新手成为 Linux 玩家的第一步！</p>]]></content>
    
    
    
    <tags>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nmap和TCPdump</title>
    <link href="/2016/12/13/nmap-and-tcpdump/"/>
    <url>/2016/12/13/nmap-and-tcpdump/</url>
    
    <content type="html"><![CDATA[<p>1、NMap工具**</p><p>主要功能：探测主机是否在线、扫描主机开放端口和嗅探网络服务，用于网络探测和安全扫描。</p><p>NMap支持很多扫描技术，例如：UDP、TCPconnect()、TCPSYN(半开扫描)、ftp代理(bounce攻击)、反向标志、ICMP、FIN、ACK扫描、SYN扫描和null扫描。</p><a id="more"></a><p>命令格式：Nmap [ 扫描类型 ] [ 通用选项 ] { 扫描目标说明 }</p><p><strong>扫描类型:</strong></p><table><thead><tr><th><strong>-sT</strong></th><th>TCP connect()扫描，这是最基本的TCP扫描方式，用来建立一个TCP连接，如果成功则认为目标端口正在监听，否则认为目标端口没有监听程序。这种扫描很容易被检测到，在目标主机的日志中会记录大批的连接请求以及错误信息。</th></tr></thead><tbody><tr><td><strong>-sS</strong></td><td>TCP同 步扫描(TCP SYN)，只向目标发出SYN数据包，如果收到SYN/ACK响应包就认为目标端口正在监听，并立即断开连接；否则认为目标端口没有监听程序。所以这项技 术通常称为半开扫描(half-open)。这项技术最大的好处是，很少有系统能够把这记入系统日志。不过，你需要root权限来定制SYN数据包。</td></tr><tr><td><strong>-sF,-sX,-sN</strong></td><td>秘密FIN数据包扫描、圣诞树(Xmas Tree)、空(Null)扫描模式。这些扫描方式的理论依据是：关闭的端口需要对你的探测包回应RST包，而打开的端口必需忽略有问题的包，通过这种扫描，可间接用于检测防火墙的健壮性。</td></tr><tr><td><strong>-sP</strong></td><td>ping扫描，用ping方式检查网络上哪些主机正在运行。当主机阻塞ICMP  echo请求包是ping扫描是无效的。nmap在任何情况下都会进行ping扫描，只有目标主机处于运行状态，才会进行后续的扫描。</td></tr><tr><td><strong>-sU</strong></td><td>UDP扫描，如果你想知道在某台主机上提供哪些UDP服务，可以使用此选项。</td></tr><tr><td><strong>-sA</strong></td><td>ACK扫描，这项高级的扫描方法通常可以用来穿过防火墙。</td></tr><tr><td><strong>-sW</strong></td><td>滑动窗口扫描，非常类似于ACK的扫描。</td></tr><tr><td><strong>-sR</strong></td><td>RPC扫描，和其它不同的端口扫描方法结合使用。</td></tr><tr><td><strong>-b</strong></td><td>FTP反弹攻击(bounce attack)，连接到防火墙后面的一台FTP服务器做代理，接着进行端口扫描。</td></tr></tbody></table><p><strong>通用选项:</strong></p><table><thead><tr><th><strong>-n</strong></th><th>不做反向DNS解析，以加快扫描速度</th></tr></thead><tbody><tr><td></td><td></td></tr><tr><td><strong>-P0</strong></td><td>在扫描之前，不ping主机；有些网络防火墙可能禁止ICMP请求包，使用这种扫描类型可以跳过ping测试</td></tr><tr><td><strong>-PT</strong></td><td>扫描之前，使用TCP ping确定哪些主机正在运行。</td></tr><tr><td><strong>-PS</strong></td><td>对于root用户，这个选项让nmap使用SYN包而不是ACK包来对目标主机进行扫描。</td></tr><tr><td><strong>-PI</strong></td><td>设置这个选项，让nmap使用真正的ping(ICMP echo请求)来扫描目标主机是否正在运行。</td></tr><tr><td><strong>-PB</strong></td><td>这是默认的ping扫描选项。它使用ACK(-PT)和ICMP(-PI)两种扫描类型并行扫描。如果防火墙能够过滤其中一种包，使用这种方法，你就能够穿过防火墙。</td></tr><tr><td><strong>-O</strong></td><td>这个选项激活对TCP/IP指纹特征(fingerprinting)的扫描，获得远程主机的标志，也就是操作系统类型。</td></tr><tr><td><strong>-I</strong></td><td>打开nmap的反向标志扫描功能。</td></tr><tr><td><strong> -f</strong></td><td>使用碎片IP数据包发送SYN、FIN、XMAS、NULL。包增加包过滤、入侵检测系统的难度，使其无法知道你的企图。</td></tr><tr><td><strong>-v</strong></td><td>强烈推荐使用这个选项，它会给出扫描过程中的详细信息。</td></tr><tr><td><strong>-S <ip></ip></strong></td><td>在一些情况下，nmap可能无法确定你的源地址(nmap会告诉你)。在这种情况使用这个选项给出你的IP地址。</td></tr><tr><td><strong>-g port</strong></td><td>设置扫描的源端口。一些天真的防火墙和包过滤器的规则集允许源端口为DNS(53)或者FTP-DATA(20)的包通过和实现连接。显然，如果攻击者把源端口修改为20或者53，就可以摧毁防火墙的防护。</td></tr><tr><td><strong>-oN</strong></td><td>把扫描结果重定向到一个可读的文件logfilename中。</td></tr><tr><td><strong>-oS</strong></td><td>扫描结果输出到标准输出。</td></tr><tr><td><strong>-A</strong></td><td>打开操作系统探测和版本探测。</td></tr></tbody></table><p><strong>扫描目标:</strong></p><table><thead><tr><th>目标地址</th><th>可以为IP地址，CIRD地址等。如192.168.1.2，222.247.54.5/24</th></tr></thead><tbody><tr><td>-iL filename</td><td>从filename文件中读取扫描的目标。</td></tr><tr><td>-iR</td><td>让nmap自己随机挑选主机进行扫描。</td></tr><tr><td>-p</td><td>端口，这个选项让你选择要进行扫描的端口号的范围。可使用逗号分隔多个端口，减号连接一个端口范围，在列表前指定T：表示TCP端口，U：表示UDP端口</td></tr><tr><td>-exclude</td><td>排除指定主机。</td></tr><tr><td>-excludefile</td><td>排除指定文件中的主机。</td></tr></tbody></table><p><strong>端口的三种状态：</strong></p><p>Open：意味着目标主机能够在这个端口使用accept()系统调用接受连接。</p><p>filtered：表示防火墙、包过滤和其它的网络安全软件掩盖了这个端口，禁止nmap探测其是否打开。</p><p>unfiltered：表示这个端口关闭，并且没有防火墙/包过滤软件来隔离nmap的探测企图。</p><p><strong>举例说明：</strong></p><p>1、探测指定网段是否有FTP服务的主机，不做DNS反向解析</p><p>nmap -sS –n –p 21192.168.0.0/24</p><p>2、探测指定服务器是否启有特定端口的服务</p><p>nmap –n –p T:21-25,80,110,3389–sS 192.168.0.1</p><p>3、使用TCP连接扫描探测指定服务器，即使无法ping通也仍然继续探测</p><p>4、nmap -sT –PO 192.168.0.1</p><p>5、探测指定服务器的操作系统类型</p><p>nmap –O –n 192.168.0.1</p><p>6、探测局域网段中各主机开启了哪些服务</p><p>nmap –sS 192.168.0.0/24</p><p>7、探测192.168.0.0和172.16.0.0/16网段中有哪些主机在运行</p><p>nmap –sP –n 192.168.0.0/24 172.16.0.0/16</p><p>8、快速扫描主机开放端口</p><p>nmap -F 192.168.0.1</p><p><strong>2、TCPDump工具</strong></p><p>主要功能：捕获和分析数据包。</p><p>TcpDump可以将网络中传送的数据包的“头”完全截获下来提供分析。它支持针对网络层、协议、主机、网络或端口的过滤，并提供 and、or、not等逻辑语句来帮助你去掉无用的信息。</p><p>命令格式：tcpdump [ 选项 ] [ -c 数量 ] [ -i 网络接口 ] [ -w 文件名 ] [ 表达式 ]</p><p><strong>常用选项：</strong></p><p>-l：使标准输出变为缓冲行形式；</p><p>-c：抓包次数；</p><p>-nn：直接以 IP 及 Port Number 显示，而非主机名与服务名称；</p><p>-s ：&lt;数据包大小&gt; 设置每个数据包的大小；</p><p>-i：指定监听的网络接口；</p><p>-r：从指定的文件中读取包；</p><p>-w：输出信息保存到指定文件；</p><p>-a：将网络地址和广播地址转变成名字；</p><p>-d：将匹配信息包的代码以人们能够理解的汇编格式给出；</p><p>-e：在输出行打印出数据链路层的头部信息；</p><p>-f：将外部的Internet地址以数字的形式打印出来；</p><p>-t：在输出的每一行不打印时间戳；</p><p>-v ：输出稍微详细的报文信息；加一个v更详细。</p><p><strong>四种表达式：过滤报文条件</strong></p><p>1、 关于类型的关键字，主要包括host，net，port, 例如 host210.27.48.2，指明 210.27.48.2是一台主机，net 202.0.0.0 指明202.0.0.0是一个网络地址，port 23 指明端口号是23。如果没有指定类型，缺省的类型是host。</p><p>2、 确定传输方向的关键字，主要包括src, dst ,dst or src, dst and src ,这些关键字指明了传输的方向。例如 src210.27.48.2 ,指明ip包中源地址是210.27.48.2, dst net 202.0.0.0 指明目的网络地址是202.0.0.0 。如果没有指明方向关键字，则缺省是src or dst关键字。</p><p>3、<a href="http://cisco.chinaitlab.com/List_11.html" target="_blank" rel="noopener">协议</a>的关键字，主要包括ip,arp,tcp,udp等类型。</p><p>4、三种逻辑运算，与运算是’and’,’&amp;&amp;’; 或运算是’or’ ,’||’； 非运算是 ‘not ‘ ‘! ‘。</p><p>其他重要的关键字如下： broadcast,less（小于）,greater（大于）</p><p><strong>举例说明：</strong></p><p>1、截获eth0网卡10次收发所有数据包并将抓包结果保存到test文件,再读取test抓包结果文件</p><p>tcpdump –i eth0 –c 10 –w test</p><p>tcpdump –r test</p><p>2、截获来访问80端口的所有数据包（指定端口范围portrange 1-1024）</p><p>tcpdump port 80</p><p>3、截获所有来自主机114.254.151.51的进出所有数据包</p><p>tcpdump host 114.254.151.51</p><p>4、截获ip包中源地址是114.254.151.51的（目的是dst）</p><p>tcpdump src 114.254.151.51</p><p>5、截获主机114.254.151.51和主机114.254.151.52的通信</p><p>tcpdum host 114.254.151.51 and 114.254.151.52</p><p>6、截获tcp协议并且源地址114.254.151.51来访问80的端口</p><p>tcpdump tcp and src 114.254.151.51 and port 80</p><p>7、截获主机114.254.151.51除了和114.254.151.52之外的所有ip包</p><p>tcpdump ip host 114.254.151.51 and ! 114.254.151.52</p><p>8、截获长度大于1000数据包,对于DDOS攻击时，可以使用</p><p>tcpdump greater 1000</p>]]></content>
    
    
    
    <tags>
      
      <tag>nmap</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
